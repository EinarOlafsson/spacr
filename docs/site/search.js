window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "spacr", "modulename": "spacr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_annotate", "modulename": "spacr.app_annotate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_annotate.convert_to_number", "modulename": "spacr.app_annotate", "qualname": "convert_to_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_annotate.initiate_annotation_app", "modulename": "spacr.app_annotate", "qualname": "initiate_annotation_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_annotate.start_annotate_app", "modulename": "spacr.app_annotate", "qualname": "start_annotate_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_classify", "modulename": "spacr.app_classify", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_classify.start_classify_app", "modulename": "spacr.app_classify", "qualname": "start_classify_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_make_masks", "modulename": "spacr.app_make_masks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_make_masks.initiate_make_mask_app", "modulename": "spacr.app_make_masks", "qualname": "initiate_make_mask_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_make_masks.start_make_mask_app", "modulename": "spacr.app_make_masks", "qualname": "start_make_mask_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_mask", "modulename": "spacr.app_mask", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_mask.start_mask_app", "modulename": "spacr.app_mask", "qualname": "start_mask_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_measure", "modulename": "spacr.app_measure", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_measure.start_measure_app", "modulename": "spacr.app_measure", "qualname": "start_measure_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_sequencing", "modulename": "spacr.app_sequencing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_sequencing.start_seq_app", "modulename": "spacr.app_sequencing", "qualname": "start_seq_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.app_umap", "modulename": "spacr.app_umap", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.app_umap.start_umap_app", "modulename": "spacr.app_umap", "qualname": "start_umap_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core", "modulename": "spacr.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.core.preprocess_generate_masks", "modulename": "spacr.core", "qualname": "preprocess_generate_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core.generate_cellpose_masks", "modulename": "spacr.core", "qualname": "generate_cellpose_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">object_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core.generate_image_umap", "modulename": "spacr.core", "qualname": "generate_image_umap", "kind": "function", "doc": "<p>Generate UMAP or tSNE embedding and visualize the data with clustering.</p>\n\n<p>Parameters:\nsettings (dict): Dictionary containing the following keys:\nsrc (str): Source directory containing the data.\nrow_limit (int): Limit the number of rows to process.\ntables (list): List of table names to read from the database.\nvisualize (str): Visualization type.\nimage_nr (int): Number of images to display.\ndot_size (int): Size of dots in the scatter plot.\nn_neighbors (int): Number of neighbors for UMAP.\nfiguresize (int): Size of the figure.\nblack_background (bool): Whether to use a black background.\nremove_image_canvas (bool): Whether to remove the image canvas.\nplot_outlines (bool): Whether to plot outlines.\nplot_points (bool): Whether to plot points.\nsmooth_lines (bool): Whether to smooth lines.\nverbose (bool): Whether to print verbose output.\nembedding_by_controls (bool): Whether to use embedding from controls.\ncol_to_compare (str): Column to compare for control-based embedding.\npos (str): Positive control value.\nneg (str): Negative control value.\nclustering (str): Clustering method ('DBSCAN' or 'KMeans').\nexclude (list): List of columns to exclude from the analysis.\nplot_images (bool): Whether to plot images.\nreduction_method (str): Dimensionality reduction method ('UMAP' or 'tSNE').\nsave_figure (bool): Whether to save the figure as a PDF.</p>\n\n<p>Returns:\npd.DataFrame: DataFrame with the original data and an additional column 'cluster' containing the cluster identity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core.reducer_hyperparameter_search", "modulename": "spacr.core", "qualname": "reducer_hyperparameter_search", "kind": "function", "doc": "<p>Perform a hyperparameter search for UMAP or tSNE on the given data.</p>\n\n<p>Parameters:\nsettings (dict): Dictionary containing the following keys:\nsrc (str): Source directory containing the data.\nrow_limit (int): Limit the number of rows to process.\ntables (list): List of table names to read from the database.\nfilter_by (str): Column to filter the data.\nsample_size (int): Number of samples to use for the hyperparameter search.\nremove_highly_correlated (bool): Whether to remove highly correlated columns.\nlog_data (bool): Whether to log transform the data.\nverbose (bool): Whether to print verbose output.\nreduction_method (str): Dimensionality reduction method ('UMAP' or 'tSNE').\nreduction_params (list): List of dictionaries containing hyperparameters to test for the reduction method.\ndbscan_params (list): List of dictionaries containing DBSCAN hyperparameters to test.\nkmeans_params (list): List of dictionaries containing KMeans hyperparameters to test.\npointsize (int): Size of the points in the scatter plot.\nsave (bool): Whether to save the resulting plot as a file.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">reduction_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dbscan_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kmeans_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core.generate_mediar_masks", "modulename": "spacr.core", "qualname": "generate_mediar_masks", "kind": "function", "doc": "<p>Generates masks using the MEDIARPredictor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  Source folder containing images or npz files.</li>\n<li><strong>settings</strong>:  Dictionary of settings for generating masks.</li>\n<li><strong>object_type</strong>:  Type of object to detect (e.g., 'cell', 'nucleus', etc.).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">object_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.core.generate_screen_graphs", "modulename": "spacr.core", "qualname": "generate_screen_graphs", "kind": "function", "doc": "<p>Generate screen graphs for different measurements in a given source directory.</p>\n\n<p>Args:\n    src (str or list): Path(s) to the source directory or directories.\n    tables (list): List of tables to include in the analysis (default: ['cell', 'nucleus', 'pathogen', 'cytoplasm']).\n    graph_type (str): Type of graph to generate (default: 'bar').\n    summary_func (str or function): Function to summarize data (default: 'mean').\n    y_axis_start (float): Starting value for the y-axis (default: 0).\n    error_bar_type (str): Type of error bar to use ('std' or 'sem') (default: 'std').\n    theme (str): Theme for the graph (default: 'pastel').\n    representation (str): Representation for grouping (default: 'well').</p>\n\n<p>Returns:\n    figs (list): List of generated figures.\n    results (list): List of corresponding result DataFrames.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr", "modulename": "spacr.deep_spacr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.deep_spacr.apply_model", "modulename": "spacr.deep_spacr", "qualname": "apply_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.apply_model_to_tar", "modulename": "spacr.deep_spacr", "qualname": "apply_model_to_tar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.evaluate_model_performance", "modulename": "spacr.deep_spacr", "qualname": "evaluate_model_performance", "kind": "function", "doc": "<p>Evaluates the performance of a model on a given data loader.</p>\n\n<p>Args:\n    model (torch.nn.Module): The model to evaluate.\n    loader (torch.utils.data.DataLoader): The data loader to evaluate the model on.\n    loader_name (str): The name of the data loader.\n    epoch (int): The current epoch number.\n    loss_type (str): The type of loss function to use.</p>\n\n<p>Returns:\n    data_df (pandas.DataFrame): The classification metrics data as a DataFrame.\n    prediction_pos_probs (list): The positive class probabilities for each prediction.\n    all_labels (list): The true labels for each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">loader</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">loss_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.test_model_core", "modulename": "spacr.deep_spacr", "qualname": "test_model_core", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">loader</span>, </span><span class=\"param\"><span class=\"n\">loader_name</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">loss_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.test_model_performance", "modulename": "spacr.deep_spacr", "qualname": "test_model_performance", "kind": "function", "doc": "<p>Test the performance of a model on given data loaders.</p>\n\n<p>Args:\n    loaders (list): List of data loaders.\n    model: The model to be tested.\n    loader_name_list (list): List of names for the data loaders.\n    epoch (int): The current epoch.\n    loss_type: The type of loss function.</p>\n\n<p>Returns:\n    tuple: A tuple containing the test results and the results dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loaders</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">loader_name_list</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">loss_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.train_test_model", "modulename": "spacr.deep_spacr", "qualname": "train_test_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.train_model", "modulename": "spacr.deep_spacr", "qualname": "train_model", "kind": "function", "doc": "<p>Trains a model using the specified parameters.</p>\n\n<p>Args:\n    dst (str): The destination path to save the model and results.\n    model_type (str): The type of model to train.\n    train_loaders (list): A list of training data loaders.\n    epochs (int, optional): The number of training epochs. Defaults to 100.\n    learning_rate (float, optional): The learning rate for the optimizer. Defaults to 0.0001.\n    weight_decay (float, optional): The weight decay for the optimizer. Defaults to 0.05.\n    amsgrad (bool, optional): Whether to use AMSGrad for the optimizer. Defaults to False.\n    optimizer_type (str, optional): The type of optimizer to use. Defaults to 'adamw'.\n    use_checkpoint (bool, optional): Whether to use checkpointing during training. Defaults to False.\n    dropout_rate (float, optional): The dropout rate for the model. Defaults to 0.\n    n_jobs (int, optional): The number of n_jobs for data loading. Defaults to 20.\n    val_loaders (list, optional): A list of validation data loaders. Defaults to None.\n    test_loaders (list, optional): A list of test data loaders. Defaults to None.\n    init_weights (str, optional): The initialization weights for the model. Defaults to 'imagenet'.\n    intermedeate_save (list, optional): The intermediate save thresholds. Defaults to None.\n    chan_dict (dict, optional): The channel dictionary. Defaults to None.\n    schedule (str, optional): The learning rate schedule. Defaults to None.\n    loss_type (str, optional): The loss function type. Defaults to 'binary_cross_entropy_with_logits'.\n    gradient_accumulation (bool, optional): Whether to use gradient accumulation. Defaults to False.\n    gradient_accumulation_steps (int, optional): The number of steps for gradient accumulation. Defaults to 4.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dst</span>,</span><span class=\"param\">\t<span class=\"n\">model_type</span>,</span><span class=\"param\">\t<span class=\"n\">train_loaders</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">amsgrad</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;adamw&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">val_loaders</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test_loaders</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init_weights</span><span class=\"o\">=</span><span class=\"s1\">&#39;imagenet&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">intermedeate_save</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chan_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">schedule</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">loss_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;binary_cross_entropy_with_logits&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_accumulation</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_accumulation_steps</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.generate_activation_map", "modulename": "spacr.deep_spacr", "qualname": "generate_activation_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.visualize_classes", "modulename": "spacr.deep_spacr", "qualname": "visualize_classes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">dtype</span>, </span><span class=\"param\"><span class=\"n\">class_names</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.visualize_integrated_gradients", "modulename": "spacr.deep_spacr", "qualname": "visualize_integrated_gradients", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">target_label_idx</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_integrated_grads</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;integrated_grads&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.SmoothGrad", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.deep_spacr.SmoothGrad.__init__", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">stdev_spread</span><span class=\"o\">=</span><span class=\"mf\">0.15</span></span>)</span>"}, {"fullname": "spacr.deep_spacr.SmoothGrad.model", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.deep_spacr.SmoothGrad.n_samples", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad.n_samples", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.deep_spacr.SmoothGrad.stdev_spread", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad.stdev_spread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.deep_spacr.SmoothGrad.compute_smooth_grad", "modulename": "spacr.deep_spacr", "qualname": "SmoothGrad.compute_smooth_grad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_tensor</span>, </span><span class=\"param\"><span class=\"n\">target_class</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.visualize_smooth_grad", "modulename": "spacr.deep_spacr", "qualname": "visualize_smooth_grad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">target_label_idx</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_smooth_grad</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;smooth_grad&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.deep_spacr", "modulename": "spacr.deep_spacr", "qualname": "deep_spacr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.model_knowledge_transfer", "modulename": "spacr.deep_spacr", "qualname": "model_knowledge_transfer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">teacher_paths</span>,</span><span class=\"param\">\t<span class=\"n\">student_save_path</span>,</span><span class=\"param\">\t<span class=\"n\">data_loader</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">student_model_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;maxvit_t&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.model_fusion", "modulename": "spacr.deep_spacr", "qualname": "model_fusion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_paths</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;maxvit_t&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">aggregator</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.deep_spacr.annotate_filter_vision", "modulename": "spacr.deep_spacr", "qualname": "annotate_filter_vision", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui", "modulename": "spacr.gui", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp", "modulename": "spacr.gui", "qualname": "MainApp", "kind": "class", "doc": "<p>Toplevel widget of Tk which represents mostly the main window\nof an application. It has an associated Tcl interpreter.</p>\n", "bases": "tkinter.Tk"}, {"fullname": "spacr.gui.MainApp.__init__", "modulename": "spacr.gui", "qualname": "MainApp.__init__", "kind": "function", "doc": "<p>Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will\nbe created. BASENAME will be used for the identification of the profile file (see\nreadprofile).\nIt is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\nis the name of the widget class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">default_app</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "spacr.gui.MainApp.color_settings", "modulename": "spacr.gui", "qualname": "MainApp.color_settings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.main_buttons", "modulename": "spacr.gui", "qualname": "MainApp.main_buttons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.additional_buttons", "modulename": "spacr.gui", "qualname": "MainApp.additional_buttons", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.main_gui_apps", "modulename": "spacr.gui", "qualname": "MainApp.main_gui_apps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.additional_gui_apps", "modulename": "spacr.gui", "qualname": "MainApp.additional_gui_apps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.selected_app", "modulename": "spacr.gui", "qualname": "MainApp.selected_app", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui.MainApp.create_widgets", "modulename": "spacr.gui", "qualname": "MainApp.create_widgets", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.create_startup_screen", "modulename": "spacr.gui", "qualname": "MainApp.create_startup_screen", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.update_description", "modulename": "spacr.gui", "qualname": "MainApp.update_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.show_description", "modulename": "spacr.gui", "qualname": "MainApp.show_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">description</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.clear_description", "modulename": "spacr.gui", "qualname": "MainApp.clear_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.load_app", "modulename": "spacr.gui", "qualname": "MainApp.load_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">app_name</span>, </span><span class=\"param\"><span class=\"n\">app_func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.MainApp.clear_frame", "modulename": "spacr.gui", "qualname": "MainApp.clear_frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui.gui_app", "modulename": "spacr.gui", "qualname": "gui_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core", "modulename": "spacr.gui_core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_core.q", "modulename": "spacr.gui_core", "qualname": "q", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.console_output", "modulename": "spacr.gui_core", "qualname": "console_output", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.parent_frame", "modulename": "spacr.gui_core", "qualname": "parent_frame", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.vars_dict", "modulename": "spacr.gui_core", "qualname": "vars_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.canvas", "modulename": "spacr.gui_core", "qualname": "canvas", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.canvas_widget", "modulename": "spacr.gui_core", "qualname": "canvas_widget", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.scrollable_frame", "modulename": "spacr.gui_core", "qualname": "scrollable_frame", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.progress_label", "modulename": "spacr.gui_core", "qualname": "progress_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.fig_queue", "modulename": "spacr.gui_core", "qualname": "fig_queue", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.figures", "modulename": "spacr.gui_core", "qualname": "figures", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.figure_index", "modulename": "spacr.gui_core", "qualname": "figure_index", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.progress_bar", "modulename": "spacr.gui_core", "qualname": "progress_bar", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.usage_bars", "modulename": "spacr.gui_core", "qualname": "usage_bars", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.index_control", "modulename": "spacr.gui_core", "qualname": "index_control", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_core.thread_control", "modulename": "spacr.gui_core", "qualname": "thread_control", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;run_thread&#x27;: None, &#x27;stop_requested&#x27;: False}"}, {"fullname": "spacr.gui_core.toggle_settings", "modulename": "spacr.gui_core", "qualname": "toggle_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">button_scrollable_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.display_figure", "modulename": "spacr.gui_core", "qualname": "display_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.clear_unused_figures", "modulename": "spacr.gui_core", "qualname": "clear_unused_figures", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.show_previous_figure", "modulename": "spacr.gui_core", "qualname": "show_previous_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.show_next_figure", "modulename": "spacr.gui_core", "qualname": "show_next_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.process_fig_queue", "modulename": "spacr.gui_core", "qualname": "process_fig_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.update_figure", "modulename": "spacr.gui_core", "qualname": "update_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.setup_plot_section", "modulename": "spacr.gui_core", "qualname": "setup_plot_section", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vertical_container</span>, </span><span class=\"param\"><span class=\"n\">settings_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.set_globals", "modulename": "spacr.gui_core", "qualname": "set_globals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">thread_control_var</span>,</span><span class=\"param\">\t<span class=\"n\">q_var</span>,</span><span class=\"param\">\t<span class=\"n\">console_output_var</span>,</span><span class=\"param\">\t<span class=\"n\">parent_frame_var</span>,</span><span class=\"param\">\t<span class=\"n\">vars_dict_var</span>,</span><span class=\"param\">\t<span class=\"n\">canvas_var</span>,</span><span class=\"param\">\t<span class=\"n\">canvas_widget_var</span>,</span><span class=\"param\">\t<span class=\"n\">scrollable_frame_var</span>,</span><span class=\"param\">\t<span class=\"n\">fig_queue_var</span>,</span><span class=\"param\">\t<span class=\"n\">progress_bar_var</span>,</span><span class=\"param\">\t<span class=\"n\">usage_bars_var</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.import_settings", "modulename": "spacr.gui_core", "qualname": "import_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.setup_settings_panel", "modulename": "spacr.gui_core", "qualname": "setup_settings_panel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vertical_container</span>, </span><span class=\"param\"><span class=\"n\">settings_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.setup_console", "modulename": "spacr.gui_core", "qualname": "setup_console", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vertical_container</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.setup_button_section", "modulename": "spacr.gui_core", "qualname": "setup_button_section", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">horizontal_container</span>,</span><span class=\"param\">\t<span class=\"n\">settings_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mask&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">run</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">abort</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">download</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">import_btn</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.setup_usage_panel", "modulename": "spacr.gui_core", "qualname": "setup_usage_panel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">horizontal_container</span>, </span><span class=\"param\"><span class=\"n\">btn_col</span>, </span><span class=\"param\"><span class=\"n\">uppdate_frequency</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.initiate_abort", "modulename": "spacr.gui_core", "qualname": "initiate_abort", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.check_src_folders_files", "modulename": "spacr.gui_core", "qualname": "check_src_folders_files", "kind": "function", "doc": "<p>Checks if 'src' is a key in the settings dictionary and if it exists as a valid path.\nIf 'src' is a list, iterates through the list and checks each path.\nIf any path is missing, prompts the user to edit or remove invalid paths.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">settings_type</span>, </span><span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.start_process", "modulename": "spacr.gui_core", "qualname": "start_process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fig_queue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">settings_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.process_console_queue", "modulename": "spacr.gui_core", "qualname": "process_console_queue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.process_console_queue_v2", "modulename": "spacr.gui_core", "qualname": "process_console_queue_v2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.main_thread_update_function", "modulename": "spacr.gui_core", "qualname": "main_thread_update_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">fig_queue</span>, </span><span class=\"param\"><span class=\"n\">canvas_widget</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.cleanup_previous_instance", "modulename": "spacr.gui_core", "qualname": "cleanup_previous_instance", "kind": "function", "doc": "<p>Cleans up resources from the previous application instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_core.initiate_root", "modulename": "spacr.gui_core", "qualname": "initiate_root", "kind": "function", "doc": "<p>Initializes the root window and sets up the GUI components based on the specified settings type.</p>\n\n<p>Args:\n    parent (tkinter.Tk or tkinter.Toplevel): The parent window for the GUI.\n    settings_type (str, optional): The type of settings to be displayed in the GUI. Defaults to 'mask'.</p>\n\n<p>Returns:\n    tuple: A tuple containing the parent frame and the dictionary of variables used in the GUI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">settings_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements", "modulename": "spacr.gui_elements", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.fig", "modulename": "spacr.gui_elements", "qualname": "fig", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.gui_elements.restart_gui_app", "modulename": "spacr.gui_elements", "qualname": "restart_gui_app", "kind": "function", "doc": "<p>Restarts the GUI application by destroying the current instance\nand launching a fresh one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.create_menu_bar", "modulename": "spacr.gui_elements", "qualname": "create_menu_bar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.set_element_size", "modulename": "spacr.gui_elements", "qualname": "set_element_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.set_dark_style", "modulename": "spacr.gui_elements", "qualname": "set_dark_style", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">style</span>,</span><span class=\"param\">\t<span class=\"n\">parent_frame</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">containers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">widgets</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_family</span><span class=\"o\">=</span><span class=\"s1\">&#39;OpenSans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">bg_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fg_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">active_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;blue&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">inactive_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;dark_gray&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrFont", "modulename": "spacr.gui_elements", "qualname": "spacrFont", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFont.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrFont.__init__", "kind": "function", "doc": "<p>Initializes the FontLoader class.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>font_name: str, the name of the font (e.g., 'OpenSans').</li>\n<li>font_style: str, the style of the font (e.g., 'Regular', 'Bold').</li>\n<li>font_size: int, the size of the font (default: 12).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">font_name</span>, </span><span class=\"param\"><span class=\"n\">font_style</span>, </span><span class=\"param\"><span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">12</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrFont.font_name", "modulename": "spacr.gui_elements", "qualname": "spacrFont.font_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFont.font_style", "modulename": "spacr.gui_elements", "qualname": "spacrFont.font_style", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFont.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrFont.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFont.font_path", "modulename": "spacr.gui_elements", "qualname": "spacrFont.font_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFont.get_font_path", "modulename": "spacr.gui_elements", "qualname": "spacrFont.get_font_path", "kind": "function", "doc": "<p>Returns the font path based on the font name and style.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>font_name: str, the name of the font.</li>\n<li>font_style: str, the style of the font.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>str, the path to the font file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">font_name</span>, </span><span class=\"param\"><span class=\"n\">font_style</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrFont.load_font", "modulename": "spacr.gui_elements", "qualname": "spacrFont.load_font", "kind": "function", "doc": "<p>Loads the font into Tkinter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrFont.get_font", "modulename": "spacr.gui_elements", "qualname": "spacrFont.get_font", "kind": "function", "doc": "<p>Returns the font in the specified size.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>size: int, the size of the font (optional).</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tkFont.Font object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer", "modulename": "spacr.gui_elements", "qualname": "spacrContainer", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrContainer.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">&#39;vertical&#39;</span>, </span><span class=\"param\"><span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrContainer.orient", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.orient", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrContainer.bg", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.bg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrContainer.sash_thickness", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.sash_thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrContainer.panes", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.panes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrContainer.sashes", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.sashes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrContainer.add", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">stretch</span><span class=\"o\">=</span><span class=\"s1\">&#39;always&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.create_sash", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.create_sash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.reposition_panes", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.reposition_panes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.on_configure", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.on_configure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.on_enter_sash", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.on_enter_sash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.on_leave_sash", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.on_leave_sash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.start_resize", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.start_resize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrContainer.perform_resize", "modulename": "spacr.gui_elements", "qualname": "spacrContainer.perform_resize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrEntry", "modulename": "spacr.gui_elements", "qualname": "spacrEntry", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrEntry.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span>,</span><span class=\"param\">\t<span class=\"n\">textvariable</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrEntry.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.outline", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.outline", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.font_family", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.font_family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.canvas_height", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.canvas_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrEntry.draw_rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.draw_rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrEntry.on_focus_in", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.on_focus_in", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrEntry.on_focus_out", "modulename": "spacr.gui_elements", "qualname": "spacrEntry.on_focus_out", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCheck", "modulename": "spacr.gui_elements", "qualname": "spacrCheck", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrCheck.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrCheck.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.variable", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.variable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.canvas_width", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.canvas_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.canvas_height", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.canvas_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheck.draw_rounded_square", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.draw_rounded_square", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCheck.update_check", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.update_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCheck.toggle_variable", "modulename": "spacr.gui_elements", "qualname": "spacrCheck.toggle_variable", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo", "modulename": "spacr.gui_elements", "qualname": "spacrCombo", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrCombo.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">textvariable</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrCombo.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.font_family", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.font_family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.values", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.canvas_width", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.canvas_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.canvas_height", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.canvas_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.var", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.var", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.selected_value", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.selected_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.dropdown_menu", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.dropdown_menu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCombo.draw_rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.draw_rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo.on_click", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.on_click", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo.open_dropdown", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.open_dropdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo.close_dropdown", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.close_dropdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo.on_select", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.on_select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCombo.set", "modulename": "spacr.gui_elements", "qualname": "spacrCombo.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">options</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.variable", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.variable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.options", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.options", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.command", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.text", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.size", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.size", "kind": "function", "doc": "<p>Return a tuple of the number of column and rows in the grid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.button_width", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.button_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.canvas_width", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.canvas_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.canvas_height", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.canvas_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.button_bg", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.button_bg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.button_text", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.button_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.menu", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.menu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.create_rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.create_rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">y1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">y2</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.on_enter", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.on_enter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.on_leave", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.on_leave", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.on_click", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.on_click", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.post_menu", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.post_menu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.on_select", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.on_select", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">option</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrDropdownMenu.update_styles", "modulename": "spacr.gui_elements", "qualname": "spacrDropdownMenu.update_styles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">active_categories</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrCheckbutton", "modulename": "spacr.gui_elements", "qualname": "spacrCheckbutton", "kind": "class", "doc": "<p>Ttk Checkbutton widget which is either in on- or off-state.</p>\n", "bases": "tkinter.ttk.Checkbutton"}, {"fullname": "spacr.gui_elements.spacrCheckbutton.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrCheckbutton.__init__", "kind": "function", "doc": "<p>Construct a Ttk Checkbutton widget with the parent master.</p>\n\n<p>STANDARD OPTIONS</p>\n\n<pre><code>class, compound, cursor, image, state, style, takefocus,\ntext, textvariable, underline, width\n</code></pre>\n\n<p>WIDGET-SPECIFIC OPTIONS</p>\n\n<pre><code>command, offvalue, onvalue, variable\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrCheckbutton.text", "modulename": "spacr.gui_elements", "qualname": "spacrCheckbutton.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheckbutton.variable", "modulename": "spacr.gui_elements", "qualname": "spacrCheckbutton.variable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrCheckbutton.command", "modulename": "spacr.gui_elements", "qualname": "spacrCheckbutton.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar", "kind": "class", "doc": "<p>Ttk Progressbar widget shows the status of a long-running\noperation. They can operate in two modes: determinate mode shows the\namount completed relative to the total amount of work to be done, and\nindeterminate mode provides an animated display to let the user know\nthat something is happening.</p>\n", "bases": "tkinter.ttk.Progressbar"}, {"fullname": "spacr.gui_elements.spacrProgressBar.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.__init__", "kind": "function", "doc": "<p>Construct a Ttk Progressbar with parent master.</p>\n\n<p>STANDARD OPTIONS</p>\n\n<pre><code>class, cursor, style, takefocus\n</code></pre>\n\n<p>WIDGET-SPECIFIC OPTIONS</p>\n\n<pre><code>orient, length, mode, maximum, value, variable, phase\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrProgressBar.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.style", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.style", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.label", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.operation_type", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.operation_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.additional_info", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.additional_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrProgressBar.set_label_position", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.set_label_position", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrProgressBar.update_label", "modulename": "spacr.gui_elements", "qualname": "spacrProgressBar.update_label", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider", "modulename": "spacr.gui_elements", "qualname": "spacrSlider", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrSlider.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">master</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">knob_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">position</span><span class=\"o\">=</span><span class=\"s1\">&#39;center&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">from_</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_index</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrSlider.specified_length", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.specified_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.knob_radius", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.knob_radius", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.thickness", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.knob_position", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.knob_position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.slider_line", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.slider_line", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.knob", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.knob", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.position", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.offset", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.offset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.from_", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.from_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.to", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.to", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.value", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.show_index", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.show_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.command", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.length", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSlider.resize_slider", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.resize_slider", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.value_to_position", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.value_to_position", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.position_to_value", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.position_to_value", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.draw_slider", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.draw_slider", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inactive</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.move_knob", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.move_knob", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.activate_knob", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.activate_knob", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.release_knob", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.release_knob", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.set_to", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.set_to", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_to</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.get", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.set", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.set", "kind": "function", "doc": "<p>Set the slider's value and update the knob position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.jump_to_click", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.jump_to_click", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSlider.update_slider_from_entry", "modulename": "spacr.gui_elements", "qualname": "spacrSlider.update_slider_from_entry", "kind": "function", "doc": "<p>Update the slider's value from the entry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrScrollbarStyle", "modulename": "spacr.gui_elements", "qualname": "spacrScrollbarStyle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">style</span>, </span><span class=\"param\"><span class=\"n\">inactive_color</span>, </span><span class=\"param\"><span class=\"n\">active_color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrFrame", "modulename": "spacr.gui_elements", "qualname": "spacrFrame", "kind": "class", "doc": "<p>Ttk Frame widget is a container, used to group other widgets\ntogether.</p>\n", "bases": "tkinter.ttk.Frame"}, {"fullname": "spacr.gui_elements.spacrFrame.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrFrame.__init__", "kind": "function", "doc": "<p>Construct a Ttk Frame with parent master.</p>\n\n<p>STANDARD OPTIONS</p>\n\n<pre><code>class, cursor, style, takefocus\n</code></pre>\n\n<p>WIDGET-SPECIFIC OPTIONS</p>\n\n<pre><code>borderwidth, relief, padding, width, height\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">scrollbar</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">textbox</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrFrame.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrFrame.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFrame.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrFrame.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFrame.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrFrame.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrFrame.rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrFrame.rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">canvas</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">y1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">y2</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrLabel", "modulename": "spacr.gui_elements", "qualname": "spacrLabel", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrLabel.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">style</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrLabel.text", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.align", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.align", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.style_out", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.style_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.font_style", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.font_style", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.font_family", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.font_family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.style", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.style", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrLabel.set_text", "modulename": "spacr.gui_elements", "qualname": "spacrLabel.set_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton", "modulename": "spacr.gui_elements", "qualname": "spacrButton", "kind": "class", "doc": "<p>Frame widget which may contain other widgets and can have a 3D border.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "spacr.gui_elements.spacrButton.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrButton.__init__", "kind": "function", "doc": "<p>Construct a frame widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icon_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">show_text</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">outline</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">animation</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrButton.text", "modulename": "spacr.gui_elements", "qualname": "spacrButton.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.command", "modulename": "spacr.gui_elements", "qualname": "spacrButton.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.icon_name", "modulename": "spacr.gui_elements", "qualname": "spacrButton.icon_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.size", "modulename": "spacr.gui_elements", "qualname": "spacrButton.size", "kind": "function", "doc": "<p>Return a tuple of the number of column and rows in the grid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.show_text", "modulename": "spacr.gui_elements", "qualname": "spacrButton.show_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.outline", "modulename": "spacr.gui_elements", "qualname": "spacrButton.outline", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.animation", "modulename": "spacr.gui_elements", "qualname": "spacrButton.animation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.font_size", "modulename": "spacr.gui_elements", "qualname": "spacrButton.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.font_loader", "modulename": "spacr.gui_elements", "qualname": "spacrButton.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrButton.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.inactive_color", "modulename": "spacr.gui_elements", "qualname": "spacrButton.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.bg_color", "modulename": "spacr.gui_elements", "qualname": "spacrButton.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.active_color", "modulename": "spacr.gui_elements", "qualname": "spacrButton.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.fg_color", "modulename": "spacr.gui_elements", "qualname": "spacrButton.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.is_zoomed_in", "modulename": "spacr.gui_elements", "qualname": "spacrButton.is_zoomed_in", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrButton.load_icon", "modulename": "spacr.gui_elements", "qualname": "spacrButton.load_icon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.get_icon_path", "modulename": "spacr.gui_elements", "qualname": "spacrButton.get_icon_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">icon_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.on_enter", "modulename": "spacr.gui_elements", "qualname": "spacrButton.on_enter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.on_leave", "modulename": "spacr.gui_elements", "qualname": "spacrButton.on_leave", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.on_click", "modulename": "spacr.gui_elements", "qualname": "spacrButton.on_click", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.create_rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrButton.create_rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">y1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">y2</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.update_description", "modulename": "spacr.gui_elements", "qualname": "spacrButton.update_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.clear_description", "modulename": "spacr.gui_elements", "qualname": "spacrButton.clear_description", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.animate_zoom", "modulename": "spacr.gui_elements", "qualname": "spacrButton.animate_zoom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_scale</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrButton.zoom_icon", "modulename": "spacr.gui_elements", "qualname": "spacrButton.zoom_icon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_factor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch", "kind": "class", "doc": "<p>Ttk Frame widget is a container, used to group other widgets\ntogether.</p>\n", "bases": "tkinter.ttk.Frame"}, {"fullname": "spacr.gui_elements.spacrSwitch.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.__init__", "kind": "function", "doc": "<p>Construct a Ttk Frame with parent master.</p>\n\n<p>STANDARD OPTIONS</p>\n\n<pre><code>class, cursor, style, takefocus\n</code></pre>\n\n<p>WIDGET-SPECIFIC OPTIONS</p>\n\n<pre><code>borderwidth, relief, padding, width, height\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrSwitch.text", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.variable", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.variable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.command", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.command", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.canvas", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.canvas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.switch_bg", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.switch_bg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.switch", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.switch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.label", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrSwitch.toggle", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.toggle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.update_switch", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.update_switch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.animate_switch", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.animate_switch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.animate_movement", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.animate_movement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_x</span>, </span><span class=\"param\"><span class=\"n\">end_x</span>, </span><span class=\"param\"><span class=\"n\">final_color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.get", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.set", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrSwitch.create_rounded_rectangle", "modulename": "spacr.gui_elements", "qualname": "spacrSwitch.create_rounded_rectangle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">y1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">y2</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"mi\">9</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrToolTip", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrToolTip.__init__", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">text</span></span>)</span>"}, {"fullname": "spacr.gui_elements.spacrToolTip.widget", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.widget", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrToolTip.text", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrToolTip.tooltip_window", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.tooltip_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.spacrToolTip.show_tooltip", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.show_tooltip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.spacrToolTip.hide_tooltip", "modulename": "spacr.gui_elements", "qualname": "spacrToolTip.hide_tooltip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.__init__", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">folder_path</span>, </span><span class=\"param\"><span class=\"n\">scale_factor</span></span>)</span>"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.root", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.folder_path", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.folder_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.scale_factor", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.scale_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.image_filenames", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.image_filenames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.masks_folder", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.masks_folder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.current_image_index", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.current_image_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.canvas_width", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.canvas_width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.canvas_height", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.canvas_height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_display", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_display", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_original_mask_from_zoom", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_original_mask_from_zoom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_original_mask", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_original_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zoomed_mask</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">y0</span>, </span><span class=\"param\"><span class=\"n\">y1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.get_scaling_factors", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.get_scaling_factors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_width</span>, </span><span class=\"param\"><span class=\"n\">img_height</span>, </span><span class=\"param\"><span class=\"n\">canvas_width</span>, </span><span class=\"param\"><span class=\"n\">canvas_height</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.canvas_to_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.canvas_to_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_canvas</span>, </span><span class=\"param\"><span class=\"n\">y_canvas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_zoom_on_enter", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_zoom_on_enter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.normalize_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.normalize_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">lower_quantile</span>, </span><span class=\"param\"><span class=\"n\">upper_quantile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.resize_arrays", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.resize_arrays", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.load_first_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.load_first_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.setup_canvas", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.setup_canvas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.initialize_flags", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.initialize_flags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_mouse_info", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_mouse_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.setup_navigation_toolbar", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.setup_navigation_toolbar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.setup_mode_toolbar", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.setup_mode_toolbar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.setup_function_toolbar", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.setup_function_toolbar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.setup_zoom_toolbar", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.setup_zoom_toolbar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.load_image_and_mask", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.load_image_and_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.display_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.display_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.display_zoomed_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.display_zoomed_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.overlay_mask_on_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.overlay_mask_on_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.previous_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.previous_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.next_image", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.next_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.save_mask", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.save_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.set_zoom_rectangle_start", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.set_zoom_rectangle_start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.set_zoom_rectangle_end", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.set_zoom_rectangle_end", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_zoom_box", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_zoom_box", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_zoom_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_zoom_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_brush_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_brush_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.image_to_canvas", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.image_to_canvas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_image</span>, </span><span class=\"param\"><span class=\"n\">y_image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_dividing_line_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_dividing_line_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.start_dividing_line", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.start_dividing_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.finish_dividing_line", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.finish_dividing_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.update_dividing_line_preview", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.update_dividing_line_preview", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_dividing_line", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_dividing_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_draw_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_draw_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_magic_wand_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_magic_wand_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.toggle_erase_mode", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.toggle_erase_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_brush_release", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_brush_release", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.erase_brush_release", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.erase_brush_release", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_brush", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_brush", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.erase_brush", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.erase_brush", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.erase_object", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.erase_object", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.use_magic_wand", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.use_magic_wand", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_magic_wand", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_magic_wand", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">seed_point</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span>, </span><span class=\"param\"><span class=\"n\">maximum</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">&#39;add&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.magic_wand_normal", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.magic_wand_normal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed_point</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.magic_wand_zoomed", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.magic_wand_zoomed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seed_point</span>, </span><span class=\"param\"><span class=\"n\">tolerance</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.draw", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.draw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.draw_on_zoomed_mask", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.draw_on_zoomed_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">draw_coordinates</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.finish_drawing", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.finish_drawing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.finish_drawing_if_active", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.finish_drawing_if_active", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.apply_normalization", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.apply_normalization", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.fill_objects", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.fill_objects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.relabel_objects", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.relabel_objects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.clear_objects", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.clear_objects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.invert_mask", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.invert_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.ModifyMaskApp.remove_small_objects", "modulename": "spacr.gui_elements", "qualname": "ModifyMaskApp.remove_small_objects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.__init__", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root</span>,</span><span class=\"param\">\t<span class=\"n\">db_path</span>,</span><span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">image_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">200</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;annotate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize_channels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "spacr.gui_elements.AnnotateApp.root", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.db_path", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.db_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.src", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.src", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.index", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.orig_annotation_columns", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.orig_annotation_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.annotation_column", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.annotation_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.image_type", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.image_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.channels", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.channels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.normalize", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.normalize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.percentiles", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.percentiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.images", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.images", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.pending_updates", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.pending_updates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.labels", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.labels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.adjusted_to_original_paths", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.adjusted_to_original_paths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.terminate", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.terminate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.update_queue", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.update_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.measurement", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.measurement", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.threshold", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.normalize_channels", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.normalize_channels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.font_loader", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.font_loader", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.font_size", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.font_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.bg_color", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.bg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.fg_color", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.fg_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.active_color", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.active_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.inactive_color", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.inactive_color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.filtered_paths_annotations", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.filtered_paths_annotations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.db_update_thread", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.db_update_thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.status_label", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.status_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.button_frame", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.button_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.next_button", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.next_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.previous_button", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.previous_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.exit_button", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.exit_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.train_button", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.train_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.settings_button", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.settings_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.grid_frame", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.grid_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_elements.AnnotateApp.open_settings_window", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.open_settings_window", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.update_settings", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.update_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.recreate_image_grid", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.recreate_image_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.swich_back_annotation_column", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.swich_back_annotation_column", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.calculate_grid_dimensions", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.calculate_grid_dimensions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.prefilter_paths_annotations", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.prefilter_paths_annotations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.load_images", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.load_images", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.load_single_image", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.load_single_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path_annotation_tuple</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.normalize_image", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.normalize_image", "kind": "function", "doc": "<p>Normalize an image based on specific channels (R, G, B).</p>\n\n<p>Args:\n    img (PIL.Image or np.array): Input image.\n    normalize (bool): Whether to normalize the image or not.\n    percentiles (tuple): Percentiles to use for intensity rescaling.\n    normalize_channels (list): List of channels to normalize. E.g., ['r', 'g', 'b'], ['r'], ['g'], etc.</p>\n\n<p>Returns:\n    PIL.Image: Normalized image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">normalize_channels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.add_colored_border", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.add_colored_border", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">border_width</span>, </span><span class=\"param\"><span class=\"n\">border_color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.filter_channels", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.filter_channels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.get_on_image_click", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.get_on_image_click", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.update_html", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.update_html", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.update_database_worker", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.update_database_worker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.update_gui_text", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.update_gui_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.next_page", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.next_page", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.previous_page", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.previous_page", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.shutdown", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.shutdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.AnnotateApp.train_and_classify", "modulename": "spacr.gui_elements", "qualname": "AnnotateApp.train_and_classify", "kind": "function", "doc": "<p>1) Merge data from the relevant DB tables (including png_list).\n2) Collect manual annotations from png_list.<annotation_column> =&gt; 'manual_annotation'.</p>\n\n<ul>\n<li>1 =&gt; class=1, 2 =&gt; class=0 (for training).\n3) If only one class is present, randomly sample unannotated images as the other class.\n4) Train an XGBoost model.\n5) Classify <em>all</em> rows -> fill XGboost_score (prob of class=1) &amp; XGboost_annotation (1 or 2 if high confidence).\n6) Write those columns back to sqlite, so every row in png_list has a score (and possibly an annotation).\n7) Refresh the UI (prefilter_paths_annotations + load_images).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.standardize_figure", "modulename": "spacr.gui_elements", "qualname": "standardize_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.modify_figure_properties", "modulename": "spacr.gui_elements", "qualname": "modify_figure_properties", "kind": "function", "doc": "<p>Modifies the properties of the figure, including scaling, line widths, font sizes, axis limits, x-axis label rotation, background color, text color, line color, and other common options.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>fig: The Matplotlib figure object to modify.</li>\n<li>scale_x: Scaling factor for the width of subplots (optional).</li>\n<li>scale_y: Scaling factor for the height of subplots (optional).</li>\n<li>line_width: Desired line width for all lines (optional).</li>\n<li>font_size: Desired font size for all text (optional).</li>\n<li>x_lim: Tuple specifying the x-axis limits (min, max) (optional).</li>\n<li>y_lim: Tuple specifying the y-axis limits (min, max) (optional).</li>\n<li>grid: Boolean to add grid lines to the plot (optional).</li>\n<li>legend: Boolean to show/hide the legend (optional).</li>\n<li>title: String to set as the title of the plot (optional).</li>\n<li>x_label_rotation: Angle to rotate the x-axis labels (optional).</li>\n<li>remove_axes: Boolean to remove or show the axes labels (optional).</li>\n<li>bg_color: Color for the figure and subplot background (optional).</li>\n<li>text_color: Color for all text in the figure (optional).</li>\n<li>line_color: Color for all lines in the figure (optional).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fig</span>,</span><span class=\"param\">\t<span class=\"n\">scale_x</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_y</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_lim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_lim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_label_rotation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_axes</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">bg_color</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text_color</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">line_color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.save_figure_as_format", "modulename": "spacr.gui_elements", "qualname": "save_figure_as_format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">file_format</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.modify_figure", "modulename": "spacr.gui_elements", "qualname": "modify_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_elements.generate_dna_matrix", "modulename": "spacr.gui_elements", "qualname": "generate_dna_matrix", "kind": "function", "doc": "<p>Generate a DNA matrix animation and save it as GIF, MP4, or AVI using OpenCV for videos.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;dna_matrix.gif&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">canvas_width</span><span class=\"o\">=</span><span class=\"mi\">1500</span>,</span><span class=\"param\">\t<span class=\"n\">canvas_height</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">fps</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">base_size</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">transition_frames</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">font_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;arial.ttf&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">enhance</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lowercase_prob</span><span class=\"o\">=</span><span class=\"mf\">0.3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils", "modulename": "spacr.gui_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_utils.initialize_cuda", "modulename": "spacr.gui_utils", "qualname": "initialize_cuda", "kind": "function", "doc": "<p>Initializes CUDA in the main process by performing a simple GPU operation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.set_high_priority", "modulename": "spacr.gui_utils", "qualname": "set_high_priority", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">process</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.set_cpu_affinity", "modulename": "spacr.gui_utils", "qualname": "set_cpu_affinity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">process</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.proceed_with_app", "modulename": "spacr.gui_utils", "qualname": "proceed_with_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">app_name</span>, </span><span class=\"param\"><span class=\"n\">app_func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.load_app", "modulename": "spacr.gui_utils", "qualname": "load_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">app_name</span>, </span><span class=\"param\"><span class=\"n\">app_func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.parse_list", "modulename": "spacr.gui_utils", "qualname": "parse_list", "kind": "function", "doc": "<p>Parses a string representation of a list and returns the parsed list.</p>\n\n<p>Args:\n    value (str): The string representation of the list.</p>\n\n<p>Returns:\n    list: The parsed list, which can contain integers, floats, or strings.</p>\n\n<p>Raises:\n    ValueError: If the input value is not a valid list format or contains mixed types or unsupported types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.create_input_field", "modulename": "spacr.gui_utils", "qualname": "create_input_field", "kind": "function", "doc": "<p>Create an input field in the specified frame.</p>\n\n<p>Args:\n    frame (tk.Frame): The frame in which the input field will be created.\n    label_text (str): The text to be displayed as the label for the input field.\n    row (int): The row in which the input field will be placed.\n    var_type (str, optional): The type of input field to create. Defaults to 'entry'.\n    options (list, optional): The list of options for a combo box input field. Defaults to None.\n    default_value (str, optional): The default value for the input field. Defaults to None.</p>\n\n<p>Returns:\n    tuple: A tuple containing the label, input widget, variable, and custom frame.</p>\n\n<p>Raises:\n    Exception: If an error occurs while creating the input field.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">frame</span>,</span><span class=\"param\">\t<span class=\"n\">label_text</span>,</span><span class=\"param\">\t<span class=\"n\">row</span>,</span><span class=\"param\">\t<span class=\"n\">var_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;entry&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.process_stdout_stderr", "modulename": "spacr.gui_utils", "qualname": "process_stdout_stderr", "kind": "function", "doc": "<p>Redirect stdout and stderr to the queue q.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.WriteToQueue", "modulename": "spacr.gui_utils", "qualname": "WriteToQueue", "kind": "class", "doc": "<p>A custom file-like class that writes any output to a given queue.\nThis can be used to redirect stdout and stderr.</p>\n", "bases": "io.TextIOBase"}, {"fullname": "spacr.gui_utils.WriteToQueue.__init__", "modulename": "spacr.gui_utils", "qualname": "WriteToQueue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span></span>)</span>"}, {"fullname": "spacr.gui_utils.WriteToQueue.q", "modulename": "spacr.gui_utils", "qualname": "WriteToQueue.q", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.gui_utils.WriteToQueue.write", "modulename": "spacr.gui_utils", "qualname": "WriteToQueue.write", "kind": "function", "doc": "<p>Write string to stream.\nReturns the number of characters written (which is always equal to\nthe length of the string).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.WriteToQueue.flush", "modulename": "spacr.gui_utils", "qualname": "WriteToQueue.flush", "kind": "function", "doc": "<p>Flush write buffers, if applicable.</p>\n\n<p>This is not implemented for read-only and non-blocking streams.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.cancel_after_tasks", "modulename": "spacr.gui_utils", "qualname": "cancel_after_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.annotate", "modulename": "spacr.gui_utils", "qualname": "annotate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.generate_annotate_fields", "modulename": "spacr.gui_utils", "qualname": "generate_annotate_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.run_annotate_app", "modulename": "spacr.gui_utils", "qualname": "run_annotate_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vars_dict</span>, </span><span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.global_image_refs", "modulename": "spacr.gui_utils", "qualname": "global_image_refs", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "spacr.gui_utils.annotate_app", "modulename": "spacr.gui_utils", "qualname": "annotate_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_frame</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.load_next_app", "modulename": "spacr.gui_utils", "qualname": "load_next_app", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.annotate_with_image_refs", "modulename": "spacr.gui_utils", "qualname": "annotate_with_image_refs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">root</span>, </span><span class=\"param\"><span class=\"n\">shutdown_callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.convert_settings_dict_for_gui", "modulename": "spacr.gui_utils", "qualname": "convert_settings_dict_for_gui", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.spacrFigShow", "modulename": "spacr.gui_utils", "qualname": "spacrFigShow", "kind": "function", "doc": "<p>Replacement for plt.show() that queues figures instead of displaying them.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig_queue</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.function_gui_wrapper", "modulename": "spacr.gui_utils", "qualname": "function_gui_wrapper", "kind": "function", "doc": "<p>Wraps the run_multiple_simulations function to integrate with GUI processes.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>settings: dict, The settings for the run_multiple_simulations function.</li>\n<li>q: multiprocessing.Queue, Queue for logging messages to the GUI.</li>\n<li>fig_queue: multiprocessing.Queue, Queue for sending figures to the GUI.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fig_queue</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">imports</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.run_function_gui", "modulename": "spacr.gui_utils", "qualname": "run_function_gui", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings_type</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">fig_queue</span>, </span><span class=\"param\"><span class=\"n\">stop_requested</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.hide_all_settings", "modulename": "spacr.gui_utils", "qualname": "hide_all_settings", "kind": "function", "doc": "<p>Function to initially hide all settings in the GUI.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>categories: dict, The categories of settings with their corresponding settings.</li>\n<li>vars_dict: dict, The dictionary containing the settings and their corresponding widgets.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vars_dict</span>, </span><span class=\"param\"><span class=\"n\">categories</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.setup_frame", "modulename": "spacr.gui_utils", "qualname": "setup_frame", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.download_hug_dataset", "modulename": "spacr.gui_utils", "qualname": "download_hug_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">vars_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.download_dataset", "modulename": "spacr.gui_utils", "qualname": "download_dataset", "kind": "function", "doc": "<p>Downloads a dataset or settings files from Hugging Face and returns the local path.</p>\n\n<p>Args:\n    repo_id (str): The repository ID (e.g., 'einarolafsson/toxo_mito' or 'einarolafsson/spacr_settings').\n    subfolder (str): The subfolder path within the repository (e.g., 'plate1' or the settings subfolder).\n    local_dir (str): The local directory where the files will be saved. Defaults to the user's home directory.\n    retries (int): Number of retry attempts in case of failure.\n    delay (int): Delay in seconds between retries.</p>\n\n<p>Returns:\n    str: The local path to the downloaded files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">q</span>, </span><span class=\"param\"><span class=\"n\">repo_id</span>, </span><span class=\"param\"><span class=\"n\">subfolder</span>, </span><span class=\"param\"><span class=\"n\">local_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">retries</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.ensure_after_tasks", "modulename": "spacr.gui_utils", "qualname": "ensure_after_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.display_gif_in_plot_frame", "modulename": "spacr.gui_utils", "qualname": "display_gif_in_plot_frame", "kind": "function", "doc": "<p>Display and zoom a GIF to fill the entire parent_frame, maintaining aspect ratio, with lazy resizing and caching.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gif_path</span>, </span><span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.display_media_in_plot_frame", "modulename": "spacr.gui_utils", "qualname": "display_media_in_plot_frame", "kind": "function", "doc": "<p>Display an MP4, AVI, or GIF and play it on repeat in the parent_frame, fully filling the frame while maintaining aspect ratio.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">media_path</span>, </span><span class=\"param\"><span class=\"n\">parent_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.print_widget_structure", "modulename": "spacr.gui_utils", "qualname": "print_widget_structure", "kind": "function", "doc": "<p>Recursively print the widget structure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.get_screen_dimensions", "modulename": "spacr.gui_utils", "qualname": "get_screen_dimensions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.gui_utils.convert_to_number", "modulename": "spacr.gui_utils", "qualname": "convert_to_number", "kind": "function", "doc": "<p>Converts a string value to an integer if possible, otherwise converts to a float.</p>\n\n<p>Args:\n    value (str): The string representation of the number.</p>\n\n<p>Returns:\n    int or float: The converted number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io", "modulename": "spacr.io", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.io.process_non_tif_non_2D_images", "modulename": "spacr.io", "qualname": "process_non_tif_non_2D_images", "kind": "function", "doc": "<p>Processes all images in the folder and splits them into grayscale channels, preserving bit depth.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.CombineLoaders", "modulename": "spacr.io", "qualname": "CombineLoaders", "kind": "class", "doc": "<p>A class that combines multiple data loaders into a single iterator.</p>\n\n<p>Args:\n    train_loaders (list): A list of data loaders.</p>\n\n<p>Attributes:\n    train_loaders (list): A list of data loaders.\n    loader_iters (list): A list of iterator objects for each data loader.</p>\n\n<p>Methods:\n    __iter__(): Returns the iterator object itself.\n    __next__(): Returns the next batch from one of the data loaders.</p>\n\n<p>Raises:\n    StopIteration: If all data loaders have been exhausted.</p>\n"}, {"fullname": "spacr.io.CombineLoaders.__init__", "modulename": "spacr.io", "qualname": "CombineLoaders.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_loaders</span></span>)</span>"}, {"fullname": "spacr.io.CombineLoaders.train_loaders", "modulename": "spacr.io", "qualname": "CombineLoaders.train_loaders", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.CombineLoaders.loader_iters", "modulename": "spacr.io", "qualname": "CombineLoaders.loader_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.CombinedDataset", "modulename": "spacr.io", "qualname": "CombinedDataset", "kind": "class", "doc": "<p>A dataset that combines multiple datasets into one.</p>\n\n<p>Args:\n    datasets (list): A list of datasets to be combined.\n    shuffle (bool, optional): Whether to shuffle the combined dataset. Defaults to True.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.io.CombinedDataset.__init__", "modulename": "spacr.io", "qualname": "CombinedDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datasets</span>, </span><span class=\"param\"><span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "spacr.io.CombinedDataset.datasets", "modulename": "spacr.io", "qualname": "CombinedDataset.datasets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.CombinedDataset.lengths", "modulename": "spacr.io", "qualname": "CombinedDataset.lengths", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.CombinedDataset.total_length", "modulename": "spacr.io", "qualname": "CombinedDataset.total_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.CombinedDataset.shuffle", "modulename": "spacr.io", "qualname": "CombinedDataset.shuffle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset", "modulename": "spacr.io", "qualname": "NoClassDataset", "kind": "class", "doc": "<p>An abstract class representing a <code>Dataset</code>.</p>\n\n<p>All datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite <code>__getitem__()</code>, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n<code>__len__()</code>, which is expected to return the size of the dataset by many\n<code>~torch.utils.data.Sampler</code> implementations and the default options\nof <code>~torch.utils.data.DataLoader</code>. Subclasses could also\noptionally implement <code>__getitems__()</code>, for speedup batched samples\nloading. This method accepts list of indices of samples of batch and returns\nlist of samples.</p>\n\n<div class=\"alert note\">\n\n<p>sampler that yields integral indices.  To make it work with a map-style\ndataset with non-integral indices/keys, a custom sampler must be provided.</p>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.io.NoClassDataset.__init__", "modulename": "spacr.io", "qualname": "NoClassDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_dir</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">load_to_memory</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "spacr.io.NoClassDataset.data_dir", "modulename": "spacr.io", "qualname": "NoClassDataset.data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset.transform", "modulename": "spacr.io", "qualname": "NoClassDataset.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset.shuffle", "modulename": "spacr.io", "qualname": "NoClassDataset.shuffle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset.load_to_memory", "modulename": "spacr.io", "qualname": "NoClassDataset.load_to_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset.filenames", "modulename": "spacr.io", "qualname": "NoClassDataset.filenames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.NoClassDataset.load_image", "modulename": "spacr.io", "qualname": "NoClassDataset.load_image", "kind": "function", "doc": "<p>Load an image from the given file path.</p>\n\n<p>Args:\n    img_path (str): The file path of the image.</p>\n\n<p>Returns:\n    PIL.Image: The loaded image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.NoClassDataset.shuffle_dataset", "modulename": "spacr.io", "qualname": "NoClassDataset.shuffle_dataset", "kind": "function", "doc": "<p>Shuffle the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.spacrDataset", "modulename": "spacr.io", "qualname": "spacrDataset", "kind": "class", "doc": "<p>An abstract class representing a <code>Dataset</code>.</p>\n\n<p>All datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite <code>__getitem__()</code>, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n<code>__len__()</code>, which is expected to return the size of the dataset by many\n<code>~torch.utils.data.Sampler</code> implementations and the default options\nof <code>~torch.utils.data.DataLoader</code>. Subclasses could also\noptionally implement <code>__getitems__()</code>, for speedup batched samples\nloading. This method accepts list of indices of samples of batch and returns\nlist of samples.</p>\n\n<div class=\"alert note\">\n\n<p>sampler that yields integral indices.  To make it work with a map-style\ndataset with non-integral indices/keys, a custom sampler must be provided.</p>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.io.spacrDataset.__init__", "modulename": "spacr.io", "qualname": "spacrDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_dir</span>,</span><span class=\"param\">\t<span class=\"n\">loader_classes</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">pin_memory</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">specific_files</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">specific_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "spacr.io.spacrDataset.data_dir", "modulename": "spacr.io", "qualname": "spacrDataset.data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.classes", "modulename": "spacr.io", "qualname": "spacrDataset.classes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.transform", "modulename": "spacr.io", "qualname": "spacrDataset.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.shuffle", "modulename": "spacr.io", "qualname": "spacrDataset.shuffle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.pin_memory", "modulename": "spacr.io", "qualname": "spacrDataset.pin_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.filenames", "modulename": "spacr.io", "qualname": "spacrDataset.filenames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.labels", "modulename": "spacr.io", "qualname": "spacrDataset.labels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataset.load_image", "modulename": "spacr.io", "qualname": "spacrDataset.load_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.spacrDataset.shuffle_dataset", "modulename": "spacr.io", "qualname": "spacrDataset.shuffle_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.spacrDataset.get_plate", "modulename": "spacr.io", "qualname": "spacrDataset.get_plate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.spacrDataLoader", "modulename": "spacr.io", "qualname": "spacrDataLoader", "kind": "class", "doc": "<p>Data loader combines a dataset and a sampler, and provides an iterable over the given dataset.</p>\n\n<p>The <code>~torch.utils.data.DataLoader</code> supports both map-style and\niterable-style datasets with single- or multi-process loading, customizing\nloading order and optional automatic batching (collation) and memory pinning.</p>\n\n<p>See <code>torch.utils.data</code> documentation page for more details.</p>\n\n<p>Args:\n    dataset (Dataset): dataset from which to load the data.\n    batch_size (int, optional): how many samples per batch to load\n        (default: <code>1</code>).\n    shuffle (bool, optional): set to <code>True</code> to have the data reshuffled\n        at every epoch (default: <code>False</code>).\n    sampler (Sampler or Iterable, optional): defines the strategy to draw\n        samples from the dataset. Can be any <code>Iterable</code> with <code>__len__</code>\n        implemented. If specified, <code>shuffle</code> must not be specified.\n    batch_sampler (Sampler or Iterable, optional): like <code>sampler</code>, but\n        returns a batch of indices at a time. Mutually exclusive with\n        <code>batch_size</code>, <code>shuffle</code>, <code>sampler</code>,\n        and <code>drop_last</code>.\n    num_workers (int, optional): how many subprocesses to use for data\n        loading. <code>0</code> means that the data will be loaded in the main process.\n        (default: <code>0</code>)\n    collate_fn (Callable, optional): merges a list of samples to form a\n        mini-batch of Tensor(s).  Used when using batched loading from a\n        map-style dataset.\n    pin_memory (bool, optional): If <code>True</code>, the data loader will copy Tensors\n        into device/CUDA pinned memory before returning them.  If your data elements\n        are a custom type, or your <code>collate_fn</code> returns a batch that is a custom type,\n        see the example below.\n    drop_last (bool, optional): set to <code>True</code> to drop the last incomplete batch,\n        if the dataset size is not divisible by the batch size. If <code>False</code> and\n        the size of dataset is not divisible by the batch size, then the last batch\n        will be smaller. (default: <code>False</code>)\n    timeout (numeric, optional): if positive, the timeout value for collecting a batch\n        from workers. Should always be non-negative. (default: <code>0</code>)\n    worker_init_fn (Callable, optional): If not <code>None</code>, this will be called on each\n        worker subprocess with the worker id (an int in <code>[0, num_workers - 1]</code>) as\n        input, after seeding and before data loading. (default: <code>None</code>)\n    multiprocessing_context (str or multiprocessing.context.BaseContext, optional): If\n        <code>None</code>, the default <a href=\"https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods\">multiprocessing context</a> of your operating system will\n        be used. (default: <code>None</code>)\n    generator (torch.Generator, optional): If not <code>None</code>, this RNG will be used\n        by RandomSampler to generate random indexes and multiprocessing to generate\n        <code>base_seed</code> for workers. (default: <code>None</code>)\n    prefetch_factor (int, optional, keyword-only arg): Number of batches loaded\n        in advance by each worker. <code>2</code> means there will be a total of\n        2 * num_workers batches prefetched across all workers. (default value depends\n        on the set value for num_workers. If value of num_workers=0 default is <code>None</code>.\n        Otherwise, if value of <code>num_workers &gt; 0</code> default is <code>2</code>).\n    persistent_workers (bool, optional): If <code>True</code>, the data loader will not shut down\n        the worker processes after a dataset has been consumed once. This allows to\n        maintain the workers <code>Dataset</code> instances alive. (default: <code>False</code>)\n    pin_memory_device (str, optional): the device to <code>pin_memory</code> to if <code>pin_memory</code> is\n        <code>True</code>.</p>\n\n<div class=\"alert warning\">\n\n<h6 id=\"if-the-spawn-start-method-is-used-worker_init_fn\">If the <code>spawn</code> start method is used, <code>worker_init_fn</code></h6>\n\n<p>cannot be an unpicklable object, e.g., a lambda function. See\n:ref:<code>multiprocessing-best-practices</code> on more details related\nto multiprocessing in PyTorch.</p>\n\n</div>\n\n<div class=\"alert warning\">\n\n<h6 id=\"lendataloader-heuristic-is-based-on-the-length-of-the-sampler-used\"><code>len(dataloader)</code> heuristic is based on the length of the sampler used.</h6>\n\n<p>When <code>dataset</code> is an <code>~torch.utils.data.IterableDataset</code>,\nit instead returns an estimate based on <code>len(dataset) / batch_size</code>, with proper\nrounding depending on <code>drop_last</code>, regardless of multi-process loading\nconfigurations. This represents the best guess PyTorch can make because PyTorch\ntrusts user <code>dataset</code> code in correctly handling multi-process\nloading to avoid duplicate data.</p>\n\n<p>However, if sharding results in multiple workers having incomplete last batches,\nthis estimate can still be inaccurate, because (1) an otherwise complete batch can\nbe broken into multiple ones and (2) more than one batch worth of samples can be\ndropped when <code>drop_last</code> is set. Unfortunately, PyTorch can not detect such\ncases in general.</p>\n\n<p>See <code>Dataset Types</code>_ for more details on these two types of datasets and how\n<code>~torch.utils.data.IterableDataset</code> interacts with\n<code>Multi-process data loading</code>_.</p>\n\n</div>\n\n<div class=\"alert warning\">\n\n<h6 id=\"see-refreproducibility-and-refdataloader-workers-random-seed-and\">See :ref:<code>reproducibility</code>, and :ref:<code>dataloader-workers-random-seed</code>, and</h6>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.io.spacrDataLoader.__init__", "modulename": "spacr.io", "qualname": "spacrDataLoader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">preload_batches</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "spacr.io.spacrDataLoader.preload_batches", "modulename": "spacr.io", "qualname": "spacrDataLoader.preload_batches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataLoader.batch_queue", "modulename": "spacr.io", "qualname": "spacrDataLoader.batch_queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataLoader.process", "modulename": "spacr.io", "qualname": "spacrDataLoader.process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataLoader.current_batch_index", "modulename": "spacr.io", "qualname": "spacrDataLoader.current_batch_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.spacrDataLoader.pin_memory", "modulename": "spacr.io", "qualname": "spacrDataLoader.pin_memory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "spacr.io.spacrDataLoader.cleanup", "modulename": "spacr.io", "qualname": "spacrDataLoader.cleanup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.TarImageDataset", "modulename": "spacr.io", "qualname": "TarImageDataset", "kind": "class", "doc": "<p>An abstract class representing a <code>Dataset</code>.</p>\n\n<p>All datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite <code>__getitem__()</code>, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n<code>__len__()</code>, which is expected to return the size of the dataset by many\n<code>~torch.utils.data.Sampler</code> implementations and the default options\nof <code>~torch.utils.data.DataLoader</code>. Subclasses could also\noptionally implement <code>__getitems__()</code>, for speedup batched samples\nloading. This method accepts list of indices of samples of batch and returns\nlist of samples.</p>\n\n<div class=\"alert note\">\n\n<p>sampler that yields integral indices.  To make it work with a map-style\ndataset with non-integral indices/keys, a custom sampler must be provided.</p>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.io.TarImageDataset.__init__", "modulename": "spacr.io", "qualname": "TarImageDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tar_path</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "spacr.io.TarImageDataset.tar_path", "modulename": "spacr.io", "qualname": "TarImageDataset.tar_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.TarImageDataset.transform", "modulename": "spacr.io", "qualname": "TarImageDataset.transform", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.io.load_images_from_paths", "modulename": "spacr.io", "qualname": "load_images_from_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images_by_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.concatenate_and_normalize", "modulename": "spacr.io", "qualname": "concatenate_and_normalize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">channels</span>, </span><span class=\"param\">save_dtype=&lt;class &#x27;numpy.float32&#x27;&gt;, </span><span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.delete_empty_subdirectories", "modulename": "spacr.io", "qualname": "delete_empty_subdirectories", "kind": "function", "doc": "<p>Deletes all empty subdirectories in the specified folder.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>folder_path (str): The path to the folder in which to look for empty subdirectories.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.preprocess_img_data", "modulename": "spacr.io", "qualname": "preprocess_img_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.read_plot_model_stats", "modulename": "spacr.io", "qualname": "read_plot_model_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_file_path</span>, </span><span class=\"param\"><span class=\"n\">val_file_path</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.convert_numpy_to_tiff", "modulename": "spacr.io", "qualname": "convert_numpy_to_tiff", "kind": "function", "doc": "<p>Converts all numpy files in a folder to TIFF format and saves them in a subdirectory 'tiff'.</p>\n\n<p>Args:\nfolder_path (str): The path to the folder containing numpy files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.generate_cellpose_train_test", "modulename": "spacr.io", "qualname": "generate_cellpose_train_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">test_split</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.parse_gz_files", "modulename": "spacr.io", "qualname": "parse_gz_files", "kind": "function", "doc": "<p>Parses the .fastq.gz files in the specified folder path and returns a dictionary\ncontaining the sample names and their corresponding file paths.</p>\n\n<p>Args:\n    folder_path (str): The path to the folder containing the .fastq.gz files.</p>\n\n<p>Returns:\n    dict: A dictionary where the keys are the sample names and the values are\n    dictionaries containing the file paths for the 'R1' and 'R2' read directions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.generate_dataset", "modulename": "spacr.io", "qualname": "generate_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.generate_loaders", "modulename": "spacr.io", "qualname": "generate_loaders", "kind": "function", "doc": "<p>Generate data loaders for training and validation/test datasets.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>src (str): The source directory containing the data.</li>\n<li>mode (str): The mode of operation. Options are 'train' or 'test'.</li>\n<li>image_size (int): The size of the input images.</li>\n<li>batch_size (int): The batch size for the data loaders.</li>\n<li>classes (list): The list of classes to consider.</li>\n<li>n_jobs (int): The number of worker threads for data loading.</li>\n<li>validation_split (float): The fraction of data to use for validation.</li>\n<li>pin_memory (bool): Whether to pin memory for faster data transfer.</li>\n<li>normalize (bool): Whether to normalize the input images.</li>\n<li>verbose (bool): Whether to print additional information and show images.</li>\n<li>channels (list): The list of channels to retain. Options are [1, 2, 3] for all channels, [1, 2] for blue and green, etc.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>train_loaders (list): List of data loaders for training datasets.</li>\n<li>val_loaders (list): List of data loaders for validation datasets.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;train&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span>,</span><span class=\"param\">\t<span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;nc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pc&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validation_split</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">pin_memory</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">augment</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.generate_training_dataset", "modulename": "spacr.io", "qualname": "generate_training_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.training_dataset_from_annotation", "modulename": "spacr.io", "qualname": "training_dataset_from_annotation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span>, </span><span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">annotation_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;test&#39;</span>, </span><span class=\"param\"><span class=\"n\">annotated_classes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.training_dataset_from_annotation_metadata", "modulename": "spacr.io", "qualname": "training_dataset_from_annotation_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_path</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span>,</span><span class=\"param\">\t<span class=\"n\">annotation_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;test&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">annotated_classes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_type_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;columnID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">class_metadata</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;c1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c2&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.generate_dataset_from_lists", "modulename": "spacr.io", "qualname": "generate_dataset_from_lists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">class_data</span>, </span><span class=\"param\"><span class=\"n\">classes</span>, </span><span class=\"param\"><span class=\"n\">test_split</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.convert_separate_files_to_yokogawa", "modulename": "spacr.io", "qualname": "convert_separate_files_to_yokogawa", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">regex</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.convert_to_yokogawa", "modulename": "spacr.io", "qualname": "convert_to_yokogawa", "kind": "function", "doc": "<p>Detects file type in the folder and converts them\nto Yokogawa-style naming with Maximum Intensity Projection (MIP).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.apply_augmentation", "modulename": "spacr.io", "qualname": "apply_augmentation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.process_instruction", "modulename": "spacr.io", "qualname": "process_instruction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">entry</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.io.prepare_cellpose_dataset", "modulename": "spacr.io", "qualname": "prepare_cellpose_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_root</span>, </span><span class=\"param\"><span class=\"n\">augment_data</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">train_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>, </span><span class=\"param\"><span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.logger", "modulename": "spacr.logger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.logger.configure_logger", "modulename": "spacr.logger", "qualname": "configure_logger", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log_file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;spacr.log&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.logger.logger", "modulename": "spacr.logger", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger spacr.logger (INFO)&gt;"}, {"fullname": "spacr.logger.log_function_call", "modulename": "spacr.logger", "qualname": "log_function_call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure", "modulename": "spacr.measure", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.measure.get_components", "modulename": "spacr.measure", "qualname": "get_components", "kind": "function", "doc": "<p>Get the components (nucleus and pathogens) for each cell in the given masks.</p>\n\n<p>Args:\n    cell_mask (ndarray): Binary mask of cell labels.\n    nucleus_mask (ndarray): Binary mask of nucleus labels.\n    pathogen_mask (ndarray): Binary mask of pathogen labels.</p>\n\n<p>Returns:\n    tuple: A tuple containing two dataframes - nucleus_df and pathogen_df.\n        nucleus_df (DataFrame): Dataframe with columns 'cell_id' and 'nucleus',\n            representing the mapping of each cell to its nucleus.\n        pathogen_df (DataFrame): Dataframe with columns 'cell_id' and 'pathogen',\n            representing the mapping of each cell to its pathogens.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_mask</span>, </span><span class=\"param\"><span class=\"n\">nucleus_mask</span>, </span><span class=\"param\"><span class=\"n\">pathogen_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.save_and_add_image_to_grid", "modulename": "spacr.measure", "qualname": "save_and_add_image_to_grid", "kind": "function", "doc": "<p>Add an image to a grid and save it as PNG.</p>\n\n<p>Args:\n    png_channels (ndarray): The array representing the image channels.\n    img_path (str): The path to save the image as PNG.\n    grid (list): The grid of images to be plotted later.</p>\n\n<p>Returns:\n    grid (list): Updated grid with the new image added.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">png_channels</span>, </span><span class=\"param\"><span class=\"n\">img_path</span>, </span><span class=\"param\"><span class=\"n\">grid</span>, </span><span class=\"param\"><span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.img_list_to_grid", "modulename": "spacr.measure", "qualname": "img_list_to_grid", "kind": "function", "doc": "<p>Plot a grid of images with optional titles.</p>\n\n<p>Args:\n    grid (list): List of images to be plotted.\n    titles (list): List of titles for the images.</p>\n\n<p>Returns:\n    fig (Figure): The matplotlib figure object containing the image grid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span>, </span><span class=\"param\"><span class=\"n\">titles</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.measure_crop", "modulename": "spacr.measure", "qualname": "measure_crop", "kind": "function", "doc": "<p>Measure the crop of an image based on the provided settings.</p>\n\n<p>Args:\n    settings (dict): The settings for measuring the crop.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.process_meassure_crop_results", "modulename": "spacr.measure", "qualname": "process_meassure_crop_results", "kind": "function", "doc": "<p>Process the results, display, and optionally save the figures.</p>\n\n<p>Args:\n    partial_results (list): List of partial results.\n    settings (dict): Settings dictionary.\n    save_figures (bool): Flag to save figures or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">partial_results</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.generate_cellpose_train_set", "modulename": "spacr.measure", "qualname": "generate_cellpose_train_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folders</span>, </span><span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">min_objects</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.measure.get_object_counts", "modulename": "spacr.measure", "qualname": "get_object_counts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar", "modulename": "spacr.mediar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.mediar_path", "modulename": "spacr.mediar", "qualname": "mediar_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/carruthers/anaconda3/envs/spacr/lib/python3.9/site-packages/spacr/resources/MEDIAR&#x27;"}, {"fullname": "spacr.mediar.init_file", "modulename": "spacr.mediar", "qualname": "init_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/home/carruthers/anaconda3/envs/spacr/lib/python3.9/site-packages/spacr/resources/MEDIAR/__init__.py&#x27;"}, {"fullname": "spacr.mediar.display_imgs_in_list", "modulename": "spacr.mediar", "qualname": "display_imgs_in_list", "kind": "function", "doc": "<p>Displays images from multiple lists side by side. \nEach row will display one image from each list (lists_of_imgs[i][j] is the j-th image in the i-th list).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lists_of_imgs</strong>:  A list of lists, where each inner list contains images.</li>\n<li><strong>cmaps</strong>:  List of colormaps to use for each list (optional). If not provided, defaults to 'gray' for all lists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lists_of_imgs</span>, </span><span class=\"param\"><span class=\"n\">cmaps</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.get_weights", "modulename": "spacr.mediar", "qualname": "get_weights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">finetuned_weights</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.normalize_image", "modulename": "spacr.mediar", "qualname": "normalize_image", "kind": "function", "doc": "<p>Normalize an image based on the 0.0 and 99.5 percentiles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image</strong>:  Input image (numpy array).</li>\n<li><strong>lower_percentile</strong>:  Lower percentile (default is 0.0).</li>\n<li><strong>upper_percentile</strong>:  Upper percentile (default is 99.5).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Normalized image (numpy array).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">lower_percentile</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">upper_percentile</span><span class=\"o\">=</span><span class=\"mf\">99.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.MEDIARPredictor", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.__init__", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;ensemble&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">roi_size</span><span class=\"o\">=</span><span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">overlap</span><span class=\"o\">=</span><span class=\"mf\">0.6</span>,</span><span class=\"param\">\t<span class=\"n\">finetuned_weights</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">use_tta</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">quantiles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">99.5</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "spacr.mediar.MEDIARPredictor.device", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.test", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.test", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.model", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.normalize", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.normalize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.quantiles", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.quantiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.model1", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.model1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.model2", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.model2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.mediar.MEDIARPredictor.load_model", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.load_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_path</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.MEDIARPredictor.display_image_and_mask", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.display_image_and_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.MEDIARPredictor.predict_batch", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.predict_batch", "kind": "function", "doc": "<p>Predict masks for a batch of images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>imgs</strong>:  List of input images as NumPy arrays (each in (H, W, C) format).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of predicted masks as NumPy arrays.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imgs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.MEDIARPredictor.run_test", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.run_test", "kind": "function", "doc": "<p>Run the model on test images if the test flag is True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.mediar.MEDIARPredictor.preprocess_image", "modulename": "spacr.mediar", "qualname": "MEDIARPredictor.preprocess_image", "kind": "function", "doc": "<p>Preprocess input image (numpy array) for compatibility with the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml", "modulename": "spacr.ml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.ml.QuasiBinomial", "modulename": "spacr.ml", "qualname": "QuasiBinomial", "kind": "class", "doc": "<p>Custom Quasi-Binomial family with adjustable variance.</p>\n", "bases": "statsmodels.genmod.families.family.Binomial"}, {"fullname": "spacr.ml.QuasiBinomial.__init__", "modulename": "spacr.ml", "qualname": "QuasiBinomial.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">link</span><span class=\"o\">=&lt;</span><span class=\"n\">statsmodels</span><span class=\"o\">.</span><span class=\"n\">genmod</span><span class=\"o\">.</span><span class=\"n\">families</span><span class=\"o\">.</span><span class=\"n\">links</span><span class=\"o\">.</span><span class=\"n\">logit</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">dispersion</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span>)</span>"}, {"fullname": "spacr.ml.QuasiBinomial.dispersion", "modulename": "spacr.ml", "qualname": "QuasiBinomial.dispersion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.ml.QuasiBinomial.variance", "modulename": "spacr.ml", "qualname": "QuasiBinomial.variance", "kind": "function", "doc": "<p>Adjust the variance with the dispersion parameter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mu</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.calculate_p_values", "modulename": "spacr.ml", "qualname": "calculate_p_values", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.perform_mixed_model", "modulename": "spacr.ml", "qualname": "perform_mixed_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">groups</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.create_volcano_filename", "modulename": "spacr.ml", "qualname": "create_volcano_filename", "kind": "function", "doc": "<p>Create and return the volcano plot filename based on regression type and alpha.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_path</span>, </span><span class=\"param\"><span class=\"n\">regression_type</span>, </span><span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">dst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.scale_variables", "modulename": "spacr.ml", "qualname": "scale_variables", "kind": "function", "doc": "<p>Scale independent (X) and dependent (y) variables using MinMaxScaler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.process_model_coefficients", "modulename": "spacr.ml", "qualname": "process_model_coefficients", "kind": "function", "doc": "<p>Return DataFrame of model coefficients, standard errors, and p-values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">regression_type</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">controls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.check_distribution", "modulename": "spacr.ml", "qualname": "check_distribution", "kind": "function", "doc": "<p>Check the distribution of y and recommend an appropriate model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.select_glm_family", "modulename": "spacr.ml", "qualname": "select_glm_family", "kind": "function", "doc": "<p>Select the appropriate GLM family based on the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.prepare_formula", "modulename": "spacr.ml", "qualname": "prepare_formula", "kind": "function", "doc": "<p>Return the regression formula using random effects for plate, row, and column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dependent_variable</span>, </span><span class=\"param\"><span class=\"n\">random_row_column_effects</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.fit_mixed_model", "modulename": "spacr.ml", "qualname": "fit_mixed_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">formula</span>, </span><span class=\"param\"><span class=\"n\">dst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.check_and_clean_data", "modulename": "spacr.ml", "qualname": "check_and_clean_data", "kind": "function", "doc": "<p>Check for collinearity, missing values, or invalid types in relevant columns. Clean data accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">dependent_variable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.check_normality", "modulename": "spacr.ml", "qualname": "check_normality", "kind": "function", "doc": "<p>Check if the data is normally distributed using the Shapiro-Wilk test.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">variable_name</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.minimum_cell_simulation", "modulename": "spacr.ml", "qualname": "minimum_cell_simulation", "kind": "function", "doc": "<p>Plot the mean absolute difference with standard deviation as shaded area vs. sample size.\nDetect and mark the elbow point (inflection) with smoothing and tolerance control.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span>,</span><span class=\"param\">\t<span class=\"n\">num_repeats</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">smoothing</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">increment</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.pick_glm_family_and_link", "modulename": "spacr.ml", "qualname": "pick_glm_family_and_link", "kind": "function", "doc": "<p>Select the appropriate GLM family and link function based on data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.regression_model", "modulename": "spacr.ml", "qualname": "regression_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">regression_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;ols&#39;</span>, </span><span class=\"param\"><span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">cov_type</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.regression", "modulename": "spacr.ml", "qualname": "regression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">csv_path</span>,</span><span class=\"param\">\t<span class=\"n\">dependent_variable</span><span class=\"o\">=</span><span class=\"s1\">&#39;predictions&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">regression_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">random_row_column_effects</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nc</span><span class=\"o\">=</span><span class=\"s1\">&#39;233460&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pc</span><span class=\"o\">=</span><span class=\"s1\">&#39;220950&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">controls</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cov_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.save_summary_to_file", "modulename": "spacr.ml", "qualname": "save_summary_to_file", "kind": "function", "doc": "<p>Save the model's summary output to a CSV or text file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;summary.csv&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.perform_regression", "modulename": "spacr.ml", "qualname": "perform_regression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.process_reads", "modulename": "spacr.ml", "qualname": "process_reads", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">csv_path</span>,</span><span class=\"param\">\t<span class=\"n\">fraction_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">plate</span>,</span><span class=\"param\">\t<span class=\"n\">filter_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filter_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.apply_transformation", "modulename": "spacr.ml", "qualname": "apply_transformation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">transform</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.clean_controls", "modulename": "spacr.ml", "qualname": "clean_controls", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.process_scores", "modulename": "spacr.ml", "qualname": "process_scores", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">dependent_variable</span>,</span><span class=\"param\">\t<span class=\"n\">plate</span>,</span><span class=\"param\">\t<span class=\"n\">min_cell_count</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">agg_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">regression_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;ols&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.generate_ml_scores", "modulename": "spacr.ml", "qualname": "generate_ml_scores", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.ml_analysis", "modulename": "spacr.ml", "qualname": "ml_analysis", "kind": "function", "doc": "<p>Calculates permutation importance for numerical features in the dataframe,\ncomparing groups based on specified column values and uses the model to predict \nthe class for all other rows in the dataframe.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\nfeature_string (str): String to filter features that contain this substring.\nlocation_column (str): Column name to use for comparing groups.\npositive_control, negative_control (str): Values in location_column to create subsets for comparison.\nexclude (list or str, optional): Columns to exclude from features.\nn_repeats (int): Number of repeats for permutation importance.\ntop_features (int): Number of top features to plot based on permutation importance.\nn_estimators (int): Number of trees in the random forest, gradient boosting, or XGBoost model.\ntest_size (float): Proportion of the dataset to include in the test split.\nrandom_state (int): Random seed for reproducibility.\nmodel_type (str): Type of model to use ('random_forest', 'logistic_regression', 'gradient_boosting', 'xgboost').\nn_jobs (int): Number of jobs to run in parallel for applicable models.</p>\n\n<p>Returns:\npandas.DataFrame: The original dataframe with added prediction and data usage columns.\npandas.DataFrame: DataFrame containing the importances and standard deviations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">channel_of_interest</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">location_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;columnID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">positive_control</span><span class=\"o\">=</span><span class=\"s1\">&#39;c2&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">negative_control</span><span class=\"o\">=</span><span class=\"s1\">&#39;c1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_repeats</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">top_features</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">reg_alpha</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">reg_lambda</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">model_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;xgboost&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">remove_low_variance_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">remove_highly_correlated_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">prune_features</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cross_validation</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.shap_analysis", "modulename": "spacr.ml", "qualname": "shap_analysis", "kind": "function", "doc": "<p>Performs SHAP analysis on the given model and data.</p>\n\n<p>Args:\nmodel: The trained model.\nX_train (pandas.DataFrame): Training feature set.\nX_test (pandas.DataFrame): Testing feature set.\nReturns:\nfig: Matplotlib figure object containing the SHAP summary plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.find_optimal_threshold", "modulename": "spacr.ml", "qualname": "find_optimal_threshold", "kind": "function", "doc": "<p>Find the optimal threshold for binary classification based on the F1-score.</p>\n\n<p>Args:\ny_true (array-like): True binary labels.\ny_pred_proba (array-like): Predicted probabilities for the positive class.</p>\n\n<p>Returns:\nfloat: The optimal threshold.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred_proba</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.ml.interperate_vision_model", "modulename": "spacr.ml", "qualname": "interperate_vision_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.openai", "modulename": "spacr.openai", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.plot", "modulename": "spacr.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.plot_image_mask_overlay", "modulename": "spacr.plot", "qualname": "plot_image_mask_overlay", "kind": "function", "doc": "<p>Plot image and mask overlays.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span>,</span><span class=\"param\">\t<span class=\"n\">cell_channel</span>,</span><span class=\"param\">\t<span class=\"n\">nucleus_channel</span>,</span><span class=\"param\">\t<span class=\"n\">pathogen_channel</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">save_pdf</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;outlines&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">export_tiffs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">all_on_all</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">all_outlines</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_masks", "modulename": "spacr.plot", "qualname": "plot_masks", "kind": "function", "doc": "<p>Plot the masks and flows for a given batch of images.</p>\n\n<p>Args:\n    batch (numpy.ndarray): The batch of images.\n    masks (list or numpy.ndarray): The masks corresponding to the images.\n    flows (list or numpy.ndarray): The flows corresponding to the images.\n    cmap (str, optional): The colormap to use for displaying the images. Defaults to 'inferno'.\n    figuresize (int, optional): The size of the figure. Defaults to 20.\n    nr (int, optional): The maximum number of images to plot. Defaults to 1.\n    file_type (str, optional): The file type of the flows. Defaults to '.npz'.\n    print_object_number (bool, optional): Whether to print the object number on the mask. Defaults to True.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">batch</span>,</span><span class=\"param\">\t<span class=\"n\">masks</span>,</span><span class=\"param\">\t<span class=\"n\">flows</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;inferno&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">nr</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">file_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;.npz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">print_object_number</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.generate_mask_random_cmap", "modulename": "spacr.plot", "qualname": "generate_mask_random_cmap", "kind": "function", "doc": "<p>Generate a random colormap based on the unique labels in the given mask.</p>\n\n<p>Parameters:\nmask (numpy.ndarray): The input mask array.</p>\n\n<p>Returns:\nmatplotlib.colors.ListedColormap: The random colormap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.random_cmap", "modulename": "spacr.plot", "qualname": "random_cmap", "kind": "function", "doc": "<p>Generate a random colormap.</p>\n\n<p>Parameters:\nnum_objects (int): The number of objects to generate colors for. Default is 100.</p>\n\n<p>Returns:\nrandom_cmap (matplotlib.colors.ListedColormap): A random colormap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_objects</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_images_and_arrays", "modulename": "spacr.plot", "qualname": "plot_images_and_arrays", "kind": "function", "doc": "<p>Plot images and arrays from the given folders.</p>\n\n<p>Args:\n    folders (list): A list of folder paths containing the images and arrays.\n    lower_percentile (int, optional): The lower percentile for image normalization. Defaults to 1.\n    upper_percentile (int, optional): The upper percentile for image normalization. Defaults to 99.\n    threshold (int, optional): The threshold for determining whether to display an image as a mask or normalize it. Defaults to 1000.\n    extensions (list, optional): A list of file extensions to consider. Defaults to ['.npy', '.tif', '.tiff', '.png'].\n    overlay (bool, optional): If True, overlay the outlines of the objects on the image. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">folders</span>,</span><span class=\"param\">\t<span class=\"n\">lower_percentile</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">upper_percentile</span><span class=\"o\">=</span><span class=\"mi\">99</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.tif&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.tiff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.png&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">max_nr</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">randomize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_arrays", "modulename": "spacr.plot", "qualname": "plot_arrays", "kind": "function", "doc": "<p>Plot randomly selected arrays from a given directory.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>src (str): The directory path containing the arrays.</li>\n<li>figuresize (int): The size of the figure (default: 50).</li>\n<li>cmap (str): The colormap to use for displaying the arrays (default: 'inferno').</li>\n<li>nr (int): The number of arrays to plot (default: 1).</li>\n<li>normalize (bool): Whether to normalize the arrays (default: True).</li>\n<li>q1 (int): The lower percentile for normalization (default: 1).</li>\n<li>q2 (int): The upper percentile for normalization (default: 99).</li>\n</ul>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;inferno&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nr</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">q1</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">q2</span><span class=\"o\">=</span><span class=\"mi\">99</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_merged", "modulename": "spacr.plot", "qualname": "plot_merged", "kind": "function", "doc": "<p>Plot the merged images after applying various filters and modifications.</p>\n\n<p>Args:\n    src (path): Path to folder with images.\n    settings (dict): The settings for the plot.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.generate_plate_heatmap", "modulename": "spacr.plot", "qualname": "generate_plate_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">plate_number</span>, </span><span class=\"param\"><span class=\"n\">variable</span>, </span><span class=\"param\"><span class=\"n\">grouping</span>, </span><span class=\"param\"><span class=\"n\">min_max</span>, </span><span class=\"param\"><span class=\"n\">min_count</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_plates", "modulename": "spacr.plot", "qualname": "plot_plates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">grouping</span>,</span><span class=\"param\">\t<span class=\"n\">min_max</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span>,</span><span class=\"param\">\t<span class=\"n\">min_count</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.print_mask_and_flows", "modulename": "spacr.plot", "qualname": "print_mask_and_flows", "kind": "function", "doc": "<p>Display the original image, mask with outlines, and flow images.</p>\n\n<p>Args:\n    stack (np.array): Original image or stack.\n    mask (np.array): Mask image.\n    flows (list): List of flow images.\n    overlay (bool): Whether to overlay the mask outlines on the original image.\n    max_size (int): Maximum allowed size for any dimension of the images.\n    thickness (int): Thickness of the contour outlines.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stack</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">flows</span>, </span><span class=\"param\"><span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_resize_v1", "modulename": "spacr.plot", "qualname": "plot_resize_v1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">resized_images</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">resized_labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_resize", "modulename": "spacr.plot", "qualname": "plot_resize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">resized_images</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">resized_labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.normalize_and_visualize", "modulename": "spacr.plot", "qualname": "normalize_and_visualize", "kind": "function", "doc": "<p>Utility function for visualization</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">normalized_image</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.visualize_masks", "modulename": "spacr.plot", "qualname": "visualize_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask1</span>, </span><span class=\"param\"><span class=\"n\">mask2</span>, </span><span class=\"param\"><span class=\"n\">mask3</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Masks Comparison&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.visualize_cellpose_masks", "modulename": "spacr.plot", "qualname": "visualize_cellpose_masks", "kind": "function", "doc": "<p>Visualize multiple masks with optional titles.</p>\n\n<p>Parameters:\n    masks (list of np.ndarray): A list of masks to visualize.\n    titles (list of str, optional): A list of titles for the masks. If None, default titles will be used.\n    comparison_title (str): Title for the entire figure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">masks</span>, </span><span class=\"param\"><span class=\"n\">titles</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_comparison_results", "modulename": "spacr.plot", "qualname": "plot_comparison_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">comparison_results</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_object_outlines", "modulename": "spacr.plot", "qualname": "plot_object_outlines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">objects</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;nucleus&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cell&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pathogen&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">max_nr</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.volcano_plot", "modulename": "spacr.plot", "qualname": "volcano_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coef_df</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;volcano_plot.pdf&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_histogram", "modulename": "spacr.plot", "qualname": "plot_histogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_lorenz_curves", "modulename": "spacr.plot", "qualname": "plot_lorenz_curves", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">csv_files</span>,</span><span class=\"param\">\t<span class=\"n\">name_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;grna_name&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;count&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">remove_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_lim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">y_lim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_permutation", "modulename": "spacr.plot", "qualname": "plot_permutation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">permutation_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_feature_importance", "modulename": "spacr.plot", "qualname": "plot_feature_importance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">feature_importance_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.read_and_plot__vision_results", "modulename": "spacr.plot", "qualname": "read_and_plot__vision_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_dir</span>, </span><span class=\"param\"><span class=\"n\">y_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;accuracy&#39;</span>, </span><span class=\"param\"><span class=\"n\">name_split</span><span class=\"o\">=</span><span class=\"s1\">&#39;_time&#39;</span>, </span><span class=\"param\"><span class=\"n\">y_lim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.jitterplot_by_annotation", "modulename": "spacr.plot", "qualname": "jitterplot_by_annotation", "kind": "function", "doc": "<p>Reads a CSV file and creates a jitter plot of one column grouped by another column.</p>\n\n<p>Args:\nsrc (str): Path to the source data.\nx_column (str): Name of the column to be used for the x-axis.\ny_column (str): Name of the column to be used for the y-axis.\nplot_title (str): Title of the plot. Default is 'Jitter Plot'.\noutput_path (str): Path to save the plot image. If None, the plot will be displayed. Default is None.</p>\n\n<p>Returns:\npd.DataFrame: The filtered and balanced DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">x_column</span>,</span><span class=\"param\">\t<span class=\"n\">y_column</span>,</span><span class=\"param\">\t<span class=\"n\">plot_title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Jitter Plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filter_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filter_values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.create_grouped_plot", "modulename": "spacr.plot", "qualname": "create_grouped_plot", "kind": "function", "doc": "<p>Create a grouped plot, perform statistical tests, and optionally export the results along with the plot.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame containing the data.</li>\n<li>grouping_column: Column name for the categorical grouping.</li>\n<li>data_column: Column name for the data to be grouped and plotted.</li>\n<li>graph_type: Type of plot ('bar', 'violin', 'jitter', 'box', 'jitter_box').</li>\n<li>summary_func: Summary function to apply to each group ('mean', 'median', etc.).</li>\n<li>order: List specifying the order of the groups. If None, groups will be ordered alphabetically.</li>\n<li>colors: List of colors for each group.</li>\n<li>output_dir: Directory where the figure and test results will be saved if <code>save=True</code>.</li>\n<li>save: Boolean flag indicating whether to save the plot and results to files.</li>\n<li>y_lim: Optional y-axis min and max.</li>\n<li>error_bar_type: Type of error bars to plot, either 'std' for standard deviation or 'sem' for standard error of the mean.</li>\n</ul>\n\n<p>Outputs:</p>\n\n<ul>\n<li>Figure of the plot.</li>\n<li>DataFrame with full statistical test results, including normality tests.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">grouping_column</span>,</span><span class=\"param\">\t<span class=\"n\">data_column</span>,</span><span class=\"param\">\t<span class=\"n\">graph_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;bar&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">summary_func</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./output&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">y_lim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">error_bar_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;std&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph", "modulename": "spacr.plot", "qualname": "spacrGraph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.__init__", "modulename": "spacr.plot", "qualname": "spacrGraph.__init__", "kind": "function", "doc": "<p>Class for creating grouped plots with optional statistical tests and data preprocessing.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">grouping_column</span>,</span><span class=\"param\">\t<span class=\"n\">data_column</span>,</span><span class=\"param\">\t<span class=\"n\">graph_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;bar&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">summary_func</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./output&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">y_lim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_y</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">log_x</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">error_bar_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;std&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">remove_outliers</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s1\">&#39;pastel&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">representation</span><span class=\"o\">=</span><span class=\"s1\">&#39;object&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">paired</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">all_to_all</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">compare_group</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">graph_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "spacr.plot.spacrGraph.df", "modulename": "spacr.plot", "qualname": "spacrGraph.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.grouping_column", "modulename": "spacr.plot", "qualname": "spacrGraph.grouping_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.order", "modulename": "spacr.plot", "qualname": "spacrGraph.order", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.data_column", "modulename": "spacr.plot", "qualname": "spacrGraph.data_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.graph_type", "modulename": "spacr.plot", "qualname": "spacrGraph.graph_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.summary_func", "modulename": "spacr.plot", "qualname": "spacrGraph.summary_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.colors", "modulename": "spacr.plot", "qualname": "spacrGraph.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.output_dir", "modulename": "spacr.plot", "qualname": "spacrGraph.output_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.save", "modulename": "spacr.plot", "qualname": "spacrGraph.save", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.error_bar_type", "modulename": "spacr.plot", "qualname": "spacrGraph.error_bar_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.remove_outliers", "modulename": "spacr.plot", "qualname": "spacrGraph.remove_outliers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.theme", "modulename": "spacr.plot", "qualname": "spacrGraph.theme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.representation", "modulename": "spacr.plot", "qualname": "spacrGraph.representation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.paired", "modulename": "spacr.plot", "qualname": "spacrGraph.paired", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.all_to_all", "modulename": "spacr.plot", "qualname": "spacrGraph.all_to_all", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.compare_group", "modulename": "spacr.plot", "qualname": "spacrGraph.compare_group", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.y_lim", "modulename": "spacr.plot", "qualname": "spacrGraph.y_lim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.graph_name", "modulename": "spacr.plot", "qualname": "spacrGraph.graph_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.log_x", "modulename": "spacr.plot", "qualname": "spacrGraph.log_x", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.log_y", "modulename": "spacr.plot", "qualname": "spacrGraph.log_y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.results_df", "modulename": "spacr.plot", "qualname": "spacrGraph.results_df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.sns_palette", "modulename": "spacr.plot", "qualname": "spacrGraph.sns_palette", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.fig", "modulename": "spacr.plot", "qualname": "spacrGraph.fig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.results_name", "modulename": "spacr.plot", "qualname": "spacrGraph.results_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.raw_df", "modulename": "spacr.plot", "qualname": "spacrGraph.raw_df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.plot.spacrGraph.preprocess_data", "modulename": "spacr.plot", "qualname": "spacrGraph.preprocess_data", "kind": "function", "doc": "<p>Preprocess the data: remove NaNs, optionally ensure 'plateID' column is created,\nthen group by either 'prc', 'plateID', or do no grouping at all if representation == 'object'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.remove_outliers_from_plot", "modulename": "spacr.plot", "qualname": "spacrGraph.remove_outliers_from_plot", "kind": "function", "doc": "<p>Remove outliers from the plot but keep them in the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.perform_normality_tests", "modulename": "spacr.plot", "qualname": "spacrGraph.perform_normality_tests", "kind": "function", "doc": "<p>Perform normality tests for each group and data column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.perform_levene_test", "modulename": "spacr.plot", "qualname": "spacrGraph.perform_levene_test", "kind": "function", "doc": "<p>Perform Levene's test for equal variance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unique_groups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.perform_statistical_tests", "modulename": "spacr.plot", "qualname": "spacrGraph.perform_statistical_tests", "kind": "function", "doc": "<p>Perform statistical tests separately for each data column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unique_groups</span>, </span><span class=\"param\"><span class=\"n\">is_normal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.perform_posthoc_tests", "modulename": "spacr.plot", "qualname": "spacrGraph.perform_posthoc_tests", "kind": "function", "doc": "<p>Perform post-hoc tests for multiple groups based on all_to_all flag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_normal</span>, </span><span class=\"param\"><span class=\"n\">unique_groups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.create_plot", "modulename": "spacr.plot", "qualname": "spacrGraph.create_plot", "kind": "function", "doc": "<p>Create and display the plot based on the chosen graph type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.get_results", "modulename": "spacr.plot", "qualname": "spacrGraph.get_results", "kind": "function", "doc": "<p>Return the results dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.spacrGraph.get_figure", "modulename": "spacr.plot", "qualname": "spacrGraph.get_figure", "kind": "function", "doc": "<p>Return the generated figure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_data_from_db", "modulename": "spacr.plot", "qualname": "plot_data_from_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_data_from_csv", "modulename": "spacr.plot", "qualname": "plot_data_from_csv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_region", "modulename": "spacr.plot", "qualname": "plot_region", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_image_grid", "modulename": "spacr.plot", "qualname": "plot_image_grid", "kind": "function", "doc": "<p>Plots a square grid of images from a list of image paths. \nUnused subplots are filled with black, and padding is minimized.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>image_paths: List of paths to images to be displayed.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>fig: The generated matplotlib figure.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_paths</span>, </span><span class=\"param\"><span class=\"n\">percentiles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.overlay_masks_on_images", "modulename": "spacr.plot", "qualname": "overlay_masks_on_images", "kind": "function", "doc": "<p>Load images and masks from folders, overlay mask contours on images, and optionally normalize, resize, and save.</p>\n\n<p>Args:\n    img_folder (str): Path to the folder containing images.\n    mask_folder (str): Path to the folder containing masks.\n    normalize (bool): If True, normalize images to the 1st and 99th percentiles.\n    resize (bool): If True, resize the final overlay to 500x500.\n    save (bool): If True, save the final overlay in an 'overlay' folder within the image folder.\n    thickness (int): Thickness of the contour lines.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">img_folder</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">resize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.graph_importance", "modulename": "spacr.plot", "qualname": "graph_importance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.plot_proportion_stacked_bars", "modulename": "spacr.plot", "qualname": "plot_proportion_stacked_bars", "kind": "function", "doc": "<p>Generate a stacked bar plot for proportions and perform chi-squared and pairwise tests.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>settings (dict): Analysis settings.</li>\n<li>df (DataFrame): Input data.</li>\n<li>group_column (str): Column indicating the groups.</li>\n<li>bin_column (str): Column indicating the categories.</li>\n<li>prc_column (str): Optional; column for additional stratification.</li>\n<li>level (str): Level of aggregation ('well' or 'object').</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>chi2 (float): Chi-squared statistic for the overall test.</li>\n<li>p (float): p-value for the overall chi-squared test.</li>\n<li>dof (int): Degrees of freedom for the overall chi-squared test.</li>\n<li>expected (ndarray): Expected frequencies for the overall chi-squared test.</li>\n<li>raw_counts (DataFrame): Contingency table of observed counts.</li>\n<li>fig (Figure): The generated plot.</li>\n<li>pairwise_results (list): Pairwise test results from <code>chi_pairwise</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">settings</span>,</span><span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">group_column</span>,</span><span class=\"param\">\t<span class=\"n\">bin_column</span>,</span><span class=\"param\">\t<span class=\"n\">prc_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;prc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">&#39;object&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.plot.create_venn_diagram", "modulename": "spacr.plot", "qualname": "create_venn_diagram", "kind": "function", "doc": "<p>Reads two CSV files, extracts the <code>gene</code> column, and creates a Venn diagram\nto show overlapping and non-overlapping genes.</p>\n\n<p>Parameters:\n    file1 (str): Path to the first CSV file.\n    file2 (str): Path to the second CSV file.\n    gene_column (str): Name of the column containing gene data (default: \"gene\").\n    filter_coeff (float): Coefficient threshold for filtering genes.\n    save (bool): Whether to save the plot.\n    save_path (str): Path to save the Venn diagram figure.</p>\n\n<p>Returns:\n    dict: Overlapping and non-overlapping genes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file1</span>,</span><span class=\"param\">\t<span class=\"n\">file2</span>,</span><span class=\"param\">\t<span class=\"n\">gene_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;gene&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filter_coeff</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing", "modulename": "spacr.sequencing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.sequencing.map_sequences_to_names", "modulename": "spacr.sequencing", "qualname": "map_sequences_to_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_file</span>, </span><span class=\"param\"><span class=\"n\">sequences</span>, </span><span class=\"param\"><span class=\"n\">rc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.save_df_to_hdf5", "modulename": "spacr.sequencing", "qualname": "save_df_to_hdf5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">hdf5_file</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;df&#39;</span>, </span><span class=\"param\"><span class=\"n\">comp_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;zlib&#39;</span>, </span><span class=\"param\"><span class=\"n\">comp_level</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.save_unique_combinations_to_csv", "modulename": "spacr.sequencing", "qualname": "save_unique_combinations_to_csv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unique_combinations</span>, </span><span class=\"param\"><span class=\"n\">csv_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.save_qc_df_to_csv", "modulename": "spacr.sequencing", "qualname": "save_qc_df_to_csv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qc_df</span>, </span><span class=\"param\"><span class=\"n\">qc_csv_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.extract_sequence_and_quality", "modulename": "spacr.sequencing", "qualname": "extract_sequence_and_quality", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span>, </span><span class=\"param\"><span class=\"n\">quality</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.create_consensus", "modulename": "spacr.sequencing", "qualname": "create_consensus", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq1</span>, </span><span class=\"param\"><span class=\"n\">qual1</span>, </span><span class=\"param\"><span class=\"n\">seq2</span>, </span><span class=\"param\"><span class=\"n\">qual2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.get_consensus_base", "modulename": "spacr.sequencing", "qualname": "get_consensus_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bases</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.reverse_complement", "modulename": "spacr.sequencing", "qualname": "reverse_complement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.process_chunk", "modulename": "spacr.sequencing", "qualname": "process_chunk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chunk_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.saver_process", "modulename": "spacr.sequencing", "qualname": "saver_process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">save_queue</span>,</span><span class=\"param\">\t<span class=\"n\">hdf5_file</span>,</span><span class=\"param\">\t<span class=\"n\">save_h5</span>,</span><span class=\"param\">\t<span class=\"n\">unique_combinations_csv</span>,</span><span class=\"param\">\t<span class=\"n\">qc_csv_file</span>,</span><span class=\"param\">\t<span class=\"n\">comp_type</span>,</span><span class=\"param\">\t<span class=\"n\">comp_level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.paired_read_chunked_processing", "modulename": "spacr.sequencing", "qualname": "paired_read_chunked_processing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">r1_file</span>,</span><span class=\"param\">\t<span class=\"n\">r2_file</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span>,</span><span class=\"param\">\t<span class=\"n\">target_sequence</span>,</span><span class=\"param\">\t<span class=\"n\">offset_start</span>,</span><span class=\"param\">\t<span class=\"n\">expected_end</span>,</span><span class=\"param\">\t<span class=\"n\">column_csv</span>,</span><span class=\"param\">\t<span class=\"n\">grna_csv</span>,</span><span class=\"param\">\t<span class=\"n\">row_csv</span>,</span><span class=\"param\">\t<span class=\"n\">save_h5</span>,</span><span class=\"param\">\t<span class=\"n\">comp_type</span>,</span><span class=\"param\">\t<span class=\"n\">comp_level</span>,</span><span class=\"param\">\t<span class=\"n\">hdf5_file</span>,</span><span class=\"param\">\t<span class=\"n\">unique_combinations_csv</span>,</span><span class=\"param\">\t<span class=\"n\">qc_csv_file</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fill_na</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.single_read_chunked_processing", "modulename": "spacr.sequencing", "qualname": "single_read_chunked_processing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">r1_file</span>,</span><span class=\"param\">\t<span class=\"n\">r2_file</span>,</span><span class=\"param\">\t<span class=\"n\">regex</span>,</span><span class=\"param\">\t<span class=\"n\">target_sequence</span>,</span><span class=\"param\">\t<span class=\"n\">offset_start</span>,</span><span class=\"param\">\t<span class=\"n\">expected_end</span>,</span><span class=\"param\">\t<span class=\"n\">column_csv</span>,</span><span class=\"param\">\t<span class=\"n\">grna_csv</span>,</span><span class=\"param\">\t<span class=\"n\">row_csv</span>,</span><span class=\"param\">\t<span class=\"n\">save_h5</span>,</span><span class=\"param\">\t<span class=\"n\">comp_type</span>,</span><span class=\"param\">\t<span class=\"n\">comp_level</span>,</span><span class=\"param\">\t<span class=\"n\">hdf5_file</span>,</span><span class=\"param\">\t<span class=\"n\">unique_combinations_csv</span>,</span><span class=\"param\">\t<span class=\"n\">qc_csv_file</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fill_na</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.generate_barecode_mapping", "modulename": "spacr.sequencing", "qualname": "generate_barecode_mapping", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.barecodes_reverse_complement", "modulename": "spacr.sequencing", "qualname": "barecodes_reverse_complement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sequencing.graph_sequencing_stats", "modulename": "spacr.sequencing", "qualname": "graph_sequencing_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings", "modulename": "spacr.settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.settings.set_default_plot_merge_settings", "modulename": "spacr.settings", "qualname": "set_default_plot_merge_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_settings_preprocess_generate_masks", "modulename": "spacr.settings", "qualname": "set_default_settings_preprocess_generate_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_settings_preprocess_img_data", "modulename": "spacr.settings", "qualname": "set_default_settings_preprocess_img_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_umap_image_settings", "modulename": "spacr.settings", "qualname": "set_default_umap_image_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_measure_crop_settings", "modulename": "spacr.settings", "qualname": "get_measure_crop_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_analyze_screen", "modulename": "spacr.settings", "qualname": "set_default_analyze_screen", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_train_test_model", "modulename": "spacr.settings", "qualname": "set_default_train_test_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_generate_training_dataset_defaults", "modulename": "spacr.settings", "qualname": "set_generate_training_dataset_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.deep_spacr_defaults", "modulename": "spacr.settings", "qualname": "deep_spacr_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_train_test_model_settings", "modulename": "spacr.settings", "qualname": "get_train_test_model_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_analyze_recruitment_default_settings", "modulename": "spacr.settings", "qualname": "get_analyze_recruitment_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_default_test_cellpose_model_settings", "modulename": "spacr.settings", "qualname": "get_default_test_cellpose_model_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_default_apply_cellpose_model_settings", "modulename": "spacr.settings", "qualname": "get_default_apply_cellpose_model_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.default_settings_analyze_percent_positive", "modulename": "spacr.settings", "qualname": "default_settings_analyze_percent_positive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_analyze_reads_default_settings", "modulename": "spacr.settings", "qualname": "get_analyze_reads_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_map_barcodes_default_settings", "modulename": "spacr.settings", "qualname": "get_map_barcodes_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_train_cellpose_default_settings", "modulename": "spacr.settings", "qualname": "get_train_cellpose_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_generate_dataset_defaults", "modulename": "spacr.settings", "qualname": "set_generate_dataset_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_perform_regression_default_settings", "modulename": "spacr.settings", "qualname": "get_perform_regression_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_check_cellpose_models_default_settings", "modulename": "spacr.settings", "qualname": "get_check_cellpose_models_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_identify_masks_finetune_default_settings", "modulename": "spacr.settings", "qualname": "get_identify_masks_finetune_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.q", "modulename": "spacr.settings", "qualname": "q", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "spacr.settings.expected_types", "modulename": "spacr.settings", "qualname": "expected_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;src&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;metadata_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;custom_regex&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;cov_type&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;experiment&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;channels&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;magnification&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_channel&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;nucleus_background&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_Signal_to_noise&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;nucleus_CP_prob&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;nucleus_FT&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;cell_channel&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;cell_background&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;cell_Signal_to_noise&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;cell_CP_prob&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;cell_FT&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;pathogen_channel&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;pathogen_background&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;pathogen_Signal_to_noise&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;pathogen_CP_prob&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;pathogen_FT&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;preprocess&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;masks&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;examples_to_plot&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;randomize&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;batch_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;timelapse&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;timelapse_displacement&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;timelapse_memory&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;timelapse_frame_limits&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;timelapse_remove_transient&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;timelapse_mode&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;timelapse_objects&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;fps&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;remove_background&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;lower_percentile&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;merge_pathogens&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;normalize_plots&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;all_to_mip&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;pick_slice&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;skip_mode&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;save&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;plot&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;n_jobs&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;verbose&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;cell_mask_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;cell_min_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;cytoplasm_min_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_mask_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_min_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pathogen_mask_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pathogen_min_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;save_png&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;crop_mode&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;use_bounding_box&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;png_size&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;normalize&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;png_dims&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;normalize_by&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;save_measurements&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;uninfected&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;dialate_pngs&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;dialate_png_ratios&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cells&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cell_loc&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;pathogens&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;pathogen_loc&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;treatments&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;treatment_loc&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;channel_of_interest&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;compartments&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;measurement&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nr_imgs&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;um_per_pixel&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;pathogen_limit&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nuclei_limit&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;filter_min_max&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;channel_dims&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;backgrounds&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;background&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;outline_thickness&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;outline_color&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;overlay_chans&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;overlay&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;normalization_percentiles&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;filter&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;fill_in&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;upscale&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;upscale_factor&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;adjust_cells&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;row_limit&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;tables&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;visualize&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;image_nr&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;dot_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;n_neighbors&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;min_dist&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;metric&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;eps&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;min_samples&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;filter_by&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;img_zoom&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;plot_by_cluster&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;plot_cluster_grids&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;remove_cluster_noise&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;remove_highly_correlated&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;log_data&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;black_background&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;remove_image_canvas&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;plot_outlines&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;plot_points&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;smooth_lines&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;clustering&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;exclude&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;col_to_compare&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;pos&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;neg&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;embedding_by_controls&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;plot_images&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;reduction_method&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;save_figure&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;color_by&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;analyze_clusters&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;resnet_features&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;test_nr&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;radial_dist&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;calculate_correlation&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;manders_thresholds&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;homogeneity&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;homogeneity_distances&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;save_arrays&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;cytoplasm&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;merge_edge_pathogen_cells&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;cells_per_well&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pathogen_size_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;nucleus_size_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cell_size_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;pathogen_intensity_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;nucleus_intensity_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cell_intensity_range&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;target_intensity_min&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;model_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;heatmap_feature&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;grouping&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;min_max&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;minimum_cell_count&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;n_estimators&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;test_size&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;location_column&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;positive_control&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;negative_control&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;n_repeats&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;top_features&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;remove_low_variance_features&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;classes&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;schedule&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;loss_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;image_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;epochs&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;val_split&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;learning_rate&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;weight_decay&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;dropout_rate&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;init_weights&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;amsgrad&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;use_checkpoint&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;gradient_accumulation&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;gradient_accumulation_steps&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;intermedeate_save&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;pin_memory&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;augment&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;target&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;cell_types&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cell_plate_metadata&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;pathogen_types&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;pathogen_plate_metadata&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;treatment_plate_metadata&#x27;: (&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;metadata_types&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;cell_chann_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_chann_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pathogen_chann_dim&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;plot_nr&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;plot_control&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;upstream&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;downstream&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;barecode_length_1&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;barecode_length_2&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;chunk_size&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;grna&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;barcodes&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;plate_dict&#x27;: &lt;class &#x27;dict&#x27;&gt;, &#x27;pc&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;pc_loc&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nc&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;nc_loc&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;dependent_variable&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;transform&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;agg_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;min_cell_count&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;resize&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;denoise&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;target_height&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;target_width&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;), &#x27;rescale&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;resample&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;model_name&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;Signal_to_noise&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;n_epochs&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;from_scratch&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;width_height&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;compression&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;complevel&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;gene_weights_csv&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;fraction_threshold&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;barcode_mapping&#x27;: &lt;class &#x27;dict&#x27;&gt;, &#x27;redunction_method&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;mix&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;model_type_ml&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;exclude_conditions&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;remove_highly_correlated_features&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;barcode_coordinates&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;reverse_complement&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;file_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;model_path&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;dataset&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;score_threshold&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;sample&#x27;: None, &#x27;file_metadata&#x27;: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;), &#x27;apply_model_to_dataset&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;train&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;test&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;train_channels&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;optimizer_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;dataset_mode&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;annotated_classes&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;annotation_column&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;metadata_type_by&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;custom_measurement&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;custom_model&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;png_type&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;custom_model_path&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;generate_training_dataset&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;segmentation_mode&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;train_DL_model&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;correlate&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;target_layer&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;save_to_db&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;test_mode&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;test_images&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;remove_background_cell&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;remove_background_nucleus&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;remove_background_pathogen&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;figuresize&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;cmap&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;pathogen_model&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;normalize_input&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;filter_column&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;target_unique_count&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;threshold_multiplier&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;threshold_method&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;count_data&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;score_data&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;min_n&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;controls&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;toxo&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;volcano&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;metadata_files&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;filter_value&#x27;: &lt;class &#x27;list&#x27;&gt;, &#x27;split_axis_lims&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;x_lim&#x27;: (&lt;class &#x27;list&#x27;&gt;, None), &#x27;log_x&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;log_y&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;reg_alpha&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;reg_lambda&#x27;: (&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;), &#x27;prune_features&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;cross_validation&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;offset_start&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;single_direction&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;delete_intermediate&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;outlier_detection&#x27;: &lt;class &#x27;bool&#x27;&gt;, &#x27;CP_prob&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;diameter&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;flow_threshold&#x27;: &lt;class &#x27;float&#x27;&gt;, &#x27;cell_diamiter&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;nucleus_diamiter&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;pathogen_diamiter&#x27;: &lt;class &#x27;int&#x27;&gt;, &#x27;consolidate&#x27;: &lt;class &#x27;bool&#x27;&gt;}"}, {"fullname": "spacr.settings.categories", "modulename": "spacr.settings", "qualname": "categories", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Paths&#x27;: [&#x27;src&#x27;, &#x27;grna&#x27;, &#x27;barcodes&#x27;, &#x27;custom_model_path&#x27;, &#x27;dataset&#x27;, &#x27;model_path&#x27;, &#x27;grna_csv&#x27;, &#x27;row_csv&#x27;, &#x27;column_csv&#x27;, &#x27;metadata_files&#x27;, &#x27;score_data&#x27;, &#x27;count_data&#x27;], &#x27;General&#x27;: [&#x27;cell_mask_dim&#x27;, &#x27;cytoplasm&#x27;, &#x27;cell_chann_dim&#x27;, &#x27;cell_channel&#x27;, &#x27;nucleus_chann_dim&#x27;, &#x27;nucleus_channel&#x27;, &#x27;nucleus_mask_dim&#x27;, &#x27;pathogen_mask_dim&#x27;, &#x27;pathogen_chann_dim&#x27;, &#x27;pathogen_channel&#x27;, &#x27;test_mode&#x27;, &#x27;plot&#x27;, &#x27;metadata_type&#x27;, &#x27;custom_regex&#x27;, &#x27;experiment&#x27;, &#x27;channels&#x27;, &#x27;magnification&#x27;, &#x27;channel_dims&#x27;, &#x27;apply_model_to_dataset&#x27;, &#x27;generate_training_dataset&#x27;, &#x27;train_DL_model&#x27;, &#x27;segmentation_mode&#x27;, &#x27;delete_intermediate&#x27;, &#x27;uninfected&#x27;], &#x27;Cellpose&#x27;: [&#x27;denoise&#x27;, &#x27;fill_in&#x27;, &#x27;from_scratch&#x27;, &#x27;n_epochs&#x27;, &#x27;width_height&#x27;, &#x27;model_name&#x27;, &#x27;custom_model&#x27;, &#x27;resample&#x27;, &#x27;rescale&#x27;, &#x27;CP_prob&#x27;, &#x27;flow_threshold&#x27;, &#x27;percentiles&#x27;, &#x27;invert&#x27;, &#x27;diameter&#x27;, &#x27;grayscale&#x27;, &#x27;Signal_to_noise&#x27;, &#x27;resize&#x27;, &#x27;target_height&#x27;, &#x27;target_width&#x27;], &#x27;Cell&#x27;: [&#x27;cell_diamiter&#x27;, &#x27;cell_intensity_range&#x27;, &#x27;cell_size_range&#x27;, &#x27;cell_background&#x27;, &#x27;cell_Signal_to_noise&#x27;, &#x27;cell_CP_prob&#x27;, &#x27;cell_FT&#x27;, &#x27;remove_background_cell&#x27;, &#x27;cell_min_size&#x27;, &#x27;cytoplasm_min_size&#x27;, &#x27;adjust_cells&#x27;, &#x27;cells&#x27;, &#x27;cell_loc&#x27;], &#x27;Nucleus&#x27;: [&#x27;nucleus_diamiter&#x27;, &#x27;nucleus_intensity_range&#x27;, &#x27;nucleus_size_range&#x27;, &#x27;nucleus_background&#x27;, &#x27;nucleus_Signal_to_noise&#x27;, &#x27;nucleus_CP_prob&#x27;, &#x27;nucleus_FT&#x27;, &#x27;remove_background_nucleus&#x27;, &#x27;nucleus_min_size&#x27;, &#x27;nucleus_loc&#x27;], &#x27;Pathogen&#x27;: [&#x27;pathogen_diamiter&#x27;, &#x27;pathogen_intensity_range&#x27;, &#x27;pathogen_size_range&#x27;, &#x27;pathogen_background&#x27;, &#x27;pathogen_Signal_to_noise&#x27;, &#x27;pathogen_CP_prob&#x27;, &#x27;pathogen_FT&#x27;, &#x27;pathogen_model&#x27;, &#x27;remove_background_pathogen&#x27;, &#x27;pathogen_min_size&#x27;, &#x27;pathogens&#x27;, &#x27;pathogen_loc&#x27;, &#x27;pathogen_types&#x27;, &#x27;pathogen_plate_metadata&#x27;], &#x27;Measurements&#x27;: [&#x27;remove_image_canvas&#x27;, &#x27;remove_highly_correlated&#x27;, &#x27;homogeneity&#x27;, &#x27;homogeneity_distances&#x27;, &#x27;radial_dist&#x27;, &#x27;calculate_correlation&#x27;, &#x27;manders_thresholds&#x27;, &#x27;save_measurements&#x27;, &#x27;tables&#x27;, &#x27;image_nr&#x27;, &#x27;dot_size&#x27;, &#x27;filter_by&#x27;, &#x27;remove_highly_correlated_features&#x27;, &#x27;remove_low_variance_features&#x27;, &#x27;channel_of_interest&#x27;], &#x27;Object Image&#x27;: [&#x27;save_png&#x27;, &#x27;dialate_pngs&#x27;, &#x27;dialate_png_ratios&#x27;, &#x27;png_size&#x27;, &#x27;png_dims&#x27;, &#x27;save_arrays&#x27;, &#x27;normalize_by&#x27;, &#x27;crop_mode&#x27;, &#x27;use_bounding_box&#x27;], &#x27;Sequencing&#x27;: [&#x27;outlier_detection&#x27;, &#x27;offset_start&#x27;, &#x27;chunk_size&#x27;, &#x27;single_direction&#x27;, &#x27;signal_direction&#x27;, &#x27;mode&#x27;, &#x27;comp_level&#x27;, &#x27;comp_type&#x27;, &#x27;save_h5&#x27;, &#x27;expected_end&#x27;, &#x27;offset&#x27;, &#x27;target_sequence&#x27;, &#x27;regex&#x27;, &#x27;highlight&#x27;], &#x27;Generate Dataset&#x27;: [&#x27;save_to_db&#x27;, &#x27;file_metadata&#x27;, &#x27;class_metadata&#x27;, &#x27;annotation_column&#x27;, &#x27;annotated_classes&#x27;, &#x27;dataset_mode&#x27;, &#x27;metadata_type_by&#x27;, &#x27;custom_measurement&#x27;, &#x27;sample&#x27;, &#x27;size&#x27;], &#x27;Hyperparamiters (Training)&#x27;: [&#x27;png_type&#x27;, &#x27;score_threshold&#x27;, &#x27;file_type&#x27;, &#x27;train_channels&#x27;, &#x27;epochs&#x27;, &#x27;loss_type&#x27;, &#x27;optimizer_type&#x27;, &#x27;image_size&#x27;, &#x27;val_split&#x27;, &#x27;learning_rate&#x27;, &#x27;weight_decay&#x27;, &#x27;dropout_rate&#x27;, &#x27;init_weights&#x27;, &#x27;train&#x27;, &#x27;classes&#x27;, &#x27;augment&#x27;, &#x27;amsgrad&#x27;, &#x27;use_checkpoint&#x27;, &#x27;gradient_accumulation&#x27;, &#x27;gradient_accumulation_steps&#x27;, &#x27;intermedeate_save&#x27;, &#x27;pin_memory&#x27;], &#x27;Hyperparamiters (Embedding)&#x27;: [&#x27;visualize&#x27;, &#x27;n_neighbors&#x27;, &#x27;min_dist&#x27;, &#x27;metric&#x27;, &#x27;resnet_features&#x27;, &#x27;reduction_method&#x27;, &#x27;embedding_by_controls&#x27;, &#x27;col_to_compare&#x27;, &#x27;log_data&#x27;], &#x27;Hyperparamiters (Clustering)&#x27;: [&#x27;eps&#x27;, &#x27;min_samples&#x27;, &#x27;analyze_clusters&#x27;, &#x27;clustering&#x27;, &#x27;remove_cluster_noise&#x27;], &#x27;Hyperparamiters (Regression)&#x27;: [&#x27;cross_validation&#x27;, &#x27;prune_features&#x27;, &#x27;reg_lambda&#x27;, &#x27;reg_alpha&#x27;, &#x27;cov_type&#x27;, &#x27;plate&#x27;, &#x27;other&#x27;, &#x27;fraction_threshold&#x27;, &#x27;alpha&#x27;, &#x27;random_row_column_effects&#x27;, &#x27;regression_type&#x27;, &#x27;min_cell_count&#x27;, &#x27;agg_type&#x27;, &#x27;transform&#x27;, &#x27;dependent_variable&#x27;], &#x27;Hyperparamiters (Activation)&#x27;: [&#x27;cam_type&#x27;, &#x27;overlay&#x27;, &#x27;correlation&#x27;, &#x27;target_layer&#x27;, &#x27;normalize_input&#x27;], &#x27;Annotation&#x27;: [&#x27;filter_column&#x27;, &#x27;filter_value&#x27;, &#x27;volcano&#x27;, &#x27;toxo&#x27;, &#x27;controls&#x27;, &#x27;nc_loc&#x27;, &#x27;pc_loc&#x27;, &#x27;nc&#x27;, &#x27;pc&#x27;, &#x27;cell_plate_metadata&#x27;, &#x27;treatment_plate_metadata&#x27;, &#x27;metadata_types&#x27;, &#x27;cell_types&#x27;, &#x27;target&#x27;, &#x27;positive_control&#x27;, &#x27;negative_control&#x27;, &#x27;location_column&#x27;, &#x27;treatment_loc&#x27;, &#x27;channel_of_interest&#x27;, &#x27;measurement&#x27;, &#x27;treatments&#x27;, &#x27;um_per_pixel&#x27;, &#x27;nr_imgs&#x27;, &#x27;exclude&#x27;, &#x27;exclude_conditions&#x27;, &#x27;mix&#x27;, &#x27;pos&#x27;, &#x27;neg&#x27;], &#x27;Plot&#x27;: [&#x27;split_axis_lims&#x27;, &#x27;x_lim&#x27;, &#x27;log_x&#x27;, &#x27;log_y&#x27;, &#x27;plot_control&#x27;, &#x27;plot_nr&#x27;, &#x27;examples_to_plot&#x27;, &#x27;normalize_plots&#x27;, &#x27;cmap&#x27;, &#x27;figuresize&#x27;, &#x27;plot_cluster_grids&#x27;, &#x27;img_zoom&#x27;, &#x27;row_limit&#x27;, &#x27;color_by&#x27;, &#x27;plot_images&#x27;, &#x27;smooth_lines&#x27;, &#x27;plot_points&#x27;, &#x27;plot_outlines&#x27;, &#x27;black_background&#x27;, &#x27;plot_by_cluster&#x27;, &#x27;heatmap_feature&#x27;, &#x27;grouping&#x27;, &#x27;min_max&#x27;, &#x27;cmap&#x27;, &#x27;save_figure&#x27;], &#x27;Timelapse&#x27;: [&#x27;timelapse&#x27;, &#x27;fps&#x27;, &#x27;timelapse_displacement&#x27;, &#x27;timelapse_memory&#x27;, &#x27;timelapse_frame_limits&#x27;, &#x27;timelapse_remove_transient&#x27;, &#x27;timelapse_mode&#x27;, &#x27;timelapse_objects&#x27;, &#x27;compartments&#x27;], &#x27;Advanced&#x27;: [&#x27;merge_edge_pathogen_cells&#x27;, &#x27;test_images&#x27;, &#x27;random_test&#x27;, &#x27;test_nr&#x27;, &#x27;test&#x27;, &#x27;test_split&#x27;, &#x27;normalize&#x27;, &#x27;target_unique_count&#x27;, &#x27;threshold_multiplier&#x27;, &#x27;threshold_method&#x27;, &#x27;min_n&#x27;, &#x27;shuffle&#x27;, &#x27;target_intensity_min&#x27;, &#x27;cells_per_well&#x27;, &#x27;nuclei_limit&#x27;, &#x27;pathogen_limit&#x27;, &#x27;background&#x27;, &#x27;backgrounds&#x27;, &#x27;schedule&#x27;, &#x27;test_size&#x27;, &#x27;exclude&#x27;, &#x27;n_repeats&#x27;, &#x27;top_features&#x27;, &#x27;model_type_ml&#x27;, &#x27;model_type&#x27;, &#x27;minimum_cell_count&#x27;, &#x27;n_estimators&#x27;, &#x27;preprocess&#x27;, &#x27;remove_background&#x27;, &#x27;normalize&#x27;, &#x27;lower_percentile&#x27;, &#x27;merge_pathogens&#x27;, &#x27;batch_size&#x27;, &#x27;filter&#x27;, &#x27;save&#x27;, &#x27;masks&#x27;, &#x27;verbose&#x27;, &#x27;randomize&#x27;, &#x27;n_jobs&#x27;], &#x27;Beta&#x27;: [&#x27;all_to_mip&#x27;, &#x27;pick_slice&#x27;, &#x27;skip_mode&#x27;, &#x27;upscale&#x27;, &#x27;upscale_factor&#x27;, &#x27;consolidate&#x27;]}"}, {"fullname": "spacr.settings.category_keys", "modulename": "spacr.settings", "qualname": "category_keys", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;Paths&#x27;, &#x27;General&#x27;, &#x27;Cellpose&#x27;, &#x27;Cell&#x27;, &#x27;Nucleus&#x27;, &#x27;Pathogen&#x27;, &#x27;Measurements&#x27;, &#x27;Object Image&#x27;, &#x27;Sequencing&#x27;, &#x27;Generate Dataset&#x27;, &#x27;Hyperparamiters (Training)&#x27;, &#x27;Hyperparamiters (Embedding)&#x27;, &#x27;Hyperparamiters (Clustering)&#x27;, &#x27;Hyperparamiters (Regression)&#x27;, &#x27;Hyperparamiters (Activation)&#x27;, &#x27;Annotation&#x27;, &#x27;Plot&#x27;, &#x27;Timelapse&#x27;, &#x27;Advanced&#x27;, &#x27;Beta&#x27;]"}, {"fullname": "spacr.settings.check_settings", "modulename": "spacr.settings", "qualname": "check_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vars_dict</span>, </span><span class=\"param\"><span class=\"n\">expected_types</span>, </span><span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.generate_fields", "modulename": "spacr.settings", "qualname": "generate_fields", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variables</span>, </span><span class=\"param\"><span class=\"n\">scrollable_frame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.descriptions", "modulename": "spacr.settings", "qualname": "descriptions", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;mask&#x27;: &#x27;\\n\\nHelp:\\n- Generate Cells, Nuclei, Pathogens, and Cytoplasm masks from intensity images in src.\\n- To ensure that spacr is installed correctly:\\n- 1. Downloade the training set (click Download).\\n- 2. Import settings (click settings navigate to downloaded dataset settings folder and import preprocess_generate_masks_settings.csv).\\n- 3. Run the module.\\n- 4. Proceed to the Measure module (click Measure in the menue bar).\\n- For further help, click the Help button in the menue bar.&#x27;, &#x27;measure&#x27;: &#x27;Capture Measurements from Cells, Nuclei, Pathogens, and Cytoplasm objects. Generate single object PNG images for one or several objects. (Requires masks from the Mask module). Function: measure_crop from spacr.measure.\\n\\nKey Features:\\n- Comprehensive Measurement Capture: Obtain detailed measurements for various cellular components, including area, perimeter, intensity, and more.\\n- Image Generation: Create high-resolution PNG images of individual objects, facilitating further analysis and visualization.\\n- Mask Dependency: Requires accurate masks generated by the Mask module to ensure precise measurements.&#x27;, &#x27;classify&#x27;: &#x27;Train and Test any Torch Computer vision model. (Requires PNG images from the Measure module). Function: train_test_model from spacr.deep_spacr.\\n\\nKey Features:\\n- Deep Learning Integration: Train and evaluate state-of-the-art Torch models for various classification tasks.\\n- Flexible Training: Supports a wide range of Torch models, allowing customization based on specific research needs.\\n- Data Requirement: Requires PNG images generated by the Measure module for training and testing.&#x27;, &#x27;umap&#x27;: &#x27;Generate UMAP or tSNE embeddings and represent points as single cell images. (Requires measurements.db and PNG images from the Measure module). Function: generate_image_umap from spacr.core.\\n\\nKey Features:\\n- Dimensionality Reduction: Employ UMAP or tSNE algorithms to reduce high-dimensional data into two dimensions for visualization.\\n- Single Cell Representation: Visualize embedding points as single cell images, providing an intuitive understanding of data clusters.\\n- Data Integration: Requires measurements and images generated by the Measure module, ensuring comprehensive data representation.&#x27;, &#x27;train_cellpose&#x27;: &#x27;Train custom Cellpose models for your specific dataset. Function: train_cellpose_model from spacr.core.\\n\\nKey Features:\\n- Custom Model Training: Train Cellpose models on your dataset to improve segmentation accuracy.\\n- Data Adaptation: Tailor the model to handle specific types of biological samples more effectively.\\n- Advanced Training Options: Supports various training parameters and configurations for optimized performance.&#x27;, &#x27;ml_analyze&#x27;: &#x27;Perform machine learning analysis on your data. Function: ml_analysis_tools from spacr.ml.\\n\\nKey Features:\\n- Comprehensive Analysis: Utilize a suite of machine learning tools for data analysis.\\n- Customizable Workflows: Configure and run different ML algorithms based on your research requirements.\\n- Integration: Works seamlessly with other modules to analyze data produced from various steps.&#x27;, &#x27;cellpose_masks&#x27;: &quot;Generate masks using Cellpose for all images in your dataset. Function: generate_masks from spacr.cellpose.\\n\\nKey Features:\\n- Batch Processing: Generate masks for large sets of images efficiently.\\n- Robust Segmentation: Leverage Cellpose&#x27;s capabilities for accurate segmentation across diverse samples.\\n- Automation: Automate the mask generation process for streamlined workflows.&quot;, &#x27;cellpose_all&#x27;: &#x27;Run Cellpose on all images in your dataset and obtain masks and measurements. Function: cellpose_analysis from spacr.cellpose.\\n\\nKey Features:\\n- End-to-End Analysis: Perform both segmentation and measurement extraction in a single step.\\n- Efficiency: Process entire datasets with minimal manual intervention.\\n- Comprehensive Output: Obtain detailed masks and corresponding measurements for further analysis.&#x27;, &#x27;map_barcodes&#x27;: &quot;\\n\\nHelp:\\n- 1 .Generate consensus read fastq files from R1 and R2 files.\\n- 2. Map barcodes from sequencing data for identification and tracking of samples.\\n- 3. Run the module to extract and map barcodes from your FASTQ files in chunks.\\n- Prepare your barcode CSV files with the appropriate &#x27;name&#x27; and &#x27;sequence&#x27; columns.\\n- Configure the barcode settings (coordinates and reverse complement flags) according to your experimental setup.\\n- For further help, click the Help button in the menu bar.&quot;, &#x27;regression&#x27;: &#x27;Perform regression analysis on your data. Function: regression_tools from spacr.analysis.\\n\\nKey Features:\\n- Statistical Analysis: Conduct various types of regression analysis to identify relationships within your data.\\n- Flexible Options: Supports multiple regression models and configurations.\\n- Data Insight: Gain deeper insights into your dataset through advanced regression techniques.&#x27;, &#x27;activation&#x27;: &#x27;&#x27;, &#x27;analyze_plaques&#x27;: &#x27;Analyze plaque images to quantify plaque properties. Function: analyze_plaques from spacr.analysis.\\n\\nKey Features:\\n- Plaque Analysis: Quantify plaque properties such as size, intensity, and shape.\\n- Batch Processing: Analyze multiple plaque images efficiently.\\n- Visualization: Generate visualizations to represent plaque data and patterns.&#x27;, &#x27;recruitment&#x27;: &#x27;Analyze recruitment data to understand sample recruitment dynamics. Function: recruitment_analysis_tools from spacr.analysis.\\n\\nKey Features:\\n- Recruitment Analysis: Investigate and analyze the recruitment of samples over time or conditions.\\n- Visualization: Generate visualizations to represent recruitment trends and patterns.\\n- Integration: Utilize data from various sources for a comprehensive recruitment analysis.&#x27;}"}, {"fullname": "spacr.settings.set_annotate_default_settings", "modulename": "spacr.settings", "qualname": "set_annotate_default_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_default_generate_barecode_mapping", "modulename": "spacr.settings", "qualname": "set_default_generate_barecode_mapping", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_default_generate_activation_map_settings", "modulename": "spacr.settings", "qualname": "get_default_generate_activation_map_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.get_analyze_plaque_settings", "modulename": "spacr.settings", "qualname": "get_analyze_plaque_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_graph_importance_defaults", "modulename": "spacr.settings", "qualname": "set_graph_importance_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_interperate_vision_model_defaults", "modulename": "spacr.settings", "qualname": "set_interperate_vision_model_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_analyze_endodyogeny_defaults", "modulename": "spacr.settings", "qualname": "set_analyze_endodyogeny_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.settings.set_analyze_class_proportion_defaults", "modulename": "spacr.settings", "qualname": "set_analyze_class_proportion_defaults", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim", "modulename": "spacr.sim", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.sim.generate_gene_list", "modulename": "spacr.sim", "qualname": "generate_gene_list", "kind": "function", "doc": "<p>Generates a list of randomly selected genes.</p>\n\n<p>Args:\n    number_of_genes (int): The number of genes to be selected.\n    number_of_all_genes (int): The total number of genes available.</p>\n\n<p>Returns:\n    list: A list of randomly selected genes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number_of_genes</span>, </span><span class=\"param\"><span class=\"n\">number_of_all_genes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_plate_map", "modulename": "spacr.sim", "qualname": "generate_plate_map", "kind": "function", "doc": "<p>Generate a plate map based on the number of plates.</p>\n\n<p>Parameters:\nnr_plates (int): The number of plates to generate the map for.</p>\n\n<p>Returns:\npandas.DataFrame: The generated plate map dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nr_plates</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.gini_coefficient", "modulename": "spacr.sim", "qualname": "gini_coefficient", "kind": "function", "doc": "<p>Compute Gini coefficient of array of values.</p>\n\n<p>Parameters:\nx (array-like): Array of values.</p>\n\n<p>Returns:\nfloat: Gini coefficient.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.gini", "modulename": "spacr.sim", "qualname": "gini", "kind": "function", "doc": "<p>Calculate the Gini coefficient for a given array of values.</p>\n\n<p>Parameters:\nx (array-like): The input array of values.</p>\n\n<p>Returns:\nfloat: The Gini coefficient.</p>\n\n<p>References:</p>\n\n<ul>\n<li>Based on bottom eq: <a href=\"http://www.statsdirect.com/help/content/image/stat0206_wmf.gif\">http://www.statsdirect.com/help/content/image/stat0206_wmf.gif</a></li>\n<li>From: <a href=\"http://www.statsdirect.com/help/default.htm#nonparametric_methods/gini.htm\">http://www.statsdirect.com/help/default.htm#nonparametric_methods/gini.htm</a></li>\n<li>All values are treated equally, arrays must be 1d.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.gini_gene_well", "modulename": "spacr.sim", "qualname": "gini_gene_well", "kind": "function", "doc": "<p>Calculate the Gini coefficient for a given income distribution.</p>\n\n<p>The Gini coefficient measures income inequality in a population.\nA value of 0 represents perfect income equality (everyone has the same income),\nwhile a value of 1 represents perfect income inequality (one individual has all the income).</p>\n\n<p>Parameters:\nx (array-like): An array-like object representing the income distribution.</p>\n\n<p>Returns:\nfloat: The Gini coefficient for the given income distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.dist_gen", "modulename": "spacr.sim", "qualname": "dist_gen", "kind": "function", "doc": "<p>Generate a Poisson distribution based on a gamma distribution.</p>\n\n<p>Parameters:\nmean (float): Mean of the gamma distribution.\nsd (float): Standard deviation of the gamma distribution.\ndf (pandas.DataFrame): Input data.</p>\n\n<p>Returns:\ntuple: A tuple containing the generated Poisson distribution and the length of the input data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mean</span>, </span><span class=\"param\"><span class=\"n\">sd</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_gene_weights", "modulename": "spacr.sim", "qualname": "generate_gene_weights", "kind": "function", "doc": "<p>Generate gene weights using a beta distribution.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>positive_mean (float): The mean value for the positive distribution.</li>\n<li>positive_variance (float): The variance value for the positive distribution.</li>\n<li>df (pandas.DataFrame): The DataFrame containing the data.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>weights (numpy.ndarray): An array of gene weights generated using a beta distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">positive_mean</span>, </span><span class=\"param\"><span class=\"n\">positive_variance</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.normalize_array", "modulename": "spacr.sim", "qualname": "normalize_array", "kind": "function", "doc": "<p>Normalize an array by scaling its values between 0 and 1.</p>\n\n<p>Parameters:\narr (numpy.ndarray): The input array to be normalized.</p>\n\n<p>Returns:\nnumpy.ndarray: The normalized array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_power_law_distribution", "modulename": "spacr.sim", "qualname": "generate_power_law_distribution", "kind": "function", "doc": "<p>Generate a power law distribution.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>num_elements (int): The number of elements in the distribution.</li>\n<li>coeff (float): The coefficient of the power law.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>normalized_distribution (ndarray): The normalized power law distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_elements</span>, </span><span class=\"param\"><span class=\"n\">coeff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.power_law_dist_gen", "modulename": "spacr.sim", "qualname": "power_law_dist_gen", "kind": "function", "doc": "<p>Generate a power-law distribution for wells.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: DataFrame: The input DataFrame containing the wells.</li>\n<li>avg: float: The average value for the distribution.</li>\n<li>well_ineq_coeff: float: The inequality coefficient for the power-law distribution.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dist: ndarray: The generated power-law distribution for the wells.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">avg</span>, </span><span class=\"param\"><span class=\"n\">well_ineq_coeff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.run_experiment", "modulename": "spacr.sim", "qualname": "run_experiment", "kind": "function", "doc": "<p>Run a simulation experiment.</p>\n\n<p>Args:\n    plate_map (DataFrame): The plate map containing information about the wells.\n    number_of_genes (int): The total number of genes.\n    active_gene_list (list): The list of active genes.\n    avg_genes_per_well (float): The average number of genes per well.\n    sd_genes_per_well (float): The standard deviation of genes per well.\n    avg_cells_per_well (float): The average number of cells per well.\n    sd_cells_per_well (float): The standard deviation of cells per well.\n    well_ineq_coeff (float): The coefficient for well inequality.\n    gene_ineq_coeff (float): The coefficient for gene inequality.</p>\n\n<p>Returns:\n    tuple: A tuple containing the following:\n        - cell_df (DataFrame): The DataFrame containing information about the cells.\n        - genes_per_well_df (DataFrame): The DataFrame containing gene counts per well.\n        - wells_per_gene_df (DataFrame): The DataFrame containing well counts per gene.\n        - df_ls (list): A list containing gene counts per well, well counts per gene, Gini coefficients for wells,\n          Gini coefficients for genes, gene weights array, and well weights.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">plate_map</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_genes</span>,</span><span class=\"param\">\t<span class=\"n\">active_gene_list</span>,</span><span class=\"param\">\t<span class=\"n\">avg_genes_per_well</span>,</span><span class=\"param\">\t<span class=\"n\">sd_genes_per_well</span>,</span><span class=\"param\">\t<span class=\"n\">avg_cells_per_well</span>,</span><span class=\"param\">\t<span class=\"n\">sd_cells_per_well</span>,</span><span class=\"param\">\t<span class=\"n\">well_ineq_coeff</span>,</span><span class=\"param\">\t<span class=\"n\">gene_ineq_coeff</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.classifier", "modulename": "spacr.sim", "qualname": "classifier", "kind": "function", "doc": "<p>Classifies the data in the DataFrame based on the given parameters and a classifier error rate.</p>\n\n<p>Args:\n    positive_mean (float): The mean of the positive distribution.\n    positive_variance (float): The variance of the positive distribution.\n    negative_mean (float): The mean of the negative distribution.\n    negative_variance (float): The variance of the negative distribution.\n    classifier_accuracy (float): The likelihood (0 to 1) that a gene is correctly classified according to its true label.\n    df (pandas.DataFrame): The DataFrame containing the data to be classified.</p>\n\n<p>Returns:\n    pandas.DataFrame: The DataFrame with an additional 'score' column containing the classification scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">positive_mean</span>,</span><span class=\"param\">\t<span class=\"n\">positive_variance</span>,</span><span class=\"param\">\t<span class=\"n\">negative_mean</span>,</span><span class=\"param\">\t<span class=\"n\">negative_variance</span>,</span><span class=\"param\">\t<span class=\"n\">classifier_accuracy</span>,</span><span class=\"param\">\t<span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.classifier_v2", "modulename": "spacr.sim", "qualname": "classifier_v2", "kind": "function", "doc": "<p>Classifies the data in the DataFrame based on the given parameters.</p>\n\n<p>Args:\n    positive_mean (float): The mean of the positive distribution.\n    positive_variance (float): The variance of the positive distribution.\n    negative_mean (float): The mean of the negative distribution.\n    negative_variance (float): The variance of the negative distribution.\n    df (pandas.DataFrame): The DataFrame containing the data to be classified.</p>\n\n<p>Returns:\n    pandas.DataFrame: The DataFrame with an additional 'score' column containing the classification scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">positive_mean</span>,</span><span class=\"param\">\t<span class=\"n\">positive_variance</span>,</span><span class=\"param\">\t<span class=\"n\">negative_mean</span>,</span><span class=\"param\">\t<span class=\"n\">negative_variance</span>,</span><span class=\"param\">\t<span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.compute_roc_auc", "modulename": "spacr.sim", "qualname": "compute_roc_auc", "kind": "function", "doc": "<p>Compute the Receiver Operating Characteristic (ROC) Area Under the Curve (AUC) for cell scores.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>cell_scores (DataFrame): DataFrame containing cell scores with columns 'is_active' and 'score'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>cell_roc_dict (dict): Dictionary containing the ROC curve information, including the threshold, true positive rate (TPR), false positive rate (FPR), and ROC AUC.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.compute_precision_recall", "modulename": "spacr.sim", "qualname": "compute_precision_recall", "kind": "function", "doc": "<p>Compute precision, recall, F1 score, and PR AUC for a given set of cell scores.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>cell_scores (DataFrame): A DataFrame containing the cell scores with columns 'is_active' and 'score'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>cell_pr_dict (dict): A dictionary containing the computed precision, recall, F1 score, PR AUC, and threshold values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.get_optimum_threshold", "modulename": "spacr.sim", "qualname": "get_optimum_threshold", "kind": "function", "doc": "<p>Calculates the optimum threshold based on the f1_score in the given cell_pr_dict.</p>\n\n<p>Parameters:\ncell_pr_dict (dict): A dictionary containing precision, recall, and f1_score values for different thresholds.</p>\n\n<p>Returns:\nfloat: The optimum threshold value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_pr_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.update_scores_and_get_cm", "modulename": "spacr.sim", "qualname": "update_scores_and_get_cm", "kind": "function", "doc": "<p>Update the cell scores based on the given optimum value and calculate the confusion matrix.</p>\n\n<p>Args:\n    cell_scores (DataFrame): The DataFrame containing the cell scores.\n    optimum (float): The optimum value used for updating the scores.</p>\n\n<p>Returns:\n    tuple: A tuple containing the updated cell scores DataFrame and the confusion matrix.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_scores</span>, </span><span class=\"param\"><span class=\"n\">optimum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.cell_level_roc_auc", "modulename": "spacr.sim", "qualname": "cell_level_roc_auc", "kind": "function", "doc": "<p>Compute the ROC AUC and precision-recall metrics at the cell level.</p>\n\n<p>Args:\n    cell_scores (list): List of scores for each cell.</p>\n\n<p>Returns:\n    cell_roc_dict_df (DataFrame): DataFrame containing the ROC AUC metrics for each cell.\n    cell_pr_dict_df (DataFrame): DataFrame containing the precision-recall metrics for each cell.\n    cell_scores (list): Updated list of scores after applying the optimum threshold.\n    cell_cm (array): Confusion matrix for the cell-level classification.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_well_score", "modulename": "spacr.sim", "qualname": "generate_well_score", "kind": "function", "doc": "<p>Generate well scores based on cell scores.</p>\n\n<p>Args:\n    cell_scores (DataFrame): DataFrame containing cell scores.</p>\n\n<p>Returns:\n    DataFrame: DataFrame containing well scores with average active score, gene list, and score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cell_scores</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.sequence_plates", "modulename": "spacr.sim", "qualname": "sequence_plates", "kind": "function", "doc": "<p>Simulates the sequencing of plates and calculates gene fractions and metadata.</p>\n\n<p>Parameters:\nwell_score (pd.DataFrame): DataFrame containing well scores and gene lists.\nnumber_of_genes (int): Number of genes.\navg_reads_per_gene (float): Average number of reads per gene.\nsd_reads_per_gene (float): Standard deviation of reads per gene.\nsequencing_error (float, optional): Probability of introducing sequencing error. Defaults to 0.01.</p>\n\n<p>Returns:\ngene_fraction_map (pd.DataFrame): DataFrame containing gene fractions for each well.\nmetadata (pd.DataFrame): DataFrame containing metadata for each well.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">well_score</span>,</span><span class=\"param\">\t<span class=\"n\">number_of_genes</span>,</span><span class=\"param\">\t<span class=\"n\">avg_reads_per_gene</span>,</span><span class=\"param\">\t<span class=\"n\">sd_reads_per_gene</span>,</span><span class=\"param\">\t<span class=\"n\">sequencing_error</span><span class=\"o\">=</span><span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.regression_roc_auc", "modulename": "spacr.sim", "qualname": "regression_roc_auc", "kind": "function", "doc": "<p>Calculate regression ROC AUC and other statistics.</p>\n\n<p>Parameters:\nresults_df (DataFrame): DataFrame containing the results of regression analysis.\nactive_gene_list (list): List of active gene IDs.\ncontrol_gene_list (list): List of control gene IDs.\nalpha (float, optional): Significance level for determining hits. Default is 0.05.\noptimal (bool, optional): Whether to use the optimal threshold for classification. Default is False.</p>\n\n<p>Returns:\ntuple: A tuple containing the following:</p>\n\n<ul>\n<li>results_df (DataFrame): Updated DataFrame with additional columns.</li>\n<li>reg_roc_dict_df (DataFrame): DataFrame containing regression ROC curve data.</li>\n<li>reg_pr_dict_df (DataFrame): DataFrame containing precision-recall curve data.</li>\n<li>reg_cm (ndarray): Confusion matrix.</li>\n<li>sim_stats (DataFrame): DataFrame containing simulation statistics.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">results_df</span>,</span><span class=\"param\">\t<span class=\"n\">active_gene_list</span>,</span><span class=\"param\">\t<span class=\"n\">control_gene_list</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">optimal</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_histogram", "modulename": "spacr.sim", "qualname": "plot_histogram", "kind": "function", "doc": "<p>Plots a histogram of the given data.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: The data to be plotted.</li>\n<li>x_label: The label for the x-axis.</li>\n<li>ax: The matplotlib axis object to plot on.</li>\n<li>color: The color of the histogram bars.</li>\n<li>title: The title of the plot.</li>\n<li>binwidth: The width of each histogram bin.</li>\n<li>log: Whether to use a logarithmic scale for the y-axis.</li>\n</ul>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">x_label</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">binwidth</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_roc_pr", "modulename": "spacr.sim", "qualname": "plot_roc_pr", "kind": "function", "doc": "<p>Plot the ROC (Receiver Operating Characteristic) and PR (Precision-Recall) curves.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>data: DataFrame containing the data to be plotted.</li>\n<li>ax: The matplotlib axes object to plot on.</li>\n<li>title: The title of the plot.</li>\n<li>x_label: The label for the x-axis.</li>\n<li>y_label: The label for the y-axis.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">x_label</span>, </span><span class=\"param\"><span class=\"n\">y_label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_confusion_matrix", "modulename": "spacr.sim", "qualname": "plot_confusion_matrix", "kind": "function", "doc": "<p>Plots a confusion matrix using a heatmap.</p>\n\n<p>Parameters:\ndata (numpy.ndarray): The confusion matrix data.\nax (matplotlib.axes.Axes): The axes object to plot the heatmap on.\ntitle (str): The title of the plot.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">title</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.run_simulation", "modulename": "spacr.sim", "qualname": "run_simulation", "kind": "function", "doc": "<p>Run the simulation based on the given settings.</p>\n\n<p>Args:\n    settings (dict): A dictionary containing the simulation settings.</p>\n\n<p>Returns:\n    tuple: A tuple containing the simulation results and distances.\n    - cell_scores (DataFrame): Scores for each cell.\n    - cell_roc_dict_df (DataFrame): ROC AUC scores for each cell.\n    - cell_pr_dict_df (DataFrame): Precision-Recall AUC scores for each cell.\n    - cell_cm (DataFrame): Confusion matrix for each cell.\n    - well_score (DataFrame): Scores for each well.\n    - gene_fraction_map (DataFrame): Fraction of genes for each well.\n    - metadata (DataFrame): Metadata for each well.\n    - results_df (DataFrame): Results of the regression analysis.\n    - reg_roc_dict_df (DataFrame): ROC AUC scores for each gene.\n    - reg_pr_dict_df (DataFrame): Precision-Recall AUC scores for each gene.\n    - reg_cm (DataFrame): Confusion matrix for each gene.\n    - sim_stats (dict): Additional simulation statistics.\n    - genes_per_well_df (DataFrame): Number of genes per well.\n    - wells_per_gene_df (DataFrame): Number of wells per gene.\n    dists (list): List of distances.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.vis_dists", "modulename": "spacr.sim", "qualname": "vis_dists", "kind": "function", "doc": "<p>Visualizes the distributions of given distances.</p>\n\n<p>Args:\n    dists (list): List of distance arrays.\n    src (str): Source directory for saving the plot.\n    v (int): Number of vertices.\n    i (int): Index of the plot.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dists</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.visualize_all", "modulename": "spacr.sim", "qualname": "visualize_all", "kind": "function", "doc": "<p>Visualizes various plots based on the given output data.</p>\n\n<p>Args:\n    output (list): A list containing the following elements:\n        - cell_scores (DataFrame): DataFrame containing cell scores.\n        - cell_roc_dict_df (DataFrame): DataFrame containing ROC curve data for cell classification.\n        - cell_pr_dict_df (DataFrame): DataFrame containing precision-recall curve data for cell classification.\n        - cell_cm (array-like): Confusion matrix for cell classification.\n        - well_score (DataFrame): DataFrame containing well scores.\n        - gene_fraction_map (dict): Dictionary mapping genes to fractions.\n        - metadata (dict): Dictionary containing metadata.\n        - results_df (DataFrame): DataFrame containing results.\n        - reg_roc_dict_df (DataFrame): DataFrame containing ROC curve data for gene regression.\n        - reg_pr_dict_df (DataFrame): DataFrame containing precision-recall curve data for gene regression.\n        - reg_cm (array-like): Confusion matrix for gene regression.\n        - sim_stats (dict): Dictionary containing simulation statistics.\n        - genes_per_well_df (DataFrame): DataFrame containing genes per well data.\n        - wells_per_gene_df (DataFrame): DataFrame containing wells per gene data.</p>\n\n<p>Returns:\n    fig (matplotlib.figure.Figure): The generated figure object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.create_database", "modulename": "spacr.sim", "qualname": "create_database", "kind": "function", "doc": "<p>Creates a SQLite database at the specified path.</p>\n\n<p>Args:\n    db_path (str): The path where the database should be created.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.append_database", "modulename": "spacr.sim", "qualname": "append_database", "kind": "function", "doc": "<p>Append a pandas DataFrame to an SQLite database table.</p>\n\n<p>Parameters:\nsrc (str): The source directory where the database file is located.\ntable (pandas.DataFrame): The DataFrame to be appended to the database table.\ntable_name (str): The name of the database table.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">table</span>, </span><span class=\"param\"><span class=\"n\">table_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.save_data", "modulename": "spacr.sim", "qualname": "save_data", "kind": "function", "doc": "<p>Save simulation data to specified location.</p>\n\n<p>Args:\n    src (str): The directory path where the data will be saved.\n    output (list): A list of dataframes containing simulation output.\n    settings (dict): A dictionary containing simulation settings.\n    save_all (bool, optional): Flag indicating whether to save all tables or only a subset. Defaults to False.\n    i (int, optional): The simulation number. Defaults to 0.\n    variable (str, optional): The variable name. Defaults to 'all'.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">save_all</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.save_plot", "modulename": "spacr.sim", "qualname": "save_plot", "kind": "function", "doc": "<p>Save a matplotlib figure as a PDF file.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>fig: The matplotlib figure to be saved.</li>\n<li>src: The directory where the file will be saved.</li>\n<li>variable: The name of the variable being plotted.</li>\n<li>i: The index of the figure.</li>\n</ul>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">variable</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.run_and_save", "modulename": "spacr.sim", "qualname": "run_and_save", "kind": "function", "doc": "<p>Run the simulation and save the results.</p>\n\n<p>Args:\n    i (int): The simulation index.\n    settings (dict): The simulation settings.\n    time_ls (list): The list to store simulation times.\n    total_sims (int): The total number of simulations.</p>\n\n<p>Returns:\n    tuple: A tuple containing the simulation index, simulation time, and None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">time_ls</span>, </span><span class=\"param\"><span class=\"n\">total_sims</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.validate_and_adjust_beta_params", "modulename": "spacr.sim", "qualname": "validate_and_adjust_beta_params", "kind": "function", "doc": "<p>Validates and adjusts Beta distribution parameters in simulation settings to ensure they are possible.</p>\n\n<p>Args:\nsim_params (list of dict): List of dictionaries, each containing the simulation parameters.</p>\n\n<p>Returns:\nlist of dict: The adjusted list of simulation parameter sets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sim_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_paramiters", "modulename": "spacr.sim", "qualname": "generate_paramiters", "kind": "function", "doc": "<p>Generate a list of parameter sets for simulation based on the given settings.</p>\n\n<p>Args:\n    settings (dict): A dictionary containing the simulation settings.</p>\n\n<p>Returns:\n    list: A list of parameter sets for simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.run_multiple_simulations", "modulename": "spacr.sim", "qualname": "run_multiple_simulations", "kind": "function", "doc": "<p>Run multiple simulations in parallel using the provided settings.</p>\n\n<p>Args:\n    settings (dict): A dictionary containing the simulation settings.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_integers", "modulename": "spacr.sim", "qualname": "generate_integers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">stop</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_floats", "modulename": "spacr.sim", "qualname": "generate_floats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">stop</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.remove_columns_with_single_value", "modulename": "spacr.sim", "qualname": "remove_columns_with_single_value", "kind": "function", "doc": "<p>Removes columns from the DataFrame that have the same value in all rows.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The original DataFrame.</p>\n\n<p>Returns:\npandas.DataFrame: A DataFrame with the columns removed that contained only one unique value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.read_simulations_table", "modulename": "spacr.sim", "qualname": "read_simulations_table", "kind": "function", "doc": "<p>Reads the 'simulations' table from an SQLite database into a pandas DataFrame.</p>\n\n<p>Args:\ndb_path (str): The file path to the SQLite database.</p>\n\n<p>Returns:\npandas.DataFrame: DataFrame containing the 'simulations' table data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_simulations", "modulename": "spacr.sim", "qualname": "plot_simulations", "kind": "function", "doc": "<p>Creates separate line plots for 'prauc' against a specified 'variable', \nfor each unique combination of conditions defined by 'grouping_vars', displayed on a grid.</p>\n\n<p>Args:\ndf (pandas.DataFrame): DataFrame containing the necessary columns.\nvariable (str): Name of the column to use as the x-axis for grouping and plotting.\nx_rotation (int, optional): Degrees to rotate the x-axis labels.\nlegend (bool, optional): Whether to display a legend.\ngrid (bool, optional): Whether to display grid lines.\nverbose (bool, optional): Whether to print the filter conditions.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">variable</span>,</span><span class=\"param\">\t<span class=\"n\">x_rotation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_correlation_matrix", "modulename": "spacr.sim", "qualname": "plot_correlation_matrix", "kind": "function", "doc": "<p>Plots a correlation matrix for the specified variables and the target variable.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\nvariables (list): List of column names to include in the correlation matrix.\ntarget_variable (str): The target variable column name.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;inferno&#39;</span>, </span><span class=\"param\"><span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_feature_importance", "modulename": "spacr.sim", "qualname": "plot_feature_importance", "kind": "function", "doc": "<p>Trains a RandomForestRegressor to determine the importance of each feature in predicting the target.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\ntarget (str): The target variable column name.\nexclude (list or str, optional): Column names to exclude from features.</p>\n\n<p>Returns:\nmatplotlib.figure.Figure: The figure object containing the feature importance plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">&#39;prauc&#39;</span>, </span><span class=\"param\"><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.calculate_permutation_importance", "modulename": "spacr.sim", "qualname": "calculate_permutation_importance", "kind": "function", "doc": "<p>Calculates permutation importance for the given features in the dataframe.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\nfeatures (list): List of column names to include as features.\ntarget (str): The name of the target variable column.</p>\n\n<p>Returns:\ndict: Dictionary containing the importances and standard deviations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">&#39;prauc&#39;</span>, </span><span class=\"param\"><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">n_repeats</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.plot_partial_dependences", "modulename": "spacr.sim", "qualname": "plot_partial_dependences", "kind": "function", "doc": "<p>Creates partial dependence plots for the specified features, with improved layout to avoid text overlap.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\ntarget (str): The target variable.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">&#39;prauc&#39;</span>, </span><span class=\"param\"><span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.save_shap_plot", "modulename": "spacr.sim", "qualname": "save_shap_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">variable</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.generate_shap_summary_plot", "modulename": "spacr.sim", "qualname": "generate_shap_summary_plot", "kind": "function", "doc": "<p>Generates a SHAP summary plot for the given features in the dataframe.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The DataFrame containing the data.\nfeatures (list): List of column names to include as features.\ntarget (str): The name of the target variable column.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">&#39;prauc&#39;</span>, </span><span class=\"param\"><span class=\"n\">clean</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sim.remove_constant_columns", "modulename": "spacr.sim", "qualname": "remove_constant_columns", "kind": "function", "doc": "<p>Removes columns in the DataFrame where all entries have the same value.</p>\n\n<p>Parameters:\ndf (pd.DataFrame): The input DataFrame from which to remove constant columns.</p>\n\n<p>Returns:\npd.DataFrame: A DataFrame with the constant columns removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats", "modulename": "spacr.sp_stats", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.sp_stats.choose_p_adjust_method", "modulename": "spacr.sp_stats", "qualname": "choose_p_adjust_method", "kind": "function", "doc": "<p>Selects the most appropriate p-value adjustment method based on data characteristics.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>num_groups: Number of unique groups being compared</li>\n<li>num_data_points: Number of data points per group (assuming balanced groups)</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A string representing the recommended p-adjustment method</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_groups</span>, </span><span class=\"param\"><span class=\"n\">num_data_points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats.perform_normality_tests", "modulename": "spacr.sp_stats", "qualname": "perform_normality_tests", "kind": "function", "doc": "<p>Perform normality tests for each group and data column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">grouping_column</span>, </span><span class=\"param\"><span class=\"n\">data_columns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats.perform_levene_test", "modulename": "spacr.sp_stats", "qualname": "perform_levene_test", "kind": "function", "doc": "<p>Perform Levene's test for equal variance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">grouping_column</span>, </span><span class=\"param\"><span class=\"n\">data_column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats.perform_statistical_tests", "modulename": "spacr.sp_stats", "qualname": "perform_statistical_tests", "kind": "function", "doc": "<p>Perform statistical tests for each data column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">grouping_column</span>, </span><span class=\"param\"><span class=\"n\">data_columns</span>, </span><span class=\"param\"><span class=\"n\">paired</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats.perform_posthoc_tests", "modulename": "spacr.sp_stats", "qualname": "perform_posthoc_tests", "kind": "function", "doc": "<p>Perform post-hoc tests for multiple groups with both original and adjusted p-values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">grouping_column</span>, </span><span class=\"param\"><span class=\"n\">data_column</span>, </span><span class=\"param\"><span class=\"n\">is_normal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.sp_stats.chi_pairwise", "modulename": "spacr.sp_stats", "qualname": "chi_pairwise", "kind": "function", "doc": "<p>Perform pairwise chi-square or Fisher's exact tests between all unique group pairs\nand apply p-value correction.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>raw_counts (DataFrame): Contingency table with group-wise counts.</li>\n<li>verbose (bool): Whether to print results for each pair.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>pairwise_df (DataFrame): DataFrame with pairwise test results, including corrected p-values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_counts</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose", "modulename": "spacr.spacr_cellpose", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.spacr_cellpose.identify_masks_finetune", "modulename": "spacr.spacr_cellpose", "qualname": "identify_masks_finetune", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose.generate_masks_from_imgs", "modulename": "spacr.spacr_cellpose", "qualname": "generate_masks_from_imgs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span>,</span><span class=\"param\">\t<span class=\"n\">diameter</span>,</span><span class=\"param\">\t<span class=\"n\">cellprob_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">flow_threshold</span>,</span><span class=\"param\">\t<span class=\"n\">grayscale</span>,</span><span class=\"param\">\t<span class=\"n\">save</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span>,</span><span class=\"param\">\t<span class=\"n\">percentiles</span>,</span><span class=\"param\">\t<span class=\"n\">invert</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span>,</span><span class=\"param\">\t<span class=\"n\">resize</span>,</span><span class=\"param\">\t<span class=\"n\">target_height</span>,</span><span class=\"param\">\t<span class=\"n\">target_width</span>,</span><span class=\"param\">\t<span class=\"n\">remove_background</span>,</span><span class=\"param\">\t<span class=\"n\">background</span>,</span><span class=\"param\">\t<span class=\"n\">Signal_to_noise</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose.check_cellpose_models", "modulename": "spacr.spacr_cellpose", "qualname": "check_cellpose_models", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose.save_results_and_figure", "modulename": "spacr.spacr_cellpose", "qualname": "save_results_and_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">results</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose.compare_mask", "modulename": "spacr.spacr_cellpose", "qualname": "compare_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.spacr_cellpose.compare_cellpose_masks", "modulename": "spacr.spacr_cellpose", "qualname": "compare_cellpose_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules", "modulename": "spacr.submodules", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.submodules.CellposeLazyDataset", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset", "kind": "class", "doc": "<p>An abstract class representing a <code>Dataset</code>.</p>\n\n<p>All datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite <code>__getitem__()</code>, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n<code>__len__()</code>, which is expected to return the size of the dataset by many\n<code>~torch.utils.data.Sampler</code> implementations and the default options\nof <code>~torch.utils.data.DataLoader</code>. Subclasses could also\noptionally implement <code>__getitems__()</code>, for speedup batched samples\nloading. This method accepts list of indices of samples of batch and returns\nlist of samples.</p>\n\n<div class=\"alert note\">\n\n<p>sampler that yields integral indices.  To make it work with a map-style\ndataset with non-integral indices/keys, a custom sampler must be provided.</p>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "spacr.submodules.CellposeLazyDataset.__init__", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_files</span>, </span><span class=\"param\"><span class=\"n\">label_files</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">randomize</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">augment</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "spacr.submodules.CellposeLazyDataset.normalize", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.normalize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.submodules.CellposeLazyDataset.percentiles", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.percentiles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.submodules.CellposeLazyDataset.target_size", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.target_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.submodules.CellposeLazyDataset.augment", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.augment", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.submodules.CellposeLazyDataset.apply_augmentation", "modulename": "spacr.submodules", "qualname": "CellposeLazyDataset.apply_augmentation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">aug_idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.train_cellpose", "modulename": "spacr.submodules", "qualname": "train_cellpose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.test_cellpose_model", "modulename": "spacr.submodules", "qualname": "test_cellpose_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.apply_cellpose_model", "modulename": "spacr.submodules", "qualname": "apply_cellpose_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.plot_cellpose_batch", "modulename": "spacr.submodules", "qualname": "plot_cellpose_batch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.analyze_percent_positive", "modulename": "spacr.submodules", "qualname": "analyze_percent_positive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.analyze_recruitment", "modulename": "spacr.submodules", "qualname": "analyze_recruitment", "kind": "function", "doc": "<p>Analyze recruitment data by grouping the DataFrame by well coordinates and plotting controls and recruitment data.</p>\n\n<p>Parameters:\nsettings (dict): settings.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.analyze_plaques", "modulename": "spacr.submodules", "qualname": "analyze_plaques", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.count_phenotypes", "modulename": "spacr.submodules", "qualname": "count_phenotypes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.compare_reads_to_scores", "modulename": "spacr.submodules", "qualname": "compare_reads_to_scores", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reads_csv</span>,</span><span class=\"param\">\t<span class=\"n\">scores_csv</span>,</span><span class=\"param\">\t<span class=\"n\">empirical_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;r1&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r2&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r3&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r4&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r5&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r6&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r7&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r8&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r9&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r10&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r11&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r12&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r13&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r14&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r15&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span> <span class=\"s1\">&#39;r16&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)}</span>,</span><span class=\"param\">\t<span class=\"n\">pc_grna</span><span class=\"o\">=</span><span class=\"s1\">&#39;TGGT1_220950_1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nc_grna</span><span class=\"o\">=</span><span class=\"s1\">&#39;TGGT1_233460_4&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;class_1_fraction&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;TGGT1_220950_1_fraction&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nc_fraction&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">&#39;columnID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">&#39;c3&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_paths</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.interperate_vision_model", "modulename": "spacr.submodules", "qualname": "interperate_vision_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.analyze_endodyogeny", "modulename": "spacr.submodules", "qualname": "analyze_endodyogeny", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.analyze_class_proportion", "modulename": "spacr.submodules", "qualname": "analyze_class_proportion", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.generate_score_heatmap", "modulename": "spacr.submodules", "qualname": "generate_score_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.submodules.post_regression_analysis", "modulename": "spacr.submodules", "qualname": "post_regression_analysis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_file</span>, </span><span class=\"param\"><span class=\"n\">grna_dict</span>, </span><span class=\"param\"><span class=\"n\">grna_list</span>, </span><span class=\"param\"><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse", "modulename": "spacr.timelapse", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.timelapse.exponential_decay", "modulename": "spacr.timelapse", "qualname": "exponential_decay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.preprocess_pathogen_data", "modulename": "spacr.timelapse", "qualname": "preprocess_pathogen_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pathogen_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.plot_data", "modulename": "spacr.timelapse", "qualname": "plot_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">measurement</span>, </span><span class=\"param\"><span class=\"n\">group</span>, </span><span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">marker</span><span class=\"o\">=</span><span class=\"s1\">&#39;o&#39;</span>, </span><span class=\"param\"><span class=\"n\">linestyle</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.infected_vs_noninfected", "modulename": "spacr.timelapse", "qualname": "infected_vs_noninfected", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">result_df</span>, </span><span class=\"param\"><span class=\"n\">measurement</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.save_figure", "modulename": "spacr.timelapse", "qualname": "save_figure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">figure_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.save_results_dataframe", "modulename": "spacr.timelapse", "qualname": "save_results_dataframe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">results_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.summarize_per_well", "modulename": "spacr.timelapse", "qualname": "summarize_per_well", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">peak_details_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.summarize_per_well_inf_non_inf", "modulename": "spacr.timelapse", "qualname": "summarize_per_well_inf_non_inf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">peak_details_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.timelapse.analyze_calcium_oscillations", "modulename": "spacr.timelapse", "qualname": "analyze_calcium_oscillations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_loc</span>,</span><span class=\"param\">\t<span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"s1\">&#39;cell_channel_1_mean_intensity&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">size_filter</span><span class=\"o\">=</span><span class=\"s1\">&#39;cell_area&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fluctuation_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">pathogen</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cytoplasm</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_transient</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">transience_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.toxo", "modulename": "spacr.toxo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.toxo.custom_volcano_plot", "modulename": "spacr.toxo", "qualname": "custom_volcano_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_path</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_path</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;tagm_location&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">point_size</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">x_lim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">y_lims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.toxo.go_term_enrichment_by_column", "modulename": "spacr.toxo", "qualname": "go_term_enrichment_by_column", "kind": "function", "doc": "<p>Perform GO term enrichment analysis for each GO term column and generate plots.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>significant_df: DataFrame containing the significant genes from the screen.</li>\n<li>metadata_path: Path to the metadata file containing GO terms.</li>\n<li>go_term_columns: List of columns in the metadata corresponding to GO terms.</li>\n</ul>\n\n<p>For each GO term column, this function will:</p>\n\n<ul>\n<li>Split the GO terms by semicolons.</li>\n<li>Count the occurrences of GO terms in the hits and in the background.</li>\n<li>Perform Fisher's exact test for enrichment.</li>\n<li>Plot the enrichment score vs -log10(p-value).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">significant_df</span>,</span><span class=\"param\">\t<span class=\"n\">metadata_path</span>,</span><span class=\"param\">\t<span class=\"n\">go_term_columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;Computed GO Processes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Curated GO Components&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Curated GO Functions&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Curated GO Processes&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.toxo.plot_gene_phenotypes", "modulename": "spacr.toxo", "qualname": "plot_gene_phenotypes", "kind": "function", "doc": "<p>Plot a line graph for the mean phenotype with standard error shading and highlighted genes.</p>\n\n<p>Args:\n    data (pd.DataFrame): The input DataFrame containing gene data.\n    gene_list (list): A list of gene names to highlight on the plot.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">gene_list</span>,</span><span class=\"param\">\t<span class=\"n\">x_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gene ID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;T.gondii GT1 CRISPR Phenotype - Mean Phenotype&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">error_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;T.gondii GT1 CRISPR Phenotype - Standard Error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.toxo.plot_gene_heatmaps", "modulename": "spacr.toxo", "qualname": "plot_gene_heatmaps", "kind": "function", "doc": "<p>Generate a teal-to-white heatmap with the specified columns and genes.</p>\n\n<p>Args:\n    data (pd.DataFrame): The input DataFrame containing gene data.\n    gene_list (list): A list of genes to include in the heatmap.\n    columns (list): A list of column names to visualize as heatmaps.\n    normalize (bool): If True, normalize the values for each gene between 0 and 1.\n    save_path (str): Optional. If provided, the plot will be saved to this path.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">gene_list</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span>,</span><span class=\"param\">\t<span class=\"n\">x_column</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gene ID&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.toxo.generate_score_heatmap", "modulename": "spacr.toxo", "qualname": "generate_score_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils", "modulename": "spacr.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.filepaths_to_database", "modulename": "spacr.utils", "qualname": "filepaths_to_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_paths</span>, </span><span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">source_folder</span>, </span><span class=\"param\"><span class=\"n\">crop_mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.activation_maps_to_database", "modulename": "spacr.utils", "qualname": "activation_maps_to_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img_paths</span>, </span><span class=\"param\"><span class=\"n\">source_folder</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.activation_correlations_to_database", "modulename": "spacr.utils", "qualname": "activation_correlations_to_database", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">img_paths</span>, </span><span class=\"param\"><span class=\"n\">source_folder</span>, </span><span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.calculate_activation_correlations", "modulename": "spacr.utils", "qualname": "calculate_activation_correlations", "kind": "function", "doc": "<p>Calculates Pearson and Manders correlations between input image channels and activation map channels.</p>\n\n<p>Args:\n    inputs: A batch of input images, Tensor of shape (batch_size, channels, height, width)\n    activation_maps: A batch of activation maps, Tensor of shape (batch_size, channels, height, width)\n    file_names: List of file names corresponding to each image in the batch.\n    manders_thresholds: List of intensity percentiles to calculate Manders correlation.</p>\n\n<p>Returns:\n    df_correlations: A DataFrame with columns for pairwise correlations (Pearson and Manders) \n                     between input channels and activation map channels.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inputs</span>, </span><span class=\"param\"><span class=\"n\">activation_maps</span>, </span><span class=\"param\"><span class=\"n\">file_names</span>, </span><span class=\"param\"><span class=\"n\">manders_thresholds</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.load_settings", "modulename": "spacr.utils", "qualname": "load_settings", "kind": "function", "doc": "<p>Convert a CSV file with 'settings_key' and 'settings_value' columns into a dictionary.\nHandles special cases where values are lists, tuples, booleans, None, integers, floats, and nested dictionaries.</p>\n\n<p>Args:\n    csv_file_path (str): The path to the CSV file.\n    show (bool): Whether to display the dataframe (for debugging).\n    setting_key (str): The name of the column that contains the setting keys.\n    setting_value (str): The name of the column that contains the setting values.</p>\n\n<p>Returns:\n    dict: A dictionary where 'settings_key' are the keys and 'settings_value' are the values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">csv_file_path</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">setting_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;setting_key&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">setting_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;setting_value&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.save_settings", "modulename": "spacr.utils", "qualname": "save_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;settings&#39;</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.print_progress", "modulename": "spacr.utils", "qualname": "print_progress", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">files_processed</span>,</span><span class=\"param\">\t<span class=\"n\">files_to_process</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span>,</span><span class=\"param\">\t<span class=\"n\">time_ls</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">operation_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.reset_mp", "modulename": "spacr.utils", "qualname": "reset_mp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.is_multiprocessing_process", "modulename": "spacr.utils", "qualname": "is_multiprocessing_process", "kind": "function", "doc": "<p>Check if the process is a multiprocessing process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">process</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.close_file_descriptors", "modulename": "spacr.utils", "qualname": "close_file_descriptors", "kind": "function", "doc": "<p>Close file descriptors and shared memory objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.close_multiprocessing_processes", "modulename": "spacr.utils", "qualname": "close_multiprocessing_processes", "kind": "function", "doc": "<p>Close all multiprocessing processes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.check_mask_folder", "modulename": "spacr.utils", "qualname": "check_mask_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">mask_fldr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.smooth_hull_lines", "modulename": "spacr.utils", "qualname": "smooth_hull_lines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.mask_object_count", "modulename": "spacr.utils", "qualname": "mask_object_count", "kind": "function", "doc": "<p>Counts the number of objects in a given mask.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>mask: numpy.ndarray. The mask containing object labels.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>int. The number of objects in the mask.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.is_list_of_lists", "modulename": "spacr.utils", "qualname": "is_list_of_lists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">var</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.normalize_to_dtype", "modulename": "spacr.utils", "qualname": "normalize_to_dtype", "kind": "function", "doc": "<p>Normalize each image in the stack to its own percentiles.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>array: numpy array\nThe input stack to be normalized.</li>\n<li>p1: int, optional\nThe lower percentile value for normalization. Default is 2.</li>\n<li>p2: int, optional\nThe upper percentile value for normalization. Default is 98.</li>\n<li>percentile_list: list, optional\nA list of pre-calculated percentiles for each image in the stack. Default is None.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>new_stack: numpy array\nThe normalized stack with the same shape as the input stack.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"mi\">98</span>, </span><span class=\"param\"><span class=\"n\">percentile_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.annotate_conditions", "modulename": "spacr.utils", "qualname": "annotate_conditions", "kind": "function", "doc": "<p>Annotates conditions in a DataFrame based on specified criteria and combines them into a 'condition' column.\nNaN is used for missing values, and they are excluded from the 'condition' column.</p>\n\n<p>Args:\n    df (pandas.DataFrame): The DataFrame to annotate.\n    cells (list/str, optional): Host cell types. Defaults to None.\n    cell_loc (list of lists, optional): Values for each host cell type. Defaults to None.\n    pathogens (list/str, optional): Pathogens. Defaults to None.\n    pathogen_loc (list of lists, optional): Values for each pathogen. Defaults to None.\n    treatments (list/str, optional): Treatments. Defaults to None.\n    treatment_loc (list of lists, optional): Values for each treatment. Defaults to None.</p>\n\n<p>Returns:\n    pandas.DataFrame: Annotated DataFrame with a combined 'condition' column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cell_loc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pathogens</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pathogen_loc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">treatments</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">treatment_loc</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.Cache", "modulename": "spacr.utils", "qualname": "Cache", "kind": "class", "doc": "<p>A class representing a cache with a maximum size.</p>\n\n<p>Attributes:\n    max_size (int): The maximum size of the cache.\n    cache (OrderedDict): The cache data structure.</p>\n"}, {"fullname": "spacr.utils.Cache.__init__", "modulename": "spacr.utils", "qualname": "Cache.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">max_size</span></span>)</span>"}, {"fullname": "spacr.utils.Cache.cache", "modulename": "spacr.utils", "qualname": "Cache.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.Cache.max_size", "modulename": "spacr.utils", "qualname": "Cache.max_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.Cache.get", "modulename": "spacr.utils", "qualname": "Cache.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.Cache.put", "modulename": "spacr.utils", "qualname": "Cache.put", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.ScaledDotProductAttention", "modulename": "spacr.utils", "qualname": "ScaledDotProductAttention", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.ScaledDotProductAttention.__init__", "modulename": "spacr.utils", "qualname": "ScaledDotProductAttention.__init__", "kind": "function", "doc": "<p>Initializes the ScaledDotProductAttention module.</p>\n\n<p>Args:\n    d_k (int): The dimension of the key and query vectors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d_k</span></span>)</span>"}, {"fullname": "spacr.utils.ScaledDotProductAttention.d_k", "modulename": "spacr.utils", "qualname": "ScaledDotProductAttention.d_k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.ScaledDotProductAttention.forward", "modulename": "spacr.utils", "qualname": "ScaledDotProductAttention.forward", "kind": "function", "doc": "<p>Performs the forward pass of the ScaledDotProductAttention module.</p>\n\n<p>Args:\n    Q (torch.Tensor): The query tensor.\n    K (torch.Tensor): The key tensor.\n    V (torch.Tensor): The value tensor.</p>\n\n<p>Returns:\n    torch.Tensor: The output tensor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Q</span>, </span><span class=\"param\"><span class=\"n\">K</span>, </span><span class=\"param\"><span class=\"n\">V</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SelfAttention", "modulename": "spacr.utils", "qualname": "SelfAttention", "kind": "class", "doc": "<p>Self-Attention module that applies scaled dot-product attention mechanism.</p>\n\n<p>Args:\n    in_channels (int): Number of input channels.\n    d_k (int): Dimensionality of the key and query vectors.</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.SelfAttention.__init__", "modulename": "spacr.utils", "qualname": "SelfAttention.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_channels</span>, </span><span class=\"param\"><span class=\"n\">d_k</span></span>)</span>"}, {"fullname": "spacr.utils.SelfAttention.W_q", "modulename": "spacr.utils", "qualname": "SelfAttention.W_q", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SelfAttention.W_k", "modulename": "spacr.utils", "qualname": "SelfAttention.W_k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SelfAttention.W_v", "modulename": "spacr.utils", "qualname": "SelfAttention.W_v", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SelfAttention.attention", "modulename": "spacr.utils", "qualname": "SelfAttention.attention", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SelfAttention.forward", "modulename": "spacr.utils", "qualname": "SelfAttention.forward", "kind": "function", "doc": "<p>Forward pass of the SelfAttention module.</p>\n\n<p>Args:\n    x (torch.Tensor): Input tensor of shape (batch_size, in_channels).</p>\n\n<p>Returns:\n    torch.Tensor: Output tensor after applying self-attention mechanism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.EarlyFusion", "modulename": "spacr.utils", "qualname": "EarlyFusion", "kind": "class", "doc": "<p>Early Fusion module for image classification.</p>\n\n<p>Args:\n    in_channels (int): Number of input channels.</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.EarlyFusion.__init__", "modulename": "spacr.utils", "qualname": "EarlyFusion.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_channels</span></span>)</span>"}, {"fullname": "spacr.utils.EarlyFusion.conv1", "modulename": "spacr.utils", "qualname": "EarlyFusion.conv1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.EarlyFusion.forward", "modulename": "spacr.utils", "qualname": "EarlyFusion.forward", "kind": "function", "doc": "<p>Forward pass of the Early Fusion module.</p>\n\n<p>Args:\n    x (torch.Tensor): Input tensor of shape (batch_size, in_channels, height, width).</p>\n\n<p>Returns:\n    torch.Tensor: Output tensor of shape (batch_size, 64, height, width).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SpatialAttention", "modulename": "spacr.utils", "qualname": "SpatialAttention", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.SpatialAttention.__init__", "modulename": "spacr.utils", "qualname": "SpatialAttention.__init__", "kind": "function", "doc": "<p>Initializes the SpatialAttention module.</p>\n\n<p>Args:\n    kernel_size (int): The size of the convolutional kernel. Default is 7.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">7</span></span>)</span>"}, {"fullname": "spacr.utils.SpatialAttention.conv1", "modulename": "spacr.utils", "qualname": "SpatialAttention.conv1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SpatialAttention.sigmoid", "modulename": "spacr.utils", "qualname": "SpatialAttention.sigmoid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SpatialAttention.forward", "modulename": "spacr.utils", "qualname": "SpatialAttention.forward", "kind": "function", "doc": "<p>Performs forward pass of the SpatialAttention module.</p>\n\n<p>Args:\n    x (torch.Tensor): The input tensor.</p>\n\n<p>Returns:\n    torch.Tensor: The output tensor after applying spatial attention.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention.__init__", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">in_channels</span>, </span><span class=\"param\"><span class=\"n\">out_channels</span></span>)</span>"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention.dilated_conv1", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention.dilated_conv1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention.spatial_attention", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention.spatial_attention", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention.custom_forward", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention.custom_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.MultiScaleBlockWithAttention.forward", "modulename": "spacr.utils", "qualname": "MultiScaleBlockWithAttention.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.CustomCellClassifier", "modulename": "spacr.utils", "qualname": "CustomCellClassifier", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.CustomCellClassifier.__init__", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_classes</span>,</span><span class=\"param\">\t<span class=\"n\">pathogen_channel</span>,</span><span class=\"param\">\t<span class=\"n\">use_attention</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span></span>)</span>"}, {"fullname": "spacr.utils.CustomCellClassifier.early_fusion", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.early_fusion", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.CustomCellClassifier.multi_scale_block_1", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.multi_scale_block_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.CustomCellClassifier.fc1", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.fc1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.CustomCellClassifier.use_checkpoint", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.use_checkpoint", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.CustomCellClassifier.custom_forward", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.custom_forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.CustomCellClassifier.forward", "modulename": "spacr.utils", "qualname": "CustomCellClassifier.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel", "modulename": "spacr.utils", "qualname": "TorchModel", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.TorchModel.__init__", "modulename": "spacr.utils", "qualname": "TorchModel.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;resnet50&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "spacr.utils.TorchModel.model_name", "modulename": "spacr.utils", "qualname": "TorchModel.model_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.TorchModel.use_checkpoint", "modulename": "spacr.utils", "qualname": "TorchModel.use_checkpoint", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.TorchModel.base_model", "modulename": "spacr.utils", "qualname": "TorchModel.base_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.TorchModel.num_ftrs", "modulename": "spacr.utils", "qualname": "TorchModel.num_ftrs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.TorchModel.apply_dropout_rate", "modulename": "spacr.utils", "qualname": "TorchModel.apply_dropout_rate", "kind": "function", "doc": "<p>Apply dropout rate to all dropout layers in the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">dropout_rate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel.init_base_model", "modulename": "spacr.utils", "qualname": "TorchModel.init_base_model", "kind": "function", "doc": "<p>Initialize the base model from torchvision.models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pretrained</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel.get_weight_choice", "modulename": "spacr.utils", "qualname": "TorchModel.get_weight_choice", "kind": "function", "doc": "<p>Get weight choice if it exists for the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel.get_num_ftrs", "modulename": "spacr.utils", "qualname": "TorchModel.get_num_ftrs", "kind": "function", "doc": "<p>Determine the number of features output by the base model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel.init_spacr_classifier", "modulename": "spacr.utils", "qualname": "TorchModel.init_spacr_classifier", "kind": "function", "doc": "<p>Initialize the SPACR classifier.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dropout_rate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.TorchModel.forward", "modulename": "spacr.utils", "qualname": "TorchModel.forward", "kind": "function", "doc": "<p>Define the forward pass of the model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.FocalLossWithLogits", "modulename": "spacr.utils", "qualname": "FocalLossWithLogits", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.FocalLossWithLogits.__init__", "modulename": "spacr.utils", "qualname": "FocalLossWithLogits.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">2</span></span>)</span>"}, {"fullname": "spacr.utils.FocalLossWithLogits.alpha", "modulename": "spacr.utils", "qualname": "FocalLossWithLogits.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.FocalLossWithLogits.gamma", "modulename": "spacr.utils", "qualname": "FocalLossWithLogits.gamma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.FocalLossWithLogits.forward", "modulename": "spacr.utils", "qualname": "FocalLossWithLogits.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">logits</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.ResNet", "modulename": "spacr.utils", "qualname": "ResNet", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "spacr.utils.ResNet.__init__", "modulename": "spacr.utils", "qualname": "ResNet.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">resnet_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;resnet50&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">init_weights</span><span class=\"o\">=</span><span class=\"s1\">&#39;imagenet&#39;</span></span>)</span>"}, {"fullname": "spacr.utils.ResNet.initialize_base", "modulename": "spacr.utils", "qualname": "ResNet.initialize_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">base_model_dict</span>, </span><span class=\"param\"><span class=\"n\">dropout_rate</span>, </span><span class=\"param\"><span class=\"n\">use_checkpoint</span>, </span><span class=\"param\"><span class=\"n\">init_weights</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.ResNet.forward", "modulename": "spacr.utils", "qualname": "ResNet.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.split_my_dataset", "modulename": "spacr.utils", "qualname": "split_my_dataset", "kind": "function", "doc": "<p>Splits a dataset into training and validation subsets.</p>\n\n<p>Args:\n    dataset (torch.utils.data.Dataset): The dataset to be split.\n    split_ratio (float, optional): The ratio of validation samples to total samples. Defaults to 0.1.</p>\n\n<p>Returns:\n    tuple: A tuple containing the training dataset and validation dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">split_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.classification_metrics", "modulename": "spacr.utils", "qualname": "classification_metrics", "kind": "function", "doc": "<p>Calculate classification metrics for binary classification.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>all_labels (list): List of true labels.</li>\n<li>prediction_pos_probs (list): List of predicted positive probabilities.</li>\n<li>loader_name (str): Name of the data loader.</li>\n<li>loss (float): Loss value.</li>\n<li>epoch (int): Epoch number.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>data_df (DataFrame): DataFrame containing the calculated metrics.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">all_labels</span>, </span><span class=\"param\"><span class=\"n\">prediction_pos_probs</span>, </span><span class=\"param\"><span class=\"n\">loss</span>, </span><span class=\"param\"><span class=\"n\">epoch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.compute_irm_penalty", "modulename": "spacr.utils", "qualname": "compute_irm_penalty", "kind": "function", "doc": "<p>Computes the Invariant Risk Minimization (IRM) penalty.</p>\n\n<p>Args:\n    losses (list): A list of losses.\n    dummy_w (torch.Tensor): A dummy weight tensor.\n    device (torch.device): The device to perform computations on.</p>\n\n<p>Returns:\n    float: The computed IRM penalty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">losses</span>, </span><span class=\"param\"><span class=\"n\">dummy_w</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.choose_model", "modulename": "spacr.utils", "qualname": "choose_model", "kind": "function", "doc": "<p>Choose a model for classification.</p>\n\n<p>Args:\n    model_type (str): The type of model to choose. Can be one of the pre-defined TorchVision models or 'custom' for a custom model.\n    device (str): The device to use for model inference.\n    init_weights (bool, optional): Whether to initialize the model with pre-trained weights. Defaults to True.\n    dropout_rate (float, optional): The dropout rate to use in the model. Defaults to 0.\n    use_checkpoint (bool, optional): Whether to use checkpointing during model training. Defaults to False.\n    channels (int, optional): The number of input channels for the model. Defaults to 3.\n    height (int, optional): The height of the input images for the model. Defaults to 224.\n    width (int, optional): The width of the input images for the model. Defaults to 224.\n    chan_dict (dict, optional): A dictionary containing channel information for custom models. Defaults to None.\n    num_classes (int, optional): The number of output classes for the model. Defaults to 2.</p>\n\n<p>Returns:\n    torch.nn.Module: The chosen model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_type</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">init_weights</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">use_checkpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">chan_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_classes</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.calculate_loss", "modulename": "spacr.utils", "qualname": "calculate_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"n\">loss_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;binary_cross_entropy_with_logits&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.pick_best_model", "modulename": "spacr.utils", "qualname": "pick_best_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_paths_from_db", "modulename": "spacr.utils", "qualname": "get_paths_from_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">png_df</span>, </span><span class=\"param\"><span class=\"n\">image_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cell_png&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.save_file_lists", "modulename": "spacr.utils", "qualname": "save_file_lists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">data_set</span>, </span><span class=\"param\"><span class=\"n\">ls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.augment_single_image", "modulename": "spacr.utils", "qualname": "augment_single_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.augment_images", "modulename": "spacr.utils", "qualname": "augment_images", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_paths</span>, </span><span class=\"param\"><span class=\"n\">dst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.augment_classes", "modulename": "spacr.utils", "qualname": "augment_classes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dst</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">generate</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">move</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.annotate_predictions", "modulename": "spacr.utils", "qualname": "annotate_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">csv_loc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.initiate_counter", "modulename": "spacr.utils", "qualname": "initiate_counter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">counter_</span>, </span><span class=\"param\"><span class=\"n\">lock_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.add_images_to_tar", "modulename": "spacr.utils", "qualname": "add_images_to_tar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">paths_chunk</span>, </span><span class=\"param\"><span class=\"n\">tar_path</span>, </span><span class=\"param\"><span class=\"n\">total_images</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.generate_fraction_map", "modulename": "spacr.utils", "qualname": "generate_fraction_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">gene_column</span>, </span><span class=\"param\"><span class=\"n\">min_frequency</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.fishers_odds", "modulename": "spacr.utils", "qualname": "fishers_odds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">phenotyp_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean_pred&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.model_metrics", "modulename": "spacr.utils", "qualname": "model_metrics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.check_multicollinearity", "modulename": "spacr.utils", "qualname": "check_multicollinearity", "kind": "function", "doc": "<p>Checks multicollinearity of the predictors by computing the VIF.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.lasso_reg", "modulename": "spacr.utils", "qualname": "lasso_reg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">merged_df</span>, </span><span class=\"param\"><span class=\"n\">alpha_value</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">reg_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;lasso&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.MLR", "modulename": "spacr.utils", "qualname": "MLR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">merged_df</span>, </span><span class=\"param\"><span class=\"n\">refine_model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_files_from_dir", "modulename": "spacr.utils", "qualname": "get_files_from_dir", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dir_path</span>, </span><span class=\"param\"><span class=\"n\">file_extension</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.create_circular_mask", "modulename": "spacr.utils", "qualname": "create_circular_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.apply_mask", "modulename": "spacr.utils", "qualname": "apply_mask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">output_value</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.invert_image", "modulename": "spacr.utils", "qualname": "invert_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.resize_images_and_labels", "modulename": "spacr.utils", "qualname": "resize_images_and_labels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">target_height</span>, </span><span class=\"param\"><span class=\"n\">target_width</span>, </span><span class=\"param\"><span class=\"n\">show_example</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.resize_labels_back", "modulename": "spacr.utils", "qualname": "resize_labels_back", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">orig_dims</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.calculate_iou", "modulename": "spacr.utils", "qualname": "calculate_iou", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask1</span>, </span><span class=\"param\"><span class=\"n\">mask2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.match_masks", "modulename": "spacr.utils", "qualname": "match_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">true_masks</span>, </span><span class=\"param\"><span class=\"n\">pred_masks</span>, </span><span class=\"param\"><span class=\"n\">iou_threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.compute_average_precision", "modulename": "spacr.utils", "qualname": "compute_average_precision", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matches</span>, </span><span class=\"param\"><span class=\"n\">num_true_masks</span>, </span><span class=\"param\"><span class=\"n\">num_pred_masks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.pad_to_same_shape", "modulename": "spacr.utils", "qualname": "pad_to_same_shape", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask1</span>, </span><span class=\"param\"><span class=\"n\">mask2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.compute_ap_over_iou_thresholds", "modulename": "spacr.utils", "qualname": "compute_ap_over_iou_thresholds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">true_masks</span>, </span><span class=\"param\"><span class=\"n\">pred_masks</span>, </span><span class=\"param\"><span class=\"n\">iou_thresholds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.compute_segmentation_ap", "modulename": "spacr.utils", "qualname": "compute_segmentation_ap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">true_masks</span>,</span><span class=\"param\">\t<span class=\"n\">pred_masks</span>,</span><span class=\"param\">\t<span class=\"n\">iou_thresholds</span><span class=\"o\">=</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.5</span> <span class=\"p\">,</span> <span class=\"mf\">0.55</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span> <span class=\"p\">,</span> <span class=\"mf\">0.65</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span> <span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span> <span class=\"p\">,</span> <span class=\"mf\">0.85</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span> <span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">])</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.jaccard_index", "modulename": "spacr.utils", "qualname": "jaccard_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask1</span>, </span><span class=\"param\"><span class=\"n\">mask2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.dice_coefficient", "modulename": "spacr.utils", "qualname": "dice_coefficient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask1</span>, </span><span class=\"param\"><span class=\"n\">mask2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.extract_boundaries", "modulename": "spacr.utils", "qualname": "extract_boundaries", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">dilation_radius</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.boundary_f1_score", "modulename": "spacr.utils", "qualname": "boundary_f1_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask_true</span>, </span><span class=\"param\"><span class=\"n\">mask_pred</span>, </span><span class=\"param\"><span class=\"n\">dilation_radius</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.merge_touching_objects", "modulename": "spacr.utils", "qualname": "merge_touching_objects", "kind": "function", "doc": "<p>Merges touching objects in a binary mask based on the percentage of their shared boundary.</p>\n\n<p>Args:\n    mask (ndarray): Binary mask representing objects.\n    threshold (float, optional): Threshold value for merging objects. Defaults to 0.25.</p>\n\n<p>Returns:\n    ndarray: Merged mask.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.25</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.remove_intensity_objects", "modulename": "spacr.utils", "qualname": "remove_intensity_objects", "kind": "function", "doc": "<p>Removes objects from the mask based on their mean intensity in the original image.</p>\n\n<p>Args:\n    image (ndarray): The original image.\n    mask (ndarray): The mask containing labeled objects.\n    intensity_threshold (float): The threshold value for mean intensity.\n    mode (str): The mode for intensity comparison. Can be 'low' or 'high'.</p>\n\n<p>Returns:\n    ndarray: The updated mask with objects removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">mask</span>, </span><span class=\"param\"><span class=\"n\">intensity_threshold</span>, </span><span class=\"param\"><span class=\"n\">mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SelectChannels", "modulename": "spacr.utils", "qualname": "SelectChannels", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SelectChannels.__init__", "modulename": "spacr.utils", "qualname": "SelectChannels.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channels</span></span>)</span>"}, {"fullname": "spacr.utils.SelectChannels.channels", "modulename": "spacr.utils", "qualname": "SelectChannels.channels", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.preprocess_image", "modulename": "spacr.utils", "qualname": "preprocess_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>, </span><span class=\"param\"><span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SaliencyMapGenerator", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SaliencyMapGenerator.__init__", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span>)</span>"}, {"fullname": "spacr.utils.SaliencyMapGenerator.model", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.SaliencyMapGenerator.compute_saliency_maps", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.compute_saliency_maps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SaliencyMapGenerator.compute_saliency_and_predictions", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.compute_saliency_and_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SaliencyMapGenerator.plot_activation_grid", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.plot_activation_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">saliency</span>, </span><span class=\"param\"><span class=\"n\">predictions</span>, </span><span class=\"param\"><span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.SaliencyMapGenerator.percentile_normalize", "modulename": "spacr.utils", "qualname": "SaliencyMapGenerator.percentile_normalize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">lower_percentile</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">upper_percentile</span><span class=\"o\">=</span><span class=\"mi\">98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator", "modulename": "spacr.utils", "qualname": "GradCAMGenerator", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.__init__", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">target_layer</span>, </span><span class=\"param\"><span class=\"n\">cam_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;gradcam&#39;</span></span>)</span>"}, {"fullname": "spacr.utils.GradCAMGenerator.model", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.target_layer", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.target_layer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.cam_type", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.cam_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.gradients", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.gradients", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.activations", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.activations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.target_layer_module", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.target_layer_module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAMGenerator.hook_layers", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.hook_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator.get_layer", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.get_layer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">target_layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator.compute_gradcam_maps", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.compute_gradcam_maps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator.compute_gradcam_and_predictions", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.compute_gradcam_and_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator.plot_activation_grid", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.plot_activation_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">gradcam</span>, </span><span class=\"param\"><span class=\"n\">predictions</span>, </span><span class=\"param\"><span class=\"n\">overlay</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAMGenerator.percentile_normalize", "modulename": "spacr.utils", "qualname": "GradCAMGenerator.percentile_normalize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">lower_percentile</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">upper_percentile</span><span class=\"o\">=</span><span class=\"mi\">98</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.class_visualization", "modulename": "spacr.utils", "qualname": "class_visualization", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target_y</span>,</span><span class=\"param\">\t<span class=\"n\">model_path</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span>,</span><span class=\"param\">\t<span class=\"n\">img_size</span><span class=\"o\">=</span><span class=\"mi\">224</span>,</span><span class=\"param\">\t<span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">l2_reg</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">num_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">blur_every</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">max_jitter</span><span class=\"o\">=</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">show_every</span><span class=\"o\">=</span><span class=\"mi\">25</span>,</span><span class=\"param\">\t<span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;nc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pc&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_submodules", "modulename": "spacr.utils", "qualname": "get_submodules", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.GradCAM", "modulename": "spacr.utils", "qualname": "GradCAM", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAM.__init__", "modulename": "spacr.utils", "qualname": "GradCAM.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">target_layers</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">use_cuda</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "spacr.utils.GradCAM.model", "modulename": "spacr.utils", "qualname": "GradCAM.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAM.target_layers", "modulename": "spacr.utils", "qualname": "GradCAM.target_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAM.cuda", "modulename": "spacr.utils", "qualname": "GradCAM.cuda", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.GradCAM.forward", "modulename": "spacr.utils", "qualname": "GradCAM.forward", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.show_cam_on_image", "modulename": "spacr.utils", "qualname": "show_cam_on_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.recommend_target_layers", "modulename": "spacr.utils", "qualname": "recommend_target_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.IntegratedGradients", "modulename": "spacr.utils", "qualname": "IntegratedGradients", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.IntegratedGradients.__init__", "modulename": "spacr.utils", "qualname": "IntegratedGradients.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span>)</span>"}, {"fullname": "spacr.utils.IntegratedGradients.model", "modulename": "spacr.utils", "qualname": "IntegratedGradients.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "spacr.utils.IntegratedGradients.generate_integrated_gradients", "modulename": "spacr.utils", "qualname": "IntegratedGradients.generate_integrated_gradients", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_tensor</span>, </span><span class=\"param\"><span class=\"n\">target_label_idx</span>, </span><span class=\"param\"><span class=\"n\">baseline</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_steps</span><span class=\"o\">=</span><span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_db_paths", "modulename": "spacr.utils", "qualname": "get_db_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_sequencing_paths", "modulename": "spacr.utils", "qualname": "get_sequencing_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.load_image_paths", "modulename": "spacr.utils", "qualname": "load_image_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">c</span>, </span><span class=\"param\"><span class=\"n\">visualize</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.merge_dataframes", "modulename": "spacr.utils", "qualname": "merge_dataframes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">image_paths_df</span>, </span><span class=\"param\"><span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.remove_highly_correlated_columns", "modulename": "spacr.utils", "qualname": "remove_highly_correlated_columns", "kind": "function", "doc": "<p>Removes columns from the dataframe that are highly correlated with one another.</p>\n\n<p>Parameters:\ndf (pandas.DataFrame): The DataFrame containing the data.\nthreshold (float): The correlation threshold above which columns will be removed.</p>\n\n<p>Returns:\npandas.DataFrame: The DataFrame with highly correlated columns removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.95</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.filter_columns", "modulename": "spacr.utils", "qualname": "filter_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">filter_by</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.reduction_and_clustering", "modulename": "spacr.utils", "qualname": "reduction_and_clustering", "kind": "function", "doc": "<p>Perform dimensionality reduction and clustering on the given data.</p>\n\n<p>Parameters:\nnumeric_data (np.ndarray): Numeric data for embedding and clustering.\nn_neighbors (int or float): Number of neighbors for UMAP or perplexity for t-SNE.\nmin_dist (float): Minimum distance for UMAP.\nmetric (str): Metric for UMAP and DBSCAN.\neps (float): Epsilon for DBSCAN.\nmin_samples (int): Minimum samples for DBSCAN or number of clusters for KMeans.\nclustering (str): Clustering method ('DBSCAN' or 'KMeans').\nreduction_method (str): Dimensionality reduction method ('UMAP' or 'tSNE').\nverbose (bool): Whether to print verbose output.\nembedding (np.ndarray, optional): Precomputed embedding. Default is None.\nreturn_model (bool): Whether to return the reducer model. Default is False.</p>\n\n<p>Returns:\ntuple: embedding, labels (and optionally the reducer model)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numeric_data</span>,</span><span class=\"param\">\t<span class=\"n\">n_neighbors</span>,</span><span class=\"param\">\t<span class=\"n\">min_dist</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples</span>,</span><span class=\"param\">\t<span class=\"n\">clustering</span>,</span><span class=\"param\">\t<span class=\"n\">reduction_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;umap&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">embedding</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;fit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.remove_noise", "modulename": "spacr.utils", "qualname": "remove_noise", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">embedding</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_embedding", "modulename": "spacr.utils", "qualname": "plot_embedding", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">embedding</span>,</span><span class=\"param\">\t<span class=\"n\">image_paths</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">image_nr</span>,</span><span class=\"param\">\t<span class=\"n\">img_zoom</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span>,</span><span class=\"param\">\t<span class=\"n\">plot_by_cluster</span>,</span><span class=\"param\">\t<span class=\"n\">plot_outlines</span>,</span><span class=\"param\">\t<span class=\"n\">plot_points</span>,</span><span class=\"param\">\t<span class=\"n\">plot_images</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_lines</span>,</span><span class=\"param\">\t<span class=\"n\">black_background</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span>,</span><span class=\"param\">\t<span class=\"n\">dot_size</span>,</span><span class=\"param\">\t<span class=\"n\">remove_image_canvas</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.generate_colors", "modulename": "spacr.utils", "qualname": "generate_colors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_clusters</span>, </span><span class=\"param\"><span class=\"n\">black_background</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.assign_colors", "modulename": "spacr.utils", "qualname": "assign_colors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unique_labels</span>, </span><span class=\"param\"><span class=\"n\">random_colors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.setup_plot", "modulename": "spacr.utils", "qualname": "setup_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">figuresize</span>, </span><span class=\"param\"><span class=\"n\">black_background</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_clusters", "modulename": "spacr.utils", "qualname": "plot_clusters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">embedding</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_centers</span>,</span><span class=\"param\">\t<span class=\"n\">plot_outlines</span>,</span><span class=\"param\">\t<span class=\"n\">plot_points</span>,</span><span class=\"param\">\t<span class=\"n\">smooth_lines</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">dot_size</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_umap_images", "modulename": "spacr.utils", "qualname": "plot_umap_images", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">image_paths</span>,</span><span class=\"param\">\t<span class=\"n\">embedding</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">image_nr</span>,</span><span class=\"param\">\t<span class=\"n\">img_zoom</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span>,</span><span class=\"param\">\t<span class=\"n\">plot_by_cluster</span>,</span><span class=\"param\">\t<span class=\"n\">remove_image_canvas</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_images_by_cluster", "modulename": "spacr.utils", "qualname": "plot_images_by_cluster", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ax</span>,</span><span class=\"param\">\t<span class=\"n\">image_paths</span>,</span><span class=\"param\">\t<span class=\"n\">embedding</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">image_nr</span>,</span><span class=\"param\">\t<span class=\"n\">img_zoom</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_indices</span>,</span><span class=\"param\">\t<span class=\"n\">remove_image_canvas</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_image", "modulename": "spacr.utils", "qualname": "plot_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">img</span>, </span><span class=\"param\"><span class=\"n\">img_zoom</span>, </span><span class=\"param\"><span class=\"n\">remove_image_canvas</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.remove_canvas", "modulename": "spacr.utils", "qualname": "remove_canvas", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">img</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_clusters_grid", "modulename": "spacr.utils", "qualname": "plot_clusters_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">embedding</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">image_nr</span>,</span><span class=\"param\">\t<span class=\"n\">image_paths</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span>,</span><span class=\"param\">\t<span class=\"n\">figuresize</span>,</span><span class=\"param\">\t<span class=\"n\">black_background</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.plot_grid", "modulename": "spacr.utils", "qualname": "plot_grid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_images</span>, </span><span class=\"param\"><span class=\"n\">colors</span>, </span><span class=\"param\"><span class=\"n\">figuresize</span>, </span><span class=\"param\"><span class=\"n\">black_background</span>, </span><span class=\"param\"><span class=\"n\">verbose</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.generate_path_list_from_db", "modulename": "spacr.utils", "qualname": "generate_path_list_from_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span>, </span><span class=\"param\"><span class=\"n\">file_metadata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.correct_paths", "modulename": "spacr.utils", "qualname": "correct_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">base_path</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.delete_folder", "modulename": "spacr.utils", "qualname": "delete_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.measure_test_mode", "modulename": "spacr.utils", "qualname": "measure_test_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.preprocess_data", "modulename": "spacr.utils", "qualname": "preprocess_data", "kind": "function", "doc": "<p>Preprocesses the given dataframe by applying filtering, removing highly correlated columns,\napplying log transformation, filling NaN values, and scaling the numeric data.</p>\n\n<p>Args:\ndf (pandas.DataFrame): The input dataframe.\nfilter_by (str or None): The channel of interest to filter the dataframe by.\nremove_highly_correlated (bool or float): Whether to remove highly correlated columns.\nIf a float is provided, it represents the correlation threshold.\nlog_data (bool): Whether to apply log transformation to the numeric data.\nexclude (list or None): List of features to exclude from the filtering process.\nverbose (bool): Whether to print verbose output during preprocessing.</p>\n\n<p>Returns:\nnumpy.ndarray: The preprocessed numeric data.</p>\n\n<p>Raises:\nValueError: If no numeric columns are available after filtering.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">filter_by</span>,</span><span class=\"param\">\t<span class=\"n\">remove_highly_correlated</span>,</span><span class=\"param\">\t<span class=\"n\">log_data</span>,</span><span class=\"param\">\t<span class=\"n\">exclude</span>,</span><span class=\"param\">\t<span class=\"n\">column_list</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.remove_low_variance_columns", "modulename": "spacr.utils", "qualname": "remove_low_variance_columns", "kind": "function", "doc": "<p>Removes columns from the dataframe that have low variance.</p>\n\n<p>Parameters:\ndf (pandas.DataFrame): The DataFrame containing the data.\nthreshold (float): The variance threshold below which columns will be removed.</p>\n\n<p>Returns:\npandas.DataFrame: The DataFrame with low variance columns removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.filter_dataframe_features", "modulename": "spacr.utils", "qualname": "filter_dataframe_features", "kind": "function", "doc": "<p>Filter the dataframe <code>df</code> based on the specified <code>channel_of_interest</code> and <code>exclude</code> parameters.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df (pandas.DataFrame): The input dataframe to be filtered.</li>\n<li>channel_of_interest (str, int, list, None): The channel(s) of interest to filter the dataframe. If None, no filtering is applied. If 'morphology', only morphology features are included.If an integer, only the specified channel is included. If a list, only the specified channels are included.If a string, only the specified channel is included.</li>\n<li>exclude (str, list, None): The feature(s) to exclude from the filtered dataframe. If None, no features are excluded. If a string, the specified feature is excluded.If a list, the specified features are excluded.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>filtered_df (pandas.DataFrame): The filtered dataframe based on the specified parameters.</li>\n<li>features (list): The list of selected features after filtering.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">channel_of_interest</span>,</span><span class=\"param\">\t<span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">remove_low_variance_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">remove_highly_correlated_features</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.check_overlap", "modulename": "spacr.utils", "qualname": "check_overlap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">current_position</span>, </span><span class=\"param\"><span class=\"n\">other_positions</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.find_non_overlapping_position", "modulename": "spacr.utils", "qualname": "find_non_overlapping_position", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">image_positions</span>, </span><span class=\"param\"><span class=\"n\">threshold</span>, </span><span class=\"param\"><span class=\"n\">max_attempts</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.search_reduction_and_clustering", "modulename": "spacr.utils", "qualname": "search_reduction_and_clustering", "kind": "function", "doc": "<p>Perform dimensionality reduction and clustering on the given data.</p>\n\n<p>Parameters:\nnumeric_data (np.array): Numeric data to process.\nn_neighbors (int): Number of neighbors for UMAP or perplexity for tSNE.\nmin_dist (float): Minimum distance for UMAP.\nmetric (str): Metric for UMAP, tSNE, and DBSCAN.\neps (float): Epsilon for DBSCAN clustering.\nmin_samples (int): Minimum samples for DBSCAN or number of clusters for KMeans.\nclustering (str): Clustering method ('DBSCAN' or 'KMeans').\nreduction_method (str): Dimensionality reduction method ('UMAP' or 'tSNE').\nverbose (bool): Whether to print verbose output.\nreduction_param (dict): Additional parameters for the reduction method.\nembedding (np.array): Precomputed embedding (optional).\nn_jobs (int): Number of parallel jobs to run.</p>\n\n<p>Returns:\nembedding (np.array): Embedding of the data.\nlabels (np.array): Cluster labels.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numeric_data</span>,</span><span class=\"param\">\t<span class=\"n\">n_neighbors</span>,</span><span class=\"param\">\t<span class=\"n\">min_dist</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span>,</span><span class=\"param\">\t<span class=\"n\">min_samples</span>,</span><span class=\"param\">\t<span class=\"n\">clustering</span>,</span><span class=\"param\">\t<span class=\"n\">reduction_method</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span>,</span><span class=\"param\">\t<span class=\"n\">reduction_param</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">embedding</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.load_image", "modulename": "spacr.utils", "qualname": "load_image", "kind": "function", "doc": "<p>Load and preprocess an image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.extract_features", "modulename": "spacr.utils", "qualname": "extract_features", "kind": "function", "doc": "<p>Extract features from images using a pre-trained ResNet model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_paths</span>, </span><span class=\"param\"><span class=\"n\">resnet</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">resnet50</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.check_normality", "modulename": "spacr.utils", "qualname": "check_normality", "kind": "function", "doc": "<p>Helper function to check if a feature is normally distributed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.random_forest_feature_importance", "modulename": "spacr.utils", "qualname": "random_forest_feature_importance", "kind": "function", "doc": "<p>Random Forest feature importance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">all_df</span>, </span><span class=\"param\"><span class=\"n\">cluster_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;cluster&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.perform_statistical_tests", "modulename": "spacr.utils", "qualname": "perform_statistical_tests", "kind": "function", "doc": "<p>Perform ANOVA or Kruskal-Wallis tests depending on normality of features.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">all_df</span>, </span><span class=\"param\"><span class=\"n\">cluster_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;cluster&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.combine_results", "modulename": "spacr.utils", "qualname": "combine_results", "kind": "function", "doc": "<p>Combine the results into a single DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rf_df</span>, </span><span class=\"param\"><span class=\"n\">anova_df</span>, </span><span class=\"param\"><span class=\"n\">kruskal_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.cluster_feature_analysis", "modulename": "spacr.utils", "qualname": "cluster_feature_analysis", "kind": "function", "doc": "<p>Perform Random Forest feature importance, ANOVA for normally distributed features,\nand Kruskal-Wallis for non-normally distributed features. Combine results into a single DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">all_df</span>, </span><span class=\"param\"><span class=\"n\">cluster_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;cluster&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.adjust_cell_masks", "modulename": "spacr.utils", "qualname": "adjust_cell_masks", "kind": "function", "doc": "<p>Process all npy files in the given folders. Merge and relabel cells in cell masks\nbased on parasite overlap and cell perimeter sharing conditions.</p>\n\n<p>Args:\n    parasite_folder (str): Path to the folder containing parasite masks.\n    cell_folder (str): Path to the folder containing cell masks.\n    nuclei_folder (str): Path to the folder containing nuclei masks.\n    overlap_threshold (float): The percentage threshold for merging cells based on parasite overlap.\n    perimeter_threshold (float): The percentage threshold for merging cells based on shared perimeter.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parasite_folder</span>,</span><span class=\"param\">\t<span class=\"n\">cell_folder</span>,</span><span class=\"param\">\t<span class=\"n\">nuclei_folder</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_threshold</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">perimeter_threshold</span><span class=\"o\">=</span><span class=\"mi\">30</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.process_masks", "modulename": "spacr.utils", "qualname": "process_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_folder</span>,</span><span class=\"param\">\t<span class=\"n\">image_folder</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.merge_regression_res_with_metadata", "modulename": "spacr.utils", "qualname": "merge_regression_res_with_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">results_file</span>, </span><span class=\"param\"><span class=\"n\">metadata_file</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;_metadata&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.process_vision_results", "modulename": "spacr.utils", "qualname": "process_vision_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_ml_results_paths", "modulename": "spacr.utils", "qualname": "get_ml_results_paths", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">model_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;xgboost&#39;</span>, </span><span class=\"param\"><span class=\"n\">channel_of_interest</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.augment_image", "modulename": "spacr.utils", "qualname": "augment_image", "kind": "function", "doc": "<p>Perform data augmentation by rotating and reflecting the image.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>image (PIL Image or numpy array): The input image.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>augmented_images (list): A list of augmented images.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.augment_dataset", "modulename": "spacr.utils", "qualname": "augment_dataset", "kind": "function", "doc": "<p>Perform data augmentation on the entire dataset by rotating and reflecting the images.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>dataset (list of tuples): The input dataset, each entry is a tuple (image, label, filename).</li>\n<li>is_grayscale (bool): Flag indicating if the images are grayscale.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>augmented_dataset (list of tuples): A dataset with augmented (image, label, filename) tuples.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">is_grayscale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.convert_and_relabel_masks", "modulename": "spacr.utils", "qualname": "convert_and_relabel_masks", "kind": "function", "doc": "<p>Converts all int64 npy masks in a folder to uint16 with relabeling to ensure all labels are retained.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>folder_path (str): The path to the folder containing int64 npy mask files.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.correct_masks", "modulename": "spacr.utils", "qualname": "correct_masks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.count_reads_in_fastq", "modulename": "spacr.utils", "qualname": "count_reads_in_fastq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fastq_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.get_cuda_version", "modulename": "spacr.utils", "qualname": "get_cuda_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.all_elements_match", "modulename": "spacr.utils", "qualname": "all_elements_match", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list1</span>, </span><span class=\"param\"><span class=\"n\">list2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.prepare_batch_for_segmentation", "modulename": "spacr.utils", "qualname": "prepare_batch_for_segmentation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">batch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.check_index", "modulename": "spacr.utils", "qualname": "check_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">split_char</span><span class=\"o\">=</span><span class=\"s1\">&#39;_&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.map_condition", "modulename": "spacr.utils", "qualname": "map_condition", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col_value</span>, </span><span class=\"param\"><span class=\"n\">neg</span><span class=\"o\">=</span><span class=\"s1\">&#39;c1&#39;</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"s1\">&#39;c2&#39;</span>, </span><span class=\"param\"><span class=\"n\">mix</span><span class=\"o\">=</span><span class=\"s1\">&#39;c3&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.download_models", "modulename": "spacr.utils", "qualname": "download_models", "kind": "function", "doc": "<p>Downloads all model files from Hugging Face and stores them in the <code>resources/models</code> directory \nwithin the installed <code>spacr</code> package.</p>\n\n<p>Args:\n    repo_id (str): The repository ID on Hugging Face (default is 'einarolafsson/models').\n    retries (int): Number of retry attempts in case of failure.\n    delay (int): Delay in seconds between retries.</p>\n\n<p>Returns:\n    str: The local path to the downloaded models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">repo_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;einarolafsson/models&#39;</span>, </span><span class=\"param\"><span class=\"n\">retries</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.generate_cytoplasm_mask", "modulename": "spacr.utils", "qualname": "generate_cytoplasm_mask", "kind": "function", "doc": "<p>Generates a cytoplasm mask from nucleus and cell masks.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>nucleus_mask (np.array): Binary or segmented mask of the nucleus (non-zero values represent nucleus).</li>\n<li>cell_mask (np.array): Binary or segmented mask of the whole cell (non-zero values represent cell).</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>cytoplasm_mask (np.array): Mask for the cytoplasm (1 for cytoplasm, 0 for nucleus and pathogens).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nucleus_mask</span>, </span><span class=\"param\"><span class=\"n\">cell_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.add_column_to_database", "modulename": "spacr.utils", "qualname": "add_column_to_database", "kind": "function", "doc": "<p>Adds a new column to the database table by matching on a common column from the DataFrame.\nIf the column already exists in the database, it adds the column with a suffix.\nNaN values will remain as NULL in the database.</p>\n\n<p>Parameters:\n    settings (dict): A dictionary containing the following keys:\n        csv_path (str): Path to the CSV file with the data to be added.\n        db_path (str): Path to the SQLite database (or connection string for other databases).\n        table_name (str): The name of the table in the database.\n        update_column (str): The name of the new column in the DataFrame to add to the database.\n        match_column (str): The common column used to match rows.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.fill_holes_in_mask", "modulename": "spacr.utils", "qualname": "fill_holes_in_mask", "kind": "function", "doc": "<p>Fill holes in each object in the mask while keeping objects separated.</p>\n\n<p>Args:\n    mask (np.ndarray): A labeled mask where each object has a unique integer value.</p>\n\n<p>Returns:\n    np.ndarray: A mask with holes filled and original labels preserved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.correct_metadata_column_names", "modulename": "spacr.utils", "qualname": "correct_metadata_column_names", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.control_filelist", "modulename": "spacr.utils", "qualname": "control_filelist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;columnID&#39;</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;02&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.rename_columns_in_db", "modulename": "spacr.utils", "qualname": "rename_columns_in_db", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.group_feature_class", "modulename": "spacr.utils", "qualname": "group_feature_class", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">feature_groups</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;cell&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cytoplasm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nucleus&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pathogen&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;compartment&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.delete_intermedeate_files", "modulename": "spacr.utils", "qualname": "delete_intermedeate_files", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">settings</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.filter_and_save_csv", "modulename": "spacr.utils", "qualname": "filter_and_save_csv", "kind": "function", "doc": "<p>Reads a CSV into a DataFrame, filters rows based on a column for values &gt; upper_threshold and &lt; lower_threshold,\nand saves the filtered DataFrame to a new CSV file.</p>\n\n<p>Parameters:\n    input_csv (str): Path to the input CSV file.\n    output_csv (str): Path to save the filtered CSV file.\n    column_name (str): Column name to apply the filters on.\n    upper_threshold (float): Upper threshold for filtering (values greater than this are retained).\n    lower_threshold (float): Lower threshold for filtering (values less than this are retained).</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_csv</span>, </span><span class=\"param\"><span class=\"n\">output_csv</span>, </span><span class=\"param\"><span class=\"n\">column_name</span>, </span><span class=\"param\"><span class=\"n\">upper_threshold</span>, </span><span class=\"param\"><span class=\"n\">lower_threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.extract_tar_bz2_files", "modulename": "spacr.utils", "qualname": "extract_tar_bz2_files", "kind": "function", "doc": "<p>Extracts all .tar.bz2 files in the given folder into subfolders with the same name as the tar file.</p>\n\n<p>Parameters:\n    folder_path (str): Path to the folder containing .tar.bz2 files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.calculate_shortest_distance", "modulename": "spacr.utils", "qualname": "calculate_shortest_distance", "kind": "function", "doc": "<p>Calculate the shortest edge-to-edge distance between two objects (e.g., pathogen and nucleus).</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>df: Pandas DataFrame containing measurements</li>\n<li>object1: String, name of the first object (e.g., \"pathogen\")</li>\n<li>object2: String, name of the second object (e.g., \"nucleus\")</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>df: Pandas DataFrame with a new column for shortest edge-to-edge distance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">object1</span>, </span><span class=\"param\"><span class=\"n\">object2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.format_path_for_system", "modulename": "spacr.utils", "qualname": "format_path_for_system", "kind": "function", "doc": "<p>Takes a file path and reformats it to be compatible with the current operating system.</p>\n\n<p>Args:\n    path (str): The file path to be formatted.</p>\n\n<p>Returns:\n    str: The formatted path for the current operating system.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.normalize_src_path", "modulename": "spacr.utils", "qualname": "normalize_src_path", "kind": "function", "doc": "<p>Ensures that the 'src' value is properly formatted as either a list of strings or a single string.</p>\n\n<p>Args:\n    src (str or list): The input source path(s).</p>\n\n<p>Returns:\n    list or str: A correctly formatted list if the input was a list (or string representation of a list),\n                 otherwise a single string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.generate_image_path_map", "modulename": "spacr.utils", "qualname": "generate_image_path_map", "kind": "function", "doc": "<p>Recursively scans a folder and its subfolders for images, then creates a mapping of:\n{original_image_path: new_image_path}, where the new path includes all subfolder names.</p>\n\n<p>Args:\n    root_folder (str): The root directory to scan for images.\n    valid_extensions (tuple): Tuple of valid image file extensions.</p>\n\n<p>Returns:\n    dict: A dictionary mapping original image paths to their new paths.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root_folder</span>,</span><span class=\"param\">\t<span class=\"n\">valid_extensions</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;tif&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tiff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;png&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jpg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jpeg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bmp&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;czi&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nd2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lif&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.copy_images_to_consolidated", "modulename": "spacr.utils", "qualname": "copy_images_to_consolidated", "kind": "function", "doc": "<p>Copies images from their original locations to a 'consolidated' folder,\nrenaming them according to the generated dictionary.</p>\n\n<p>Args:\n    image_path_map (dict): Dictionary mapping {original_path: new_path}.\n    root_folder (str): The root directory where the 'consolidated' folder will be created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_path_map</span>, </span><span class=\"param\"><span class=\"n\">root_folder</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "spacr.utils.correct_metadata", "modulename": "spacr.utils", "qualname": "correct_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();