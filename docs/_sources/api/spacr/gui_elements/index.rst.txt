spacr.gui_elements
==================

.. py:module:: spacr.gui_elements








Module Contents
---------------

.. py:data:: fig
   :value: None


.. py:function:: restart_gui_app(root)

   Restarts the SpaCr GUI application by destroying the current root window
   and launching a fresh instance.

   :param root: The current Tkinter root window to be destroyed.
   :type root: tk.Tk

   .. note:: The new instance is launched by importing and invoking `gui_app()`.


.. py:function:: create_menu_bar(root)

   Creates a top-level menu bar for the SpaCr GUI containing shortcuts to all
   major application modules and help resources.

   :param root: The root window where the menu bar will be attached.
   :type root: tk.Tk

   Adds:
       - A 'SpaCr Applications' menu with links to:
         'Mask', 'Measure', 'Classify', 'ML Analyze', 'Map Barcodes',
         'Regression', 'Activation', and 'Recruitment'.
       - A Help option linking to the online documentation.
       - An Exit option to quit the application.


.. py:function:: set_element_size()

   Calculates and returns standardized UI element dimensions
   based on the current screen size.

   :returns:

             A dictionary with element dimensions including:
                 - 'btn_size' (int): Size of buttons.
                 - 'bar_size' (int): Height of progress bars.
                 - 'settings_width' (int): Width of the settings panel.
                 - 'panel_width' (int): Width of the plotting panel.
                 - 'panel_height' (int): Height of the bottom control panel.
   :rtype: dict


.. py:function:: set_dark_style(style, parent_frame=None, containers=None, widgets=None, font_family='OpenSans', font_size=12, bg_color='black', fg_color='white', active_color='blue', inactive_color='dark_gray')

   Applies a dark theme to the SpaCr GUI using the provided styling options.

   :param style: The ttk style instance to configure.
   :type style: ttk.Style
   :param parent_frame: The top-level container to apply styles to.
   :type parent_frame: tk.Widget, optional
   :param containers: Additional containers (ttk.Frame or tk.Frame) to style.
   :type containers: list, optional
   :param widgets: List of individual widgets to apply colors and fonts.
   :type widgets: list, optional
   :param font_family: Font family for all labels and buttons.
   :type font_family: str
   :param font_size: Font size for all text elements.
   :type font_size: int
   :param bg_color: Background color.
   :type bg_color: str
   :param fg_color: Foreground/text color.
   :type fg_color: str
   :param active_color: Highlight or selected color.
   :type active_color: str
   :param inactive_color: Secondary background color.
   :type inactive_color: str

   :returns: Style parameters used, including resolved font and color values.
   :rtype: dict


.. py:class:: spacrFont(font_name, font_style, font_size=12)

   Initializes the FontLoader class.

   Parameters:
   - font_name: str, the name of the font (e.g., 'OpenSans').
   - font_style: str, the style of the font (e.g., 'Regular', 'Bold').
   - font_size: int, the size of the font (default: 12).


   .. py:attribute:: font_name


   .. py:attribute:: font_style


   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_path


   .. py:method:: get_font_path(font_name, font_style)

      Returns the font path based on the font name and style.

      Parameters:
      - font_name: str, the name of the font.
      - font_style: str, the style of the font.

      Returns:
      - str, the path to the font file.



   .. py:method:: load_font()

      Loads the font into Tkinter.



   .. py:method:: get_font(size=None)

      Returns the font in the specified size.

      Parameters:
      - size: int, the size of the font (optional).

      Returns:
      - tkFont.Font object.



.. py:class:: spacrContainer(parent, orient=tk.VERTICAL, bg=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: orient
      :value: 'vertical'



   .. py:attribute:: bg
      :value: 'lightgrey'



   .. py:attribute:: sash_thickness
      :value: 10



   .. py:attribute:: panes
      :value: []



   .. py:attribute:: sashes
      :value: []



   .. py:method:: add(widget, stretch='always')


   .. py:method:: create_sash()


   .. py:method:: reposition_panes()


   .. py:method:: on_configure(event)


   .. py:method:: on_enter_sash(event)


   .. py:method:: on_leave_sash(event)


   .. py:method:: start_resize(event)


   .. py:method:: perform_resize(event)


.. py:class:: spacrEntry(parent, textvariable=None, outline=False, width=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: bg_color
      :value: 'dark_gray'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: outline
      :value: False



   .. py:attribute:: font_family
      :value: 'OpenSans'



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_loader


   .. py:attribute:: canvas_height
      :value: 40



   .. py:attribute:: canvas


   .. py:method:: draw_rounded_rectangle(color)


   .. py:method:: on_focus_in(event)


   .. py:method:: on_focus_out(event)


.. py:class:: spacrCheck(parent, text='', variable=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: bg_color
      :value: 'black'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: variable
      :value: None



   .. py:attribute:: canvas_width
      :value: 20



   .. py:attribute:: canvas_height
      :value: 20



   .. py:attribute:: canvas


   .. py:method:: draw_rounded_square(color)


   .. py:method:: update_check(*args)


   .. py:method:: toggle_variable(event)


.. py:class:: spacrCombo(parent, textvariable=None, values=None, width=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: bg_color
      :value: 'black'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: font_family
      :value: 'OpenSans'



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_loader


   .. py:attribute:: values
      :value: []



   .. py:attribute:: canvas_width
      :value: None



   .. py:attribute:: canvas_height
      :value: 40



   .. py:attribute:: canvas


   .. py:attribute:: var


   .. py:attribute:: selected_value


   .. py:attribute:: dropdown_menu
      :value: None



   .. py:method:: draw_rounded_rectangle(color)


   .. py:method:: on_click(event)


   .. py:method:: open_dropdown()


   .. py:method:: close_dropdown()


   .. py:method:: on_select(value)


   .. py:method:: set(value)


.. py:class:: spacrDropdownMenu(parent, variable, options, command=None, font=None, size=50, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: variable


   .. py:attribute:: options


   .. py:attribute:: command
      :value: None



   .. py:attribute:: text
      :value: 'Settings'



   .. py:attribute:: size
      :value: 50



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_loader


   .. py:attribute:: button_width
      :value: 150



   .. py:attribute:: canvas_width
      :value: 154



   .. py:attribute:: canvas_height
      :value: 54



   .. py:attribute:: canvas


   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: bg_color
      :value: 'black'



   .. py:attribute:: button_bg


   .. py:attribute:: button_text


   .. py:attribute:: menu


   .. py:method:: create_rounded_rectangle(x1, y1, x2, y2, radius=20, **kwargs)


   .. py:method:: on_enter(event=None)


   .. py:method:: on_leave(event=None)


   .. py:method:: on_click(event=None)


   .. py:method:: post_menu()


   .. py:method:: on_select(option)


   .. py:method:: update_styles(active_categories=None)


.. py:class:: spacrCheckbutton(parent, text='', variable=None, command=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.ttk.Checkbutton`


   Construct a Ttk Checkbutton widget with the parent master.

   STANDARD OPTIONS

       class, compound, cursor, image, state, style, takefocus,
       text, textvariable, underline, width

   WIDGET-SPECIFIC OPTIONS

       command, offvalue, onvalue, variable


   .. py:attribute:: text
      :value: ''



   .. py:attribute:: variable


   .. py:attribute:: command
      :value: None



.. py:class:: spacrProgressBar(parent, label=True, *args, **kwargs)

   Bases: :py:obj:`tkinter.ttk.Progressbar`


   Construct a Ttk Progressbar with parent master.

   STANDARD OPTIONS

       class, cursor, style, takefocus

   WIDGET-SPECIFIC OPTIONS

       orient, length, mode, maximum, value, variable, phase


   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: bg_color
      :value: 'black'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_loader


   .. py:attribute:: style


   .. py:attribute:: label
      :value: True



   .. py:attribute:: operation_type
      :value: None



   .. py:attribute:: additional_info
      :value: None



   .. py:method:: set_label_position()


   .. py:method:: update_label()


.. py:class:: spacrSlider(master=None, length=None, thickness=2, knob_radius=10, position='center', from_=0, to=100, value=None, show_index=False, command=None, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: specified_length
      :value: None



   .. py:attribute:: knob_radius
      :value: 10



   .. py:attribute:: thickness
      :value: 2



   .. py:attribute:: knob_position
      :value: 10



   .. py:attribute:: slider_line
      :value: None



   .. py:attribute:: knob
      :value: None



   .. py:attribute:: position
      :value: ''



   .. py:attribute:: offset
      :value: 0



   .. py:attribute:: from_
      :value: 0



   .. py:attribute:: to
      :value: 100



   .. py:attribute:: value
      :value: None



   .. py:attribute:: show_index
      :value: False



   .. py:attribute:: command
      :value: None



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: bg_color
      :value: 'black'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: canvas


   .. py:attribute:: length
      :value: None



   .. py:method:: resize_slider(event)


   .. py:method:: value_to_position(value)


   .. py:method:: position_to_value(position)


   .. py:method:: draw_slider(inactive=False)


   .. py:method:: move_knob(event)


   .. py:method:: activate_knob(event)


   .. py:method:: release_knob(event)


   .. py:method:: set_to(new_to)


   .. py:method:: get()


   .. py:method:: set(value)

      Set the slider's value and update the knob position.



   .. py:method:: jump_to_click(event)


   .. py:method:: update_slider_from_entry(event)

      Update the slider's value from the entry.



.. py:function:: spacrScrollbarStyle(style, inactive_color, active_color)

.. py:class:: spacrFrame(container, width=None, *args, bg='black', radius=20, scrollbar=True, textbox=False, **kwargs)

   Bases: :py:obj:`tkinter.ttk.Frame`


   Construct a Ttk Frame with parent master.

   STANDARD OPTIONS

       class, cursor, style, takefocus

   WIDGET-SPECIFIC OPTIONS

       borderwidth, relief, padding, width, height


   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:method:: rounded_rectangle(canvas, x1, y1, x2, y2, radius=20, **kwargs)


.. py:class:: spacrLabel(parent, text='', font=None, style=None, align='right', height=None, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: text
      :value: ''



   .. py:attribute:: align
      :value: 'right'



   .. py:attribute:: style_out


   .. py:attribute:: font_style
      :value: 'OpenSans'



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_family
      :value: 'OpenSans'



   .. py:attribute:: font_loader


   .. py:attribute:: canvas


   .. py:attribute:: style
      :value: None



   .. py:method:: set_text(text)


.. py:class:: spacrButton(parent, text='', command=None, font=None, icon_name=None, size=50, show_text=True, outline=False, animation=True, *args, **kwargs)

   Bases: :py:obj:`tkinter.Frame`


   Construct a frame widget with the parent MASTER.

   Valid resource names: background, bd, bg, borderwidth, class,
   colormap, container, cursor, height, highlightbackground,
   highlightcolor, highlightthickness, relief, takefocus, visual, width.


   .. py:attribute:: text
      :value: ''



   .. py:attribute:: command
      :value: None



   .. py:attribute:: icon_name
      :value: ''



   .. py:attribute:: size
      :value: 50



   .. py:attribute:: show_text
      :value: True



   .. py:attribute:: outline
      :value: False



   .. py:attribute:: animation
      :value: True



   .. py:attribute:: font_size
      :value: 12



   .. py:attribute:: font_loader


   .. py:attribute:: canvas


   .. py:attribute:: inactive_color
      :value: 'dark_gray'



   .. py:attribute:: bg_color
      :value: 'dark_gray'



   .. py:attribute:: active_color
      :value: 'blue'



   .. py:attribute:: fg_color
      :value: 'white'



   .. py:attribute:: is_zoomed_in
      :value: False



   .. py:method:: load_icon()


   .. py:method:: get_icon_path(icon_name)


   .. py:method:: on_enter(event=None)


   .. py:method:: on_leave(event=None)


   .. py:method:: on_click(event=None)


   .. py:method:: create_rounded_rectangle(x1, y1, x2, y2, radius=20, **kwargs)


   .. py:method:: update_description(event)


   .. py:method:: clear_description(event)


   .. py:method:: animate_zoom(target_scale, steps=10, delay=10)


   .. py:method:: zoom_icon(scale_factor)


.. py:class:: spacrSwitch(parent, text='', variable=None, command=None, *args, **kwargs)

   Bases: :py:obj:`tkinter.ttk.Frame`


   Construct a Ttk Frame with parent master.

   STANDARD OPTIONS

       class, cursor, style, takefocus

   WIDGET-SPECIFIC OPTIONS

       borderwidth, relief, padding, width, height


   .. py:attribute:: text
      :value: ''



   .. py:attribute:: variable


   .. py:attribute:: command
      :value: None



   .. py:attribute:: canvas


   .. py:attribute:: switch_bg


   .. py:attribute:: switch


   .. py:attribute:: label


   .. py:method:: toggle(event=None)


   .. py:method:: update_switch()


   .. py:method:: animate_switch()


   .. py:method:: animate_movement(start_x, end_x, final_color)


   .. py:method:: get()


   .. py:method:: set(value)


   .. py:method:: create_rounded_rectangle(x1, y1, x2, y2, radius=9, **kwargs)


.. py:class:: spacrToolTip(widget, text)

   .. py:attribute:: widget


   .. py:attribute:: text


   .. py:attribute:: tooltip_window
      :value: None



   .. py:method:: show_tooltip(event)


   .. py:method:: hide_tooltip(event)


.. py:function:: standardize_figure(fig)

.. py:function:: modify_figure_properties(fig, scale_x=None, scale_y=None, line_width=None, font_size=None, x_lim=None, y_lim=None, grid=False, legend=None, title=None, x_label_rotation=None, remove_axes=False, bg_color=None, text_color=None, line_color=None)

   Modifies the properties of the figure, including scaling, line widths, font sizes, axis limits, x-axis label rotation, background color, text color, line color, and other common options.

   Parameters:
   - fig: The Matplotlib figure object to modify.
   - scale_x: Scaling factor for the width of subplots (optional).
   - scale_y: Scaling factor for the height of subplots (optional).
   - line_width: Desired line width for all lines (optional).
   - font_size: Desired font size for all text (optional).
   - x_lim: Tuple specifying the x-axis limits (min, max) (optional).
   - y_lim: Tuple specifying the y-axis limits (min, max) (optional).
   - grid: Boolean to add grid lines to the plot (optional).
   - legend: Boolean to show/hide the legend (optional).
   - title: String to set as the title of the plot (optional).
   - x_label_rotation: Angle to rotate the x-axis labels (optional).
   - remove_axes: Boolean to remove or show the axes labels (optional).
   - bg_color: Color for the figure and subplot background (optional).
   - text_color: Color for all text in the figure (optional).
   - line_color: Color for all lines in the figure (optional).


.. py:function:: save_figure_as_format(fig, file_format)

.. py:function:: modify_figure(fig)

.. py:function:: generate_dna_matrix(output_path='dna_matrix.gif', canvas_width=1500, canvas_height=1000, duration=30, fps=20, base_size=20, transition_frames=30, font_type='arial.ttf', enhance=[1.1, 1.5, 1.2, 1.5], lowercase_prob=0.3)

   Generate a DNA matrix animation and save it as GIF, MP4, or AVI using OpenCV for videos.


